(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _geovis = __webpack_require__(2);

	var _geovis2 = _interopRequireDefault(_geovis);

	var _Util = __webpack_require__(6);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * 项目：GVML
	 * 文件：app.js.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com
	 * 日期：2017-02-21 13:36:37.
	 * 用途：API入口文件
	 */
	var scope = typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {};
	scope['GV'] = _geovis2.default;
	scope['$'] = _Util.$;
	scope['jQuery'] = _Util.$;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "app.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _GeoCanvas = __webpack_require__(3);

	var _GeoCanvas2 = _interopRequireDefault(_GeoCanvas);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _ENUM = __webpack_require__(14);

	var _ENUM2 = _interopRequireDefault(_ENUM);

	var _STYLEENUM = __webpack_require__(64);

	var _STYLEENUM2 = _interopRequireDefault(_STYLEENUM);

	var _Tool = __webpack_require__(131);

	var _Tool2 = _interopRequireDefault(_Tool);

	var _Widget = __webpack_require__(134);

	var _Widget2 = _interopRequireDefault(_Widget);

	var _Scene = __webpack_require__(60);

	var _Scene2 = _interopRequireDefault(_Scene);

	var _GraphicScene = __webpack_require__(59);

	var _GraphicScene2 = _interopRequireDefault(_GraphicScene);

	var _MilScene = __webpack_require__(99);

	var _MilScene2 = _interopRequireDefault(_MilScene);

	var _MilItem = __webpack_require__(100);

	var _MilItem2 = _interopRequireDefault(_MilItem);

	var _SatelliteScene = __webpack_require__(135);

	var _SatelliteScene2 = _interopRequireDefault(_SatelliteScene);

	var _Satellite = __webpack_require__(136);

	var _Satellite2 = _interopRequireDefault(_Satellite);

	var _DynTargetScene = __webpack_require__(98);

	var _DynTargetScene2 = _interopRequireDefault(_DynTargetScene);

	var _WeatherScene = __webpack_require__(141);

	var _WeatherScene2 = _interopRequireDefault(_WeatherScene);

	var _PlaceNameScene = __webpack_require__(101);

	var _PlaceNameScene2 = _interopRequireDefault(_PlaceNameScene);

	var _ObliqueScene = __webpack_require__(102);

	var _ObliqueScene2 = _interopRequireDefault(_ObliqueScene);

	var _CenterServer = __webpack_require__(142);

	var _CenterServer2 = _interopRequireDefault(_CenterServer);

	var _Commands = __webpack_require__(143);

	var _Commands2 = _interopRequireDefault(_Commands);

	var _ToolBox = __webpack_require__(48);

	var _ToolBox2 = _interopRequireDefault(_ToolBox);

	var _Socket = __webpack_require__(144);

	var _Socket2 = _interopRequireDefault(_Socket);

	var _Vector = __webpack_require__(145);

	var _Vector2 = _interopRequireDefault(_Vector);

	var _GdalLayerSource = __webpack_require__(24);

	var _GdalLayerSource2 = _interopRequireDefault(_GdalLayerSource);

	var _TileMapServiceSource = __webpack_require__(26);

	var _TileMapServiceSource2 = _interopRequireDefault(_TileMapServiceSource);

	var _WebMapServiceSource = __webpack_require__(27);

	var _WebMapServiceSource2 = _interopRequireDefault(_WebMapServiceSource);

	var _AggliteLayerSource = __webpack_require__(146);

	var _AggliteLayerSource2 = _interopRequireDefault(_AggliteLayerSource);

	var _ArcGisLayerSource = __webpack_require__(29);

	var _ArcGisLayerSource2 = _interopRequireDefault(_ArcGisLayerSource);

	var _XYZLayerSource = __webpack_require__(28);

	var _XYZLayerSource2 = _interopRequireDefault(_XYZLayerSource);

	var _GrstLayerSource = __webpack_require__(31);

	var _GrstLayerSource2 = _interopRequireDefault(_GrstLayerSource);

	var _RstLayerSource = __webpack_require__(30);

	var _RstLayerSource2 = _interopRequireDefault(_RstLayerSource);

	var _ColorRampLayerSource = __webpack_require__(32);

	var _ColorRampLayerSource2 = _interopRequireDefault(_ColorRampLayerSource);

	var _GeneralLayerSource = __webpack_require__(34);

	var _GeneralLayerSource2 = _interopRequireDefault(_GeneralLayerSource);

	var _GeneralModelSource = __webpack_require__(147);

	var _GeneralModelSource2 = _interopRequireDefault(_GeneralModelSource);

	var _OgrModelSource = __webpack_require__(42);

	var _OgrModelSource2 = _interopRequireDefault(_OgrModelSource);

	var _TileFeatureServiceSource = __webpack_require__(43);

	var _TileFeatureServiceSource2 = _interopRequireDefault(_TileFeatureServiceSource);

	var _WebFeatureServiceSource = __webpack_require__(44);

	var _WebFeatureServiceSource2 = _interopRequireDefault(_WebFeatureServiceSource);

	var _TileWebMapServiceSource = __webpack_require__(148);

	var _TileWebMapServiceSource2 = _interopRequireDefault(_TileWebMapServiceSource);

	var _FeatureGeomModelOptions = __webpack_require__(47);

	var _FeatureGeomModelOptions2 = _interopRequireDefault(_FeatureGeomModelOptions);

	var _WebMapTileServiceSource = __webpack_require__(38);

	var _WebMapTileServiceSource2 = _interopRequireDefault(_WebMapTileServiceSource);

	var _ColorFilter = __webpack_require__(45);

	var _ColorFilter2 = _interopRequireDefault(_ColorFilter);

	var _ProxyOption = __webpack_require__(149);

	var _ProxyOption2 = _interopRequireDefault(_ProxyOption);

	var _CachePolicy = __webpack_require__(36);

	var _CachePolicy2 = _interopRequireDefault(_CachePolicy);

	var _Layer = __webpack_require__(18);

	var _Layer2 = _interopRequireDefault(_Layer);

	var _BaseImageLayer = __webpack_require__(16);

	var _BaseImageLayer2 = _interopRequireDefault(_BaseImageLayer);

	var _ImageLayer = __webpack_require__(17);

	var _ImageLayer2 = _interopRequireDefault(_ImageLayer);

	var _TerrainLayer = __webpack_require__(33);

	var _TerrainLayer2 = _interopRequireDefault(_TerrainLayer);

	var _VectorLayer = __webpack_require__(46);

	var _VectorLayer2 = _interopRequireDefault(_VectorLayer);

	var _Config = __webpack_require__(52);

	var _Config2 = _interopRequireDefault(_Config);

	var _Node = __webpack_require__(61);

	var _Node2 = _interopRequireDefault(_Node);

	var _PositionBaseNode = __webpack_require__(67);

	var _PositionBaseNode2 = _interopRequireDefault(_PositionBaseNode);

	var _GeometryNode = __webpack_require__(69);

	var _GeometryNode2 = _interopRequireDefault(_GeometryNode);

	var _Place = __webpack_require__(66);

	var _Place2 = _interopRequireDefault(_Place);

	var _Icon = __webpack_require__(87);

	var _Icon2 = _interopRequireDefault(_Icon);

	var _Label = __webpack_require__(71);

	var _Label2 = _interopRequireDefault(_Label);

	var _Model = __webpack_require__(73);

	var _Model2 = _interopRequireDefault(_Model);

	var _Polyline = __webpack_require__(81);

	var _Polyline2 = _interopRequireDefault(_Polyline);

	var _Polygon = __webpack_require__(80);

	var _Polygon2 = _interopRequireDefault(_Polygon);

	var _Ellipsoid = __webpack_require__(78);

	var _Ellipsoid2 = _interopRequireDefault(_Ellipsoid);

	var _ImageOverLay = __webpack_require__(79);

	var _ImageOverLay2 = _interopRequireDefault(_ImageOverLay);

	var _Bubble = __webpack_require__(150);

	var _Bubble2 = _interopRequireDefault(_Bubble);

	var _Circle = __webpack_require__(74);

	var _Circle2 = _interopRequireDefault(_Circle);

	var _Cone = __webpack_require__(75);

	var _Cone2 = _interopRequireDefault(_Cone);

	var _Cube = __webpack_require__(76);

	var _Cube2 = _interopRequireDefault(_Cube);

	var _Ellipse = __webpack_require__(77);

	var _Ellipse2 = _interopRequireDefault(_Ellipse);

	var _GeoMesh = __webpack_require__(90);

	var _GeoMesh2 = _interopRequireDefault(_GeoMesh);

	var _LocalMesh = __webpack_require__(88);

	var _LocalMesh2 = _interopRequireDefault(_LocalMesh);

	var _Sphere = __webpack_require__(82);

	var _Sphere2 = _interopRequireDefault(_Sphere);

	var _Spline = __webpack_require__(83);

	var _Spline2 = _interopRequireDefault(_Spline);

	var _video = __webpack_require__(151);

	var _video2 = _interopRequireDefault(_video);

	var _PointCloud = __webpack_require__(91);

	var _PointCloud2 = _interopRequireDefault(_PointCloud);

	var _FieldData = __webpack_require__(152);

	var _FieldData2 = _interopRequireDefault(_FieldData);

	var _JBPoint = __webpack_require__(84);

	var _JBPoint2 = _interopRequireDefault(_JBPoint);

	var _JBLine = __webpack_require__(86);

	var _JBLine2 = _interopRequireDefault(_JBLine);

	var _ParticaleEffect = __webpack_require__(154);

	var _ParticaleEffect2 = _interopRequireDefault(_ParticaleEffect);

	var _PathFlowEffect = __webpack_require__(155);

	var _PathFlowEffect2 = _interopRequireDefault(_PathFlowEffect);

	var _PointEffect = __webpack_require__(92);

	var _PointEffect2 = _interopRequireDefault(_PointEffect);

	var _FireEffect = __webpack_require__(93);

	var _FireEffect2 = _interopRequireDefault(_FireEffect);

	var _SmokeEffect = __webpack_require__(95);

	var _SmokeEffect2 = _interopRequireDefault(_SmokeEffect);

	var _RainEffect = __webpack_require__(94);

	var _RainEffect2 = _interopRequireDefault(_RainEffect);

	var _ExplosionEffect = __webpack_require__(97);

	var _ExplosionEffect2 = _interopRequireDefault(_ExplosionEffect);

	var _WaveEffect = __webpack_require__(96);

	var _WaveEffect2 = _interopRequireDefault(_WaveEffect);

	var _SHOW_MODE = __webpack_require__(121);

	var _SHOW_MODE2 = _interopRequireDefault(_SHOW_MODE);

	var _INTERPOLATION = __webpack_require__(156);

	var _INTERPOLATION2 = _interopRequireDefault(_INTERPOLATION);

	var _WEBSOCKET = __webpack_require__(157);

	var _WEBSOCKET2 = _interopRequireDefault(_WEBSOCKET);

	var _CACHEPOLICY = __webpack_require__(37);

	var _CACHEPOLICY2 = _interopRequireDefault(_CACHEPOLICY);

	var _LISTENER = __webpack_require__(103);

	var _LISTENER2 = _interopRequireDefault(_LISTENER);

	var _xg = __webpack_require__(158);

	var _xg2 = _interopRequireDefault(_xg);

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }newObj.default = obj;return newObj;
	  }
	}

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	// import LayerManagerView from './components/LayerManagerView/LayersManagerView';
	// import PluginCenterViewer from './components/PluginCenterViewer';
	// import StoreViewer from './store/StoreViewer';


	// import * as Anime from './animate/Animation';
	/**
	 * 项目：GVML
	 * 文件：geovis.js
	 * 作者：巩志远, 钱晶
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com, jqian@mail.ie.ac.cn
	 * 日期：2017-02-21 13:40:46.
	 * 用途：组织数据关系
	 */

	/**
	 *
	 * @VERSION {string} 版本号
	 */
	exports.default = {
	  VERSION: '1.0.0.180326',
	  GeoCanvas: _GeoCanvas2.default,
	  // Animation: Anime.Animation,
	  // AnimationTimeLine: Anime.AnimationTimeLine,
	  Tool: _Tool2.default,
	  Widget: _Widget2.default,
	  ALTITUDE_CLAMPING: _STYLEENUM2.default.ALTITUDE_CLAMPING,
	  ALTITUDE_TECHNIQUE: _STYLEENUM2.default.ALTITUDE_TECHNIQUE,
	  ALTITUDE_BINDING: _STYLEENUM2.default.ALTITUDE_BINDING,
	  EFFECT_MODE: _STYLEENUM2.default.EFFECT_MODE,
	  ICON_ALIGN: _STYLEENUM2.default.ICON_ALIGN,
	  ICON_MODE: _STYLEENUM2.default.ICON_MODE,
	  JB_TEXT_POSITION: _STYLEENUM2.default.JB_TEXT_POSITION,
	  JB_LINE_TYPE: _STYLEENUM2.default.JB_LINE_TYPE,
	  MESH_MODE: _STYLEENUM2.default.MESH_MODE,
	  STROKE_LINEJOIN: _STYLEENUM2.default.STROKE_LINEJOIN,
	  STROKE_LINECAP: _STYLEENUM2.default.STROKE_LINECAP,
	  TEXT_ALIGNMENT: _STYLEENUM2.default.TEXT_ALIGNMENT,
	  TEXT_HALO_BACKDROP_TYPE: _STYLEENUM2.default.TEXT_HALO_BACKDROP_TYPE,
	  TEXT_HALO_IMPLEMENTATION: _STYLEENUM2.default.TEXT_HALO_IMPLEMENTATION,
	  TEXT_LAYOUT: _STYLEENUM2.default.TEXT_LAYOUT,
	  TEXT_ALIGN_MENT: _STYLEENUM2.default.TEXT_ALIGN_MENT,
	  ENCODING: _STYLEENUM2.default.ENCODING,
	  TEXT_AXIS_ALIGN_MENT: _STYLEENUM2.default.TEXT_AXIS_ALIGN_MENT,
	  TEXT_CHARACTER_SIZE_MODE: _STYLEENUM2.default.TEXT_CHARACTER_SIZE_MODE,
	  TEXT_GRADIENT: _STYLEENUM2.default.TEXT_GRADIENT,
	  POINT_EFFECT_MODE: _STYLEENUM2.default.POINT_EFFECT_MODE,
	  JB_LINE_TYPE_SERIF: _STYLEENUM2.default.JB_LINE_TYPE_SERIF,
	  BUBBLETYPE: _STYLEENUM2.default.BUBBLETYPE,
	  PLUGINTYPE: _ENUM2.default.PLUGINTYPE,
	  INTERPOLATION: _INTERPOLATION2.default,
	  WEBSOCKET: _WEBSOCKET2.default,
	  VIEWMODE: _ENUM2.default.VIEWMODE,
	  CURSOR_STYLE: _ENUM2.default.CURSOR_STYLE,
	  CLOUDTYPE: _ENUM2.default.CLOUDTYPE,
	  TARGETMOVETYPE: _ENUM2.default.TARGETMOVETYPE,
	  TARGETWARNTYPE: _ENUM2.default.TARGETWARNTYPE,
	  CACHEPOLICY: _CACHEPOLICY2.default,
	  DRAWABLETYPE: _STYLEENUM2.default.DRAWABLETYPE,

	  LISTENER: _LISTENER2.default,
	  // LayerManagerView,
	  // PluginCenterViewer,
	  // Store: StoreViewer,
	  Scene: _Scene2.default,
	  GraphicScene: _GraphicScene2.default,
	  DynTargetScene: _DynTargetScene2.default,
	  PlaceNameScene: _PlaceNameScene2.default,
	  WeatherScene: _WeatherScene2.default,
	  ObliqueScene: _ObliqueScene2.default,
	  MilScene: _MilScene2.default,
	  MilItem: _MilItem2.default,
	  SatelliteScene: _SatelliteScene2.default,
	  Satellite: _Satellite2.default,
	  Place: _Place2.default,
	  Icon: _Icon2.default,
	  CenterServer: _CenterServer2.default,
	  Commands: _Commands2.default,
	  Util: Util,
	  ToolBox: _ToolBox2.default,
	  Socket: _Socket2.default,
	  Vector3: _Vector2.default,
	  GdalLayerSource: _GdalLayerSource2.default,
	  TileMapServiceSource: _TileMapServiceSource2.default,
	  WebMapServiceSource: _WebMapServiceSource2.default,
	  AggliteLayerSource: _AggliteLayerSource2.default,
	  ArcGisLayerSource: _ArcGisLayerSource2.default,
	  XYZLayerSource: _XYZLayerSource2.default,
	  GrstLayerSource: _GrstLayerSource2.default,
	  RstLayerSource: _RstLayerSource2.default,
	  ColorRampLayerSource: _ColorRampLayerSource2.default,
	  GeneralLayerSource: _GeneralLayerSource2.default,
	  GeneralModelSource: _GeneralModelSource2.default,
	  OgrModelSource: _OgrModelSource2.default,
	  TileFeatureServiceSource: _TileFeatureServiceSource2.default,
	  WebFeatureServiceSource: _WebFeatureServiceSource2.default,
	  TileWebMapServiceSource: _TileWebMapServiceSource2.default,
	  FeatureGeomModelOptions: _FeatureGeomModelOptions2.default,
	  WebMapTileServiceSource: _WebMapTileServiceSource2.default,
	  ColorFilter: _ColorFilter2.default,
	  ProxyOption: _ProxyOption2.default,
	  CachePolicy: _CachePolicy2.default,
	  Layer: _Layer2.default,
	  BaseImageLayer: _BaseImageLayer2.default,
	  ImageLayer: _ImageLayer2.default,
	  TerrainLayer: _TerrainLayer2.default,
	  VectorLayer: _VectorLayer2.default,
	  Node: _Node2.default,
	  PositionBaseNode: _PositionBaseNode2.default,
	  GeometryNode: _GeometryNode2.default,
	  Label: _Label2.default,
	  Polyline: _Polyline2.default,
	  Polygon: _Polygon2.default,
	  Model: _Model2.default,
	  Ellipsoid: _Ellipsoid2.default,
	  Center: _Config2.default.Center,
	  // PlottingViewer,
	  ImageOverLay: _ImageOverLay2.default,
	  Bubble: _Bubble2.default,
	  Circle: _Circle2.default,
	  Cone: _Cone2.default,
	  Cube: _Cube2.default,
	  Ellipse: _Ellipse2.default,
	  GeoMesh: _GeoMesh2.default,
	  LocalMesh: _LocalMesh2.default,
	  Sphere: _Sphere2.default,
	  Spline: _Spline2.default,
	  FieldData: _FieldData2.default,
	  Video: _video2.default,
	  PointCloud: _PointCloud2.default,
	  JBPoint: _JBPoint2.default,
	  JBLine: _JBLine2.default,
	  ParticaleEffect: _ParticaleEffect2.default,
	  PathFlowEffect: _PathFlowEffect2.default,
	  PointEffect: _PointEffect2.default,
	  FireEffect: _FireEffect2.default,
	  SmokeEffect: _SmokeEffect2.default,
	  RainEffect: _RainEffect2.default,
	  ExplosionEffect: _ExplosionEffect2.default,
	  WaveEffect: _WaveEffect2.default,
	  SHOW_MODE: _SHOW_MODE2.default,
	  // i18n,
	  XG: _xg2.default
	};
	// import i18n from './core/i18n';

	// import PlottingViewer from './viewer/PlottingViewer';

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "geovis.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：GeoCanvas.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2016-03-22 09:35:33
	 * 用途：map表现层类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Map = __webpack_require__(4);

	var _Map2 = _interopRequireDefault(_Map);

	var _Event2 = __webpack_require__(51);

	var _Event3 = _interopRequireDefault(_Event2);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _Exception = __webpack_require__(35);

	var _Exception2 = _interopRequireDefault(_Exception);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	var _PluginManager = __webpack_require__(119);

	var _PluginManager2 = _interopRequireDefault(_PluginManager);

	var _SHOW_MODE = __webpack_require__(121);

	var _SHOW_MODE2 = _interopRequireDefault(_SHOW_MODE);

	var _Config = __webpack_require__(52);

	var _Config2 = _interopRequireDefault(_Config);

	var _Scene = __webpack_require__(60);

	var _Scene2 = _interopRequireDefault(_Scene);

	var _Create = __webpack_require__(122);

	var _Create2 = _interopRequireDefault(_Create);

	var _Edit = __webpack_require__(128);

	var _Edit2 = _interopRequireDefault(_Edit);

	var _Select = __webpack_require__(129);

	var _Select2 = _interopRequireDefault(_Select);

	var _DefaultProperties = __webpack_require__(130);

	var _DefaultProperties2 = _interopRequireDefault(_DefaultProperties);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module map
	 * @main map
	 * @namespace GV
	 */
	var GeoCanvas = function (_Event) {
	    _inherits(GeoCanvas, _Event);

	    /**
	     * 地理画布类
	     *  <pre>其作用主要进行地球实体的承载</pre>
	     *
	     * @extends Event
	     * @class GeoCanvas
	     * @constructor 构造函数
	     * @param container {cssSelector|HTMLElement }  如下
	     * <pre>
	     *  css选择器[cssSelector]: #aaa,.aaa
	     *  HTMLElement:document.getElementById('aaa')
	     * </pre>
	     * @param [params={xx.gvml|json}] 输入参数<br/>
	     * 1.如果是.gvml结尾,则获取gvml文件并解析成json格式转到2<br/>
	     * 2.如果是json如下
	     * @param params.name {string} 地理画布名称
	     * @param params.plugins {json} 初始换要加载的插件名
	     * @param params.map.supported_mode {string} 地理画布支持的视图模式（2D;3D;Map2D），参数可单选或多选，多选时使用分号隔开
	     * @param params.map.current_mode {string} 地理画布当前显示的视图模式，取值范围由supported_mode的值决定。只能单选。
	     * @param params.map.current_clock {json} 设置地理画布时间（如果不设置使用系统时间。 参数：{ year: 2012, month: 7, day: 14, hour: 7, minute: 39, second: 55}）
	     * @param params.map.has_switch_animation {Boolean} 二三维为模式切换是否有切换动画
	     * @param params.map.camera_home {json} 设置相机默认位置（参数参考GV.Camera的相机姿态）
	     * @param params.map.camera_viewpoint {json} 相机起始位置（当球加载完成后的相机姿态，参数参考GV.Camera的相机姿态）
	     * @param params.map.camera_distance {json} 相机的最大最小视距（参数: {min:最小可见距离, min:最大可见距离}）
	     * @param params.map.layers {json} 初始化加载的图层集
	     * @param params.map.scenes {json} 初始化加载的场景集
	     * @param params.map.options {json} 三维地球初始参数(参数: 参考GV.MapOptions初始化参数)
	     * @show true
	     */
	    function GeoCanvas(container) {
	        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	        _classCallCheck(this, GeoCanvas);

	        // 判定参数有效性
	        container = Util.$(container);
	        if (container.length < 1) {
	            throw new _Exception2.default(_ExceptionMessage2.default.UNDEFINED_PARENT_CONTAINER, 'GeoCanvas');
	        }

	        var _this2 = _possibleConstructorReturn(this, (GeoCanvas.__proto__ || Object.getPrototypeOf(GeoCanvas)).call(this));

	        if (params && params != null && !Util.isJson(params)) {
	            if (Util.isString(params)) {
	                try {
	                    // 是否为json字符串
	                    params = JSON.parse(params);
	                    _this2.initView(container, params);
	                } catch (e) {
	                    // 查看是否为网络路径
	                    var httpStr = params.substring(0, params.indexOf(':')).toLocaleLowerCase();
	                    if (httpStr.startsWith('http') || params.indexOf('.gvml') > -1) {
	                        var promise = Util.xmlPromise(params);
	                        promise.done(function (xml) {
	                            _this2.initViewFromXml(container, xml);
	                        });
	                        promise.fail(function (text) {
	                            if (text.readyState === 4 && text.status === 200) {
	                                try {
	                                    params = Util.strToXml(text.responseText);
	                                    _this2.initViewFromXml(container, params);
	                                } catch (tempE) {
	                                    throw new _Exception2.default(_ExceptionMessage2.default.ERROR_GVML_FILE_PARSE);
	                                }
	                            } else {
	                                throw new _Exception2.default(_ExceptionMessage2.default.ERROR_GVML_FILE_READ);
	                            }
	                        });
	                    } else {
	                        try {
	                            params = Util.strToXml(params);
	                            _this2.initViewFromXml(container, params);
	                        } catch (exc) {
	                            throw new _Exception2.default(_ExceptionMessage2.default.ERRAR_PARAMS);
	                        }
	                    }
	                }
	            } else {
	                throw new _Exception2.default(_ExceptionMessage2.default.ERRAR_PARAMS);
	            }
	        } else {
	            _this2.initView(container, params);
	        }

	        //初始化需要球加载完成后的操作

	        _this2.onReady(function (earth) {

	            //初始化相机位置
	            earth.camera.flyToHome();

	            // //内部设置时间
	            // if (earth.map._currentClock.initClock) {
	            //     earth.setCurrentClock(earth.map._currentClock.initClock);
	            // }

	            // 必须先将风参数传递进去之后，再开启天空、海水大气风参数才生效，否则风效果不出现！！
	            if (earth.map.mapOptions.wind.direction !== 0 || earth.map.mapOptions.wind.level !== 3) {
	                earth.map.mapOptions.wind.init();
	            }

	            if (earth.map.mapOptions.sky && earth.map.mapOptions.sky.visible) {
	                earth.map.mapOptions.sky.init();
	            }

	            if (earth.map.mapOptions.ocean.visible) {
	                earth.map.mapOptions.ocean.init();
	            }

	            if (earth.map.mapOptions.graticule.visible) {
	                earth.map.mapOptions.graticule.init();
	            }

	            if (earth.map.mapOptions.grid.visible) {
	                earth.map.mapOptions.grid.init();
	            }

	            // if (earth.map.mapOptions.j2000) {
	            //     earth.map.mapOptions.j2000.init();
	            // }

	            //初始化内置插件
	            earth._builtInTools = new Map();
	            earth._builtInTools.set('createNode', new _Create2.default(earth));
	            earth._builtInTools.set('editNode', new _Edit2.default(earth));
	            earth._builtInTools.set('selectNode', new _Select2.default(earth));
	            earth._currentBuiltInToolName = '';
	        });
	        return _this2;
	    }

	    /**
	     * 创建完成回调方法
	     * @chainable
	     * @method onReady
	     * @param {Function} callback 回调事件
	     */

	    _createClass(GeoCanvas, [{
	        key: 'onReady',
	        value: function onReady(callback) {
	            if (!Util.$.isFunction(callback)) {
	                throw new _Exception2.default('' + _ExceptionMessage2.default.ERROR_PARAMS_FUNCTION[_ExceptionMessage2.default.show_language], 'onReady');
	            }
	            var _this = this;
	            var myFrame = null;

	            function _cheakMapAllReady() {
	                if (_this.map && _this.map._complete && _this.map._layerSet._complete && _this.camera._complete) {
	                    cancelAnimationFrame(myFrame);
	                    callback(_this);
	                } else {
	                    myFrame = requestAnimationFrame(_cheakMapAllReady);
	                }
	            }

	            _cheakMapAllReady();
	        }

	        /**
	         * 通过传递的参数初始化
	         * @param container {dom} 容器,放置地球的地方
	         * @param params {json} 用来初始化地球
	         */

	    }, {
	        key: 'initView',
	        value: function initView(container, params) {
	            var embed = container.find('embed');
	            if (embed.length < 1) {
	                embed = Util.$('<embed>').attr('type', 'earth').css({ width: '100%', height: '100%' }).appendTo(container);
	            }
	            this._container = container;
	            this._earthdiv = embed;
	            this.map = new _Map2.default(params.geocanvas ? params.geocanvas : params, embed[0], this);
	            // return new PlottingViewer(this);
	        }

	        /**
	         * 三维球自身的div（jquery对象）
	         * @property earthdiv
	         */

	    }, {
	        key: 'initViewFromXml',
	        value: function initViewFromXml(container, xmlStr) {
	            var xmlParams = Util.xmlToJson(xmlStr);
	            var mapParams = {};
	            if (xmlParams) {
	                mapParams = xmlParams.geocanvas || {};
	            }
	            this.initView(container, mapParams);
	        }

	        /**
	         * 获得用户自定义配置
	         * @property userOptions
	         * @description 读取浏览器工作目录下的userOptions.conf文件
	         */

	    }, {
	        key: 'setCurrentClock',

	        /**
	         * 地图显示当前时间
	         * @property options
	         * @param {Object|string} options可设为"2002-12-3 23:38:18"或{year:2002,month:12,day:3,hour:23,minute:38,second:18} 
	         * @param {Number} options.year     年
	         * @param {Number} options.month    月，大于等于0，小于12
	         * @param {Number} options.day      日
	         * @param {Number} options.hour     小时，大于等于0，小于24
	         * @param {Number} options.minute   分钟，大于等于0，小于60
	         * @param {Number} options.second   秒，大于等于0，小于60
	         */
	        value: function setCurrentClock(options) {
	            this.map.setCurrentClock(options);
	        }
	    }, {
	        key: 'getCurrentClock',
	        value: function getCurrentClock(fun, type) {
	            return this.map.getCurrentClock(fun, type);
	        }

	        /**
	         * 支持显示模式
	         * @property supportedMode {String} 只读属性
	         * @description 类型: <br>
	         *      地理画布支持的视图模式（2D;3D;Map2D），
	         *      参数可单选或多选，
	         *      多选时使用分号隔开。
	         *                  </pre>
	         */

	    }, {
	        key: 'getMapTool',

	        /**
	         * 根据名称获取c++的ToolBox里的插件
	         * @method getMapTool
	         * @param name {string}
	         * @return {GV.CTool} 返回工具
	         */
	        value: function getMapTool(name) {
	            return this.map._toolBox.getByName(name);
	        }

	        /**
	         * 关闭所有c++的ToolBox里的插件
	         * @method clearMapTool
	         */

	    }, {
	        key: 'clearMapTool',
	        value: function clearMapTool() {
	            this.map._toolBox.clear();
	        }

	        /**
	         * 获取c++的WidgetBox里的插件
	         * @method getMapWidget
	         * @param name {string}
	         * @return {GV.CWidget} 返回挂件
	         */

	    }, {
	        key: 'getMapWidget',
	        value: function getMapWidget(name) {
	            return this.map._widgetBox.getByName(name);
	        }

	        /**
	         * 获取事件监听对象
	         * @property MessageListener
	         */

	    }, {
	        key: 'pick',

	        /**
	         * 场景求交
	         * @method pick
	         * @param fun {Function} 返回求交结果的回调函数 fun的参数{x:, y:, pickResult:}
	         * @return {Boolean} 拾取请求是否成功发出
	         */
	        value: function pick(fun) {
	            return this.map._sceneSet.pick(fun);
	        }

	        /**
	         * 场景求交
	         * @param fun {Function} 返回求交结果的回调函数 fun的参数{parentId,elementId}
	         */

	    }, {
	        key: 'pickElement',
	        value: function pickElement(fun) {
	            return this.map._sceneSet.pickElement(fun);
	        }

	        /**
	         * 获取默认属性
	         * @method getDefaultData
	         * @param typeName {String}
	         * @return {Object}
	         */

	    }, {
	        key: 'getDefaultData',
	        value: function getDefaultData(typeName) {
	            return _DefaultProperties2.default.getDefaultProperties(typeName);
	        }

	        /**
	         * 获取默认编辑对象
	         * @method getDefaultNode
	         * @param typeName {String}
	         * @return {Object}
	         */

	    }, {
	        key: 'getDefaultNode',
	        value: function getDefaultNode(typeName) {
	            return _DefaultProperties2.default.getDefaultNode(typeName);
	        }

	        /**
	         * 恢复编辑对象列表
	         * @method resetDefaultNode
	         */

	    }, {
	        key: 'resetDefaultNode',
	        value: function resetDefaultNode() {
	            _DefaultProperties2.default.resetDefaultNode();
	        }

	        /**
	         * 设置内置插件设置为空时清除当前工具
	         * @method selectCurrentBuiltInTool
	         * @param toolName {String}
	         */

	    }, {
	        key: 'setCurrentBuiltInTool',
	        value: function setCurrentBuiltInTool(toolName) {
	            if (toolName === this._currentBuiltInToolName) return;

	            var currentTool = this._builtInTools.get(toolName);
	            var oldTool = this._builtInTools.get(this._currentBuiltInToolName);
	            if (oldTool) oldTool._remove();
	            if (currentTool) {
	                currentTool._init();
	                this._currentBuiltInToolName = toolName;
	            } else {
	                this._currentBuiltInToolName = '';
	            }
	            return currentTool;
	        }

	        /**
	         * 根据插件名称获取内置插件
	         * @method getBuiltInTool
	         * @param toolName {String}
	         * @return {GV.BuiltInTool}
	         */

	    }, {
	        key: 'getBuiltInTool',
	        value: function getBuiltInTool(toolName) {
	            if (!this._builtInTools) return;
	            return this._builtInTools.get(toolName);
	        }

	        /**
	         * 获取当前使用插件
	         * @method getCurrentBuiltInTool
	         * @return {GV.BuiltInTool}
	         */

	    }, {
	        key: 'getCurrentBuiltInTool',
	        value: function getCurrentBuiltInTool() {
	            return this.getBuiltInTool(this._currentBuiltInToolName);
	        }

	        /**
	          * 设置编辑场景
	          * @method setEditScene
	          * @param {GV.Scene}
	          */

	    }, {
	        key: 'setEditScene',
	        value: function setEditScene(editScene) {
	            this.map._sceneSet.setEditScene(editScene);
	        }

	        /**
	         * 获取编辑场景
	         * @method getEditScene
	         * @param sceneType 
	         * @return GV.Scene
	         */

	    }, {
	        key: 'getEditScene',
	        value: function getEditScene(sceneType) {
	            return this.map._sceneSet.getEditScene(sceneType);
	        }

	        /**
	         * 设置编辑节点
	         * @method setEditNode
	         * @param {GV.Node}
	         */

	    }, {
	        key: 'setEditNode',
	        value: function setEditNode(eidtNode) {
	            this.map._sceneSet.setEditNode(eidtNode);
	        }

	        /**
	         *获得当前编辑节点
	         *@method getEditNode
	         *@return {GV.Node} 
	         */

	    }, {
	        key: 'getEditNode',
	        value: function getEditNode() {
	            return this.map._sceneSet.getEditNode();
	        }

	        /**
	         * 设置编辑节点集合
	         * @method setEditNodes
	         * @param {Array<GV.Node>}
	         */

	    }, {
	        key: 'setEditNodes',
	        value: function setEditNodes(editNodes) {
	            this.map._sceneSet.setEditNodes(editNodes);
	        }

	        /**
	         *获得当前编辑节点集合
	         *@method getEditNodes
	         *@return Array<GV.Node> 
	         */

	    }, {
	        key: 'getEditNodes',
	        value: function getEditNodes() {
	            return this.map._sceneSet.getEditNodes();
	        }

	        /**
	         * 添加专题场景
	         * @method addScene
	         * @param scene {GV.Scene} 专题场景
	         */

	    }, {
	        key: 'addScene',
	        value: function addScene(scene) {
	            if (scene instanceof _Scene2.default) {
	                this.map._sceneSet.add(scene);
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'scene', 'GV.Scene'));
	            }
	        }

	        /**
	         * 删除专题场景
	         * @method removeScene
	         * @param scene {GV.Scene}
	         */

	    }, {
	        key: 'removeScene',
	        value: function removeScene(scene) {
	            this.map._sceneSet.remove(scene);
	        }

	        /**
	         * 清除所有场景
	         * @method clearScenes
	         */

	    }, {
	        key: 'clearScenes',
	        value: function clearScenes() {
	            this.map._sceneSet.clear();
	        }

	        /**
	         * 获得所有场景
	         * @method getScenes
	         * @return {Map}
	         */

	    }, {
	        key: 'getScenes',
	        value: function getScenes() {
	            return this.map._sceneSet._scenes;
	        }

	        /**
	         * 场景的个数
	         * @method scenesCount
	         * @return {int} 个数
	         */

	    }, {
	        key: 'scenesCount',
	        value: function scenesCount() {
	            return this.map._sceneSet.count();
	        }

	        /**
	         * 根据id得到场景
	         * @method getSceneById
	         * @param id {String}
	         * @return scene {GV.Scene}
	         */

	    }, {
	        key: 'getSceneById',
	        value: function getSceneById(id) {
	            return this.map._sceneSet.getSceneById(id);
	        }

	        /**
	         * 根据ID删除场景
	         * @method removeSceneByID
	         * @param id {String} 
	         * @private
	         */

	    }, {
	        key: 'removeSceneById',
	        value: function removeSceneById(id) {
	            return this.map._sceneSet.remove(id);
	        }

	        /**
	         * 根据索引得到场景
	         * @method getSceneByIndex
	         * @param index {int}
	         * @return GV.Scene
	         */

	    }, {
	        key: 'getSceneByIndex',
	        value: function getSceneByIndex(index) {
	            return this.map._sceneSet.getSceneByIndex(index);
	        }

	        /**
	         * 根据索引删除场景
	         * @method removeSceneByIndex
	         * @param index {int} 
	         * @private
	         */

	    }, {
	        key: 'removeSceneByIndex',
	        value: function removeSceneByIndex(index) {
	            return this.map._sceneSet.removeSceneByIndex(index);
	        }

	        /**
	         * 根据名称得到场景
	         * @method getSceneByName
	         * @param name {String}
	         * @return scene 专题场景
	         * @private
	         */

	    }, {
	        key: 'getSceneByName',
	        value: function getSceneByName(name) {
	            return this.map._sceneSet.getSceneByName(name);
	        }

	        /**
	         * 根据名称删除场景
	         * @method removeSceneByName
	         * @param name {String} 
	         * @private
	         */

	    }, {
	        key: 'removeSceneByName',
	        value: function removeSceneByName(name) {
	            return this.map._sceneSet.removeSceneByName(name);
	        }

	        /**
	         * 根据id得到实体节点
	         * @method getNodeById
	         * @param id {String}
	         */

	    }, {
	        key: 'getNodeById',
	        value: function getNodeById(id) {
	            return this.map._sceneSet.getNodeById(id);
	        }

	        /**
	         * 根据name得到实体节点
	         * @method getNodeByName
	         * @param name {String}
	         */

	    }, {
	        key: 'getNodeByName',
	        value: function getNodeByName(name) {
	            return this.map._sceneSet.getNodeByName(name);
	        }

	        /**
	         * 导出全部标绘数据和局部标绘为json对象
	         * @method scenesToJson
	         * @param scenes {Array}
	         * @return {Object}
	         */

	    }, {
	        key: 'scenesToJson',
	        value: function scenesToJson(scenes) {
	            return this.map._sceneSet.scenesToJson(scenes);
	        }

	        /**
	         * 根据json数据读取专题场景
	         * @method jsonToScenes
	         * @param json {Object} json字符串
	         * @return {Array} 添加的scenes的数组
	         */

	    }, {
	        key: 'jsonToScenes',
	        value: function jsonToScenes(json) {
	            return this.map._sceneSet.addSceneFromJson(json);
	        }
	    }, {
	        key: 'saveFrameImage',

	        /**
	         * 保存当前视口下的图像到指定文件
	         * @method saveFrameImage
	         * @param imageinfo{url:, w:, h:} 图片的路径,宽度，高度
	         * @param imageinfo.url {String} 图片的路径(暂时只支持本地路径)
	         * @param imageinfo.w {Number} 图片宽度
	         * @param imageinfo.h {Number} 图片高度
	         */
	        value: function saveFrameImage(imageInfo) {
	            this.map.saveFrameImage(imageInfo);
	        }

	        /**
	         * 获取当前视口下的图像的base64格式字符串
	         * @method getFramImageBase64
	         * @param imageinfo{w:, h:} 宽度，高度
	         * @param imageinfo.w {Number} 图片宽度
	         * @param imageinfo.h {Number} 图片高度
	         * @param fun 回调函数返回base64字符串
	         */

	    }, {
	        key: 'getFrameImageBase64',
	        value: function getFrameImageBase64(info, fun) {
	            this.map.getFrameImageBase64(info, fun);
	        }

	        /**
	         * 通过传入的事件类型 得到容器该有的事件类型
	         * @param type
	         * @return {{type: *, mouse: *}}
	         * @private
	         */

	    }, {
	        key: '_getContainerTypeByType',
	        value: function _getContainerTypeByType(type) {
	            var contaierEventType = void 0;
	            var mouseButton = void 0;
	            switch (type) {
	                case _MessageSet2.default.Map.listen.mouseMove:
	                    contaierEventType = 'mousemove';
	                    break;
	                case _MessageSet2.default.Map.listen.mouseClick:
	                    contaierEventType = 'mouseup';
	                    mouseButton = 0;
	                    break;
	                case _MessageSet2.default.Map.listen.mouseRightClick:
	                    contaierEventType = 'mouseup';
	                    mouseButton = 2;
	                    break;
	                default:
	                    break;
	            }
	            return {
	                type: contaierEventType,
	                mouse: mouseButton
	            };
	        }

	        /**
	         * 通过容器该有的事件类型 获取传入的事件类型
	         * @param event
	         * @return {*}
	         * @private
	         */

	    }, {
	        key: '_getTypeByContaienrEvent',
	        value: function _getTypeByContaienrEvent(event) {
	            var type = void 0;
	            if (event.type === 'mouseup') {
	                if (event.button === 0) {
	                    type = _MessageSet2.default.Map.listen.mouseClick;
	                } else if (event.button === 2) {
	                    type = _MessageSet2.default.Map.listen.mouseRightClick;
	                }
	            } else if (event.type === 'mousemove') {
	                type = _MessageSet2.default.Map.listen.mouseMove;
	            }
	            return type;
	        }
	    }, {
	        key: '_on',
	        value: function _on(type, fn, context) {
	            var _this3 = this;

	            var _event = this._getContainerTypeByType(type);
	            if (_event.type) {

	                var tempFun = function tempFun(event) {
	                    var t = _this3._getTypeByContaienrEvent(event);
	                    if (t === type) {
	                        fn.call(context || _this3, _this3.location);
	                    }
	                };
	                fn._fn = tempFun;
	                this._container.bind(_event.type, tempFun);
	            }
	            _get(GeoCanvas.prototype.__proto__ || Object.getPrototypeOf(GeoCanvas.prototype), '_on', this).call(this, type, fn, context || this);
	        }
	    }, {
	        key: '_off',
	        value: function _off(type, fn, context) {
	            var _event = this._getContainerTypeByType(type);
	            if (_event.type) {
	                this._container.unbind(_event.type, fn ? fn._fn : null);
	            }
	            _get(GeoCanvas.prototype.__proto__ || Object.getPrototypeOf(GeoCanvas.prototype), '_off', this).call(this, type, fn, context || this);
	        }
	    }, {
	        key: '_initPluginManager',
	        value: function _initPluginManager(plugins) {
	            this._pluginManager = new _PluginManager2.default(this, plugins);
	        }

	        /**
	         * 插件相关属性：插件中心设置
	         * @propperty plugincenter
	         * @type {string}
	         */

	    }, {
	        key: 'initPluginCenter',

	        /**
	         * 插件相关属性：获取插件中心插件列表
	         * @method initPluginCenter
	         * @param {string} url 插件中心url
	         */
	        value: function initPluginCenter(url) {
	            if (this._pluginManager) this._pluginManager._initCenter(url);
	        }

	        /**
	         * 插件相关操作接口 **[添加插件方法]**
	         * @method  addPlugin
	         * @param  {GV.Plugin|Object|string} plugin  要添加的插件或者插件中心中的插件名称或者自己定义插件配置
	         * @return {GV.Plugin}      返回插件
	         */

	    }, {
	        key: 'addPlugin',
	        value: function addPlugin(plugin) {
	            if (this._pluginViewer) return this._pluginViewer.addPlugin(plugin);else if (this._pluginManager) return this._pluginManager.addPlugin(plugin);
	            return undefined;
	        }

	        /**
	         * 插件相关操作接口 **[移除插件方法]**
	         * @method  removePlugin
	         * @param  plugin {GV.Plugin|string} 插件名称或者插件信息
	         */

	    }, {
	        key: 'removePlugin',
	        value: function removePlugin(plugin) {
	            if (this._pluginViewer) return this._pluginViewer.removePlugin(plugin);else if (this._pluginManager) this._pluginManager.removePlugin(plugin);
	            return undefined;
	        }

	        /**
	         * 插件相关操作接口 **[使用某个挂件方法]**
	         * @method  usingWidget
	         * @param widget {GV.Widget|string} 挂件名称或者挂件信息
	         * @return {GV.Widget} 返回挂件
	         */

	    }, {
	        key: 'usingWidget',
	        value: function usingWidget(widget) {
	            if (this._pluginViewer) return this._pluginViewer.usingWidget(widget);else if (this._pluginManager) return this._pluginManager.usingWidget(widget);
	            return undefined;
	        }

	        /**
	         * 插件相关操作接口 **[不使用某个挂件方法]**
	         * @method  unusingWidget
	         * @param widget {GV.Widget|string} 挂件名称或者挂件信息
	         */

	    }, {
	        key: 'unusingWidget',
	        value: function unusingWidget(widget) {
	            if (this._pluginViewer) return this._pluginViewer.unusingWidget(widget);else if (this._pluginManager) this._pluginManager.unusingWidget(widget);
	            return undefined;
	        }

	        /**
	         * 插件相关操作接口 **[设置当前工具]**
	         * @method  setCurrentTool
	         * @param tool {GV.Tool|string} 工具名称或者工具信息(当参数为空时关闭所有工具)
	         * @return {GV.Tool} 返回工具
	         */

	    }, {
	        key: 'setCurrentTool',
	        value: function setCurrentTool(tool) {
	            if (this._pluginViewer) {
	                return this._pluginViewer.setCurrentTool(tool);
	            } else if (this._pluginManager) {
	                this._pluginManager.currentTool = tool;
	                return this._pluginManager.currentTool;
	            }
	            return undefined;
	        }

	        /**
	         * 插件相关操作接口 **[获取当前工具]**
	         * @method  getCurrentTool
	         * @return {GV.Tool} 返回工具
	         */

	    }, {
	        key: 'getCurrentTool',
	        value: function getCurrentTool() {
	            return this._pluginManager ? this._pluginManager.currentTool : undefined;
	        }

	        /**
	         * 插件相关操作接口 **[获取已加载插件]**
	         * @method getInstalledPlugins
	         * @return {Array<Plugin>} 返回插件数组
	         */

	    }, {
	        key: 'getInstalledPlugins',
	        value: function getInstalledPlugins() {
	            if (this._pluginManager) return this._pluginManager.getInstalledPlugins();
	            return undefined;
	        }

	        /**
	         * 插件相关操作接口 **[根据名称获取已加载插件]**
	         * @method getPluginByName
	         * @return {GV.Plugin} 返回插件
	         */

	    }, {
	        key: 'getPluginByName',
	        value: function getPluginByName(name) {
	            if (this._pluginManager) return this._pluginManager.getPluginByName(name);
	            return undefined;
	        }

	        /**
	         * 插件相关操作接口 **[预留TODO]**
	         */

	        /**
	         * 图层相关操作接口 **[添加影像图层]**
	         * @method addImageLayer
	         * @param {object} layer 参数详情如下：<br>
	         * @param layer.name {string} 图层名称
	         * @param layer.source {GV.LayerSource} 数据源
	         * @param layer.visible {boolean} 是否可见
	         * @param layer.nodataImage {string} 在没有数据时显示的图像
	         * @param layer.opacity {double} 设置图层的透明度，取值范围 0-1
	         * @param layer.minRange {double} 针对相机而言，设置可见的最小范围，如果距离相机的距离比此值还小，将不可见
	         * @param layer.maxRange {double} 设置可见的最大范围，要是超出此范围，不会绘制此瓦片
	         * @param layer.minLevel {int} 设置LOD最大可见度
	         * @param layer.maxLevel {int} 设置LOD最大可见度
	         * @param layer.minResolution {double} 设置绘制瓦片的最小分辨率
	         * @param layer.maxResolution {double} 设置绘制瓦片的最大分辨率
	         * @param layer.maxDataLevel {int} 设置本图层能够显示的数据源的最大层
	         * @param layer.shared {boolean} 将一个图层设置为shared,着色器可以使得其他所有图层使用该shared图层
	         * @param layer.sharedSampler {string} 对于共享图层，GLSL代码中能够使用的sampler的唯一名称
	         * @param layer.sharedMatrix {string} fffff
	         * @param layer.featherPixels {boolean} 被用来获得合适的融合当图层数据紧挨着没有重叠，
	         *          用featherAlphaRegions函数，bool值，是否减弱alpha区域
	         * @param layer.coverage {boolean} 表明这是一个范围图层，例如一个传达具体语义的离散值图层。范围图层禁止任何插值、滤波和压缩
	         * @param layer.minFilter {GV.INTERPOLATION} 设置OpenGL对该图层进行纹理最小值滤波
	         *          滤波方式包括NEAREST, LINEAR, NEAREST_MIPMAP_NEAREST,
	         *          NEAREST_MIPMIP_LINEAR, LINEAR_MIPMAP_NEAREST, LINEAR_MIPMAP_LINEAR
	         * @param layer.maxFilter {GV.INTERPOLATION} 设置OpenGL对该图层进行纹理最大值滤波
	         *          滤波方式包括NEAREST, LINEAR, NEAREST_MIPMAP_NEAREST,
	         *          NEAREST_MIPMIP_LINEAR, LINEAR_MIPMAP_NEAREST, LINEAR_MIPMAP_LINEAR
	         * @param layer.textureCompression {GV.ENUM} 设置压缩
	         *          “auto”：在GPU上压缩纹理; “none” ：禁止压缩; “fastdxt”：使用FastDXT 实时DXT压缩
	         * @param layer.proxy {GV.ProxyOption} 设置图层代理
	         * @param layer.colorFilters {GV.ColorFilter} 设置滤波库
	         * @param layer.transparent {boolean} 设置图层没有数据的地方是否可见
	         * @param layer.transparentColor {GV.Color} 设置瓦片边缘颜色过滤 'r g b a'
	         * @return {GV.ImageLayer} 返回影像图层
	         */

	    }, {
	        key: 'addImageLayer',
	        value: function addImageLayer(layer) {
	            return this.map.addImageLayer(layer);
	        }

	        /**
	         * 图层相关操作接口 **[添加地形图层]**
	         * @method addTerrainLayer
	         * @param {object} layer 参数详情如下：<br>
	         * @param layer.name {string} 图层名称
	         * @param layer.source {GV.LayerSource} 数据源
	         * @param layer.minLevel {int} 设置细节的最低能见度, 最小为0。
	         *          值越大则需要把视角拖得越高才能看见高程
	         * @param layer.maxLevel {int} 设置细节的最大能见度
	         * @param layer.minResolution {double} 设置绘制瓦片的最小分辨率
	         * @param layer.maxResolution {double} 设置绘制瓦片的最大分辨率
	         * @param layer.offset {boolean} 设置显示在该层的高度值是相对于偏移量的，而不是真正的地形高度。
	         * @param layer.nodataPolicy {string} 设置没有数据时采取的策略，默认是插值，“msl”将没有值的地方设置为海平面值
	         * @param layer.nodataValue {double} 设置无效值的标识
	         * @param layer.minValidValue {double} 设置无效值的下限,小于该值视为无效值
	         * @param layer.maxValidValue {double} 设置无效值的上限,大于该值视为无效值
	         * @param layer.enabled {boolean} 设置图层是否可用
	         * @return {GV.TerrainLayer} 返回地形图层
	         */

	    }, {
	        key: 'addTerrainLayer',
	        value: function addTerrainLayer(layer) {
	            return this.map.addTerrainLayer(layer);
	        }

	        /**
	         * 图层相关操作接口 **[添加矢量图层]**
	         * @method addVectorLayer
	         * @param {object} layer 参数详情如下：<br>
	         * @param layer.name {string} 图层名称
	         * @param layer.source {GV.LayerSource} 数据源
	         * @param layer.enabled {boolean} 设置是否可用
	         * @param layer.visible {boolean} 设置是否可见
	         * @param layer.opacity {double} 设置图层透明度, 取值范围 0-1
	         * @return {GV.ModelLayer} 返回矢量图层
	         */

	    }, {
	        key: 'addVectorLayer',
	        value: function addVectorLayer(layer) {
	            return this.map.addVectorLayer(layer);
	        }

	        /**
	         * 图层相关操作接口 **[添加影像、矢量、地形图层]**
	         * @method addLayer
	         * @param {object} layer 
	         */

	    }, {
	        key: 'addLayer',
	        value: function addLayer(layer) {
	            return this.map.addLayer(layer);
	        }

	        /**
	         * 图层相关操作接口 **[获取基础图层]**
	         * @method getBaseLayer
	         * @return {GV.BaseImageLayer} 返回基础图层
	         */

	    }, {
	        key: 'getBaseLayer',
	        value: function getBaseLayer() {
	            return this.map.getBaseLayer();
	        }

	        /**
	         * 图层相关操作接口 **[获取所有图层，图层的index越大表明其优先级越高]**
	         * @method getLayers
	         * @return {Array<Layer>} 返回图层数组
	         */

	    }, {
	        key: 'getLayers',
	        value: function getLayers() {
	            return this.map.getLayers();
	        }

	        /**
	         * 图层相关操作接口 **[获取所有影像图层]**
	         * @method getImageLayers
	         * @return {Array<ImageLayer>} 返回影像图层数组
	         */

	    }, {
	        key: 'getImageLayers',
	        value: function getImageLayers() {
	            return this.map.getImageLayers();
	        }

	        /**
	         * 图层相关操作接口 **[获取所有地形图层]**
	         * @method getTerrainLayers
	         * @return {Array<TerrainLayer>} 返回地形图层数组
	         */

	    }, {
	        key: 'getTerrainLayers',
	        value: function getTerrainLayers() {
	            return this.map.getTerrainLayers();
	        }

	        /**
	         * 图层相关操作接口 **[获取所有矢量图层]**
	         * @method getVectorLayers
	         * @return {Array<VectorLayer>} 返回矢量图层数组
	         */

	    }, {
	        key: 'getVectorLayers',
	        value: function getVectorLayers() {
	            return this.map.getVectorLayers();
	        }

	        /**
	         * 图层相关操作接口 **[根据名称获取某一个图层]**
	         * @method getLayerByName
	         * @param name {string} 图层名称
	         * @return {GV.Layer}
	         */

	    }, {
	        key: 'getLayerByName',
	        value: function getLayerByName(name) {
	            return this.map.getLayerByName(name);
	        }

	        /**
	         * 图层相关操作接口 **[根据ID获取某一个图层]**
	         * @method getLayerById
	         * @param name {string} 图层名称
	         * @return {GV.Layer}
	         */

	    }, {
	        key: 'getLayerById',
	        value: function getLayerById(id) {
	            return this.map.getLayerById(id);
	        }

	        /**
	         * 图层相关操作接口 **[删除某一个图层]**
	         * @method removeLayer
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'removeLayer',
	        value: function removeLayer(layer) {
	            this.map.removeLayer(layer);
	        }

	        /**
	         * 图层相关操作接口 **[通过id删除某一个图层]**
	         * @method removeLayer
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'removeLayerById',
	        value: function removeLayerById(layer) {
	            this.map.removeLayerById(layer);
	        }

	        /**
	         * 图层相关操作接口 **[通过名称删除某一个图层]**
	         * @method removeLayer
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'removeLayerByName',
	        value: function removeLayerByName(layer) {
	            this.map.removeLayerByName(layer);
	        }

	        /**
	         * 图层相关操作接口 **[上移某一个图层]**
	         * @method raise
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'moveUp',
	        value: function moveUp(layer) {
	            this.map.moveUp(layer);
	        }

	        /**
	         * 图层相关操作接口 **[下移某一个图层]**
	         * @method lower
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'moveDown',
	        value: function moveDown(layer) {
	            this.map.moveDown(layer);
	        }

	        /**
	         * 图层相关操作接口 **[上移图层至顶端]**
	         * @method raisetoTop
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'moveTop',
	        value: function moveTop(layer) {
	            this.map.moveTop(layer);
	        }

	        /**
	         * 图层相关操作接口 **[下移图层至底端]**
	         * @method lowertoBottom
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'moveBottom',
	        value: function moveBottom(layer) {
	            this.map.moveBottom(layer);
	        }

	        /**
	         * 序列化相关接口 **[保存整个场景]**
	         * @method saveGVML
	         * @param type {String} 要保存的场景的数据格式（.xml或者.json）,取值范围为'XML'或者'JSON'
	         */

	    }, {
	        key: 'saveGVML',
	        value: function saveGVML() {
	            var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'XML';

	            return this.map.saveGVML(type);
	        }

	        /**
	         * 序列化相关接口 **[保存整个图层]**
	         * @method saveLayers
	         * @param type {String} 要保存的场景的数据格式（.xml或者.json）,取值范围为'XML'或者'JSON'
	         */

	    }, {
	        key: 'saveLayers',
	        value: function saveLayers() {
	            var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'XML';

	            return this.map.saveLayers(type);
	        }

	        /**
	         * 序列化相关接口 **[保存整个标绘]**
	         * @method saveScenes
	         * @param type {String} 要保存的场景的数据格式（.xml或者.json）,取值范围为'XML'或者'JSON'
	         */

	    }, {
	        key: 'saveScenes',
	        value: function saveScenes() {
	            var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'XML';

	            return this.map.saveScenes(type);
	        }

	        /**
	         * 序列化相关接口 **[解析整个图层]**
	         * @method parseLayers
	         * @param json {Object} 解析json文件，如果你是xml文件麻烦您先把xml转成json，我们在Util中提供了相关接口
	         */

	    }, {
	        key: 'parseLayers',
	        value: function parseLayers(json) {
	            this.map.parseLayers(json);
	        }

	        /**
	         * 序列化相关接口 **[解析整个标绘图层]**
	         * @method parseScenes
	         * @param json {Object} 解析json文件，如果你是xml文件麻烦您先把xml转成json，我们在Util中提供了相关接口
	         */

	    }, {
	        key: 'parseScenes',
	        value: function parseScenes(json) {
	            this.map.parseScenes(json);
	        }

	        /**
	         * 向c++发送鼠标键盘事件
	         * @param dom 获取该元素的事件
	         */

	    }, {
	        key: 'setListenerElement',
	        value: function setListenerElement(dom) {
	            this.map.setListenerElement(dom);
	        }

	        /**
	         * 终止获取外部元素的鼠标键盘事件
	         */

	    }, {
	        key: 'clearListenerElement',
	        value: function clearListenerElement() {
	            this.map.clearListenerElement();
	        }

	        /**
	         * 监听球的变化
	         * @method listen
	         * @param {GV.LISTENER} type 监听类型
	         * @param {function} callback 监听回调函数
	         */

	    }, {
	        key: 'listen',
	        value: function listen(type, callback) {
	            this.map.listen(type, callback);
	        }

	        /**
	         * 相机对象
	         * @property camera
	         */

	    }, {
	        key: 'onFrameStatInfo',

	        /**
	         * 打开帧率统计
	         * @param {Function} fun 
	         * @param fun(info) info.frame_rate 帧率
	         * @param fun(info) info.event_time 时间循环时间
	         * @param fun(info) info.update_time 更新回调时间
	         * @param fun(info) info.cull_time 裁剪时间
	         * @param fun(info) info.draw_time 绘制时间
	         * @param fun(info) info.gpu_time GPU绘制时间
	         * @param fun(info) info.postframe_time 绘制完成处理事件的时间
	         * @param fun(info) info.webgl_time webgl绘制时间
	         */
	        value: function onFrameStatInfo(fun) {
	            this.map.onFrameStatInfo(fun);
	        }

	        /**
	         * 取消监听帧率变化
	         * @method offFrameStatInfo
	         * @param fun
	         * @type {Function}
	         */

	    }, {
	        key: 'offFrameStatInfo',
	        value: function offFrameStatInfo(fun) {
	            this.map.offFrameStatInfo(fun);
	        }

	        /**
	         * 清除帧率监听
	         */

	    }, {
	        key: 'clearFrameStatInfo',
	        value: function clearFrameStatInfo() {
	            this.map.clearFrameStatInfo();
	        }
	    }, {
	        key: 'earthdiv',
	        get: function get() {
	            return this._earthdiv;
	        }

	        /**
	         * 地理画布父容器的div (jquery对象)
	         * @property container
	         */

	    }, {
	        key: 'container',
	        get: function get() {
	            return this._container;
	        }
	    }, {
	        key: 'userOptions',
	        get: function get() {
	            return this.map._userOptions;
	        }

	        /**
	         * @property cursorStyle 
	         * @default {mct: GV.CURSOR_STYLE.POINTER}
	         * @description <br>
	         * <pre>
	         *       地理画布鼠标样式设置
	         *       cursorStyle {mct：, url:, offsetx:, offsety:}
	         *       cursorStyle.mct {GV.CURSOR_STYLE} 显示模式
	         *       cursorStyle.url {String} 图片资源路径
	         *       cursorStyle.offsetx {int} 图片x方向偏移
	         *       cursorStyle.offsety {int} 图片y方向偏移
	         *      注意事项：
	         *          1：当设置url时mct无效
	         *          2：当只设置mct是offsetx,offsety无效
	         *          3：url指定的资源图片只能是32*32的png图片
	         *          4：offsetx与offsety的取值范围是0~31
	         * </pre>
	         */

	    }, {
	        key: 'cursorStyle',
	        set: function set(cursorStyle) {
	            this.map.cursorStyle = cursorStyle;
	        },
	        get: function get() {
	            return this.map.cursorStyle;
	        }
	        /**
	         * 当前显示模式
	         * @property currentMode
	         * @type {GV.VIEWMODE}
	         * @default GV.VIEWMODE.VIEWMODE_3D //三维
	         */

	    }, {
	        key: 'currentMode',
	        set: function set(currentMode) {
	            this.map.currentMode = currentMode;
	        },
	        get: function get() {
	            return this.map.currentMode;
	        }
	    }, {
	        key: 'supportedMode',
	        get: function get() {
	            return this.map.supportedMode;
	        }

	        /**
	         * 获得版本
	         * @property version
	         * @final
	         * @default 2.0
	         * @type {String}
	         */

	    }, {
	        key: 'version',
	        get: function get() {
	            return this.map.version;
	        }

	        /**
	         * 动画管理工具
	         * @property animationHelper
	         * @readonly
	         * @type {GV.AnimationManager}
	         */

	    }, {
	        key: 'animationHelper',
	        get: function get() {
	            return this.map._animations;
	        }
	    }, {
	        key: 'messageListener',
	        get: function get() {
	            return this.map.messageListener;
	        }
	    }, {
	        key: 'viewer',
	        get: function get() {
	            return this.map;
	        }

	        /**
	         * 当前鼠标的经纬度
	         * @property location
	         */

	    }, {
	        key: 'location',
	        get: function get() {
	            return this.map.location;
	        }

	        /**
	         * 获得math对象，该对象提供一些常用的算法接口
	         * @property math
	         */

	    }, {
	        key: 'math',
	        get: function get() {
	            return this.map._math;
	        }
	    }, {
	        key: 'plugincenter',
	        set: function set(url) {
	            if (_Config2.default.needCenter !== false && _Config2.default.needCenter !== 'false') this._plugincenter = url;
	        },
	        get: function get() {
	            return this._plugincenter;
	        }

	        /**
	         * GVML设置，主要包括gvml的dll插件配置，以及gvml的center的配置
	         * @propperty config
	         * @type {string}
	         */

	    }, {
	        key: 'config',
	        set: function set(obj) {
	            this._config = obj;
	        },
	        get: function get() {
	            return this._config;
	        }

	        /**
	         * 插件相关属性: 自定义插件控制面板
	         * @property pluginViewer
	         * @type {GV.PluginViewer}
	         * @default false
	         */

	    }, {
	        key: 'pluginViewer',
	        set: function set(center) {
	            this._pluginViewer = center;
	        },
	        get: function get() {
	            return this._pluginViewer;
	        }
	    }, {
	        key: 'camera',
	        get: function get() {
	            return this.map.camera;
	        }

	        /**
	         * 获取时间对象
	         * @property clock
	         */

	    }, {
	        key: 'clock',
	        get: function get() {
	            return this.map.clock;
	        }

	        /**
	         * 地理画布配置集合
	         * @property mapOptions 
	         */

	    }, {
	        key: 'mapOptions',
	        get: function get() {
	            return this.map.mapOptions;
	        }
	    }]);

	    return GeoCanvas;
	}(_Event3.default);

	exports.default = GeoCanvas;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "GeoCanvas.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：Map.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2016-03-22 14:36:00
	 * 用途：地球实体类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _ENUM = __webpack_require__(14);

	var _ENUM2 = _interopRequireDefault(_ENUM);

	var _LayerSet = __webpack_require__(15);

	var _LayerSet2 = _interopRequireDefault(_LayerSet);

	var _ToolBox = __webpack_require__(48);

	var _ToolBox2 = _interopRequireDefault(_ToolBox);

	var _WidgetBox = __webpack_require__(53);

	var _WidgetBox2 = _interopRequireDefault(_WidgetBox);

	var _MessageManager = __webpack_require__(55);

	var _MessageManager2 = _interopRequireDefault(_MessageManager);

	var _SceneSet = __webpack_require__(58);

	var _SceneSet2 = _interopRequireDefault(_SceneSet);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _LISTENER = __webpack_require__(103);

	var _LISTENER2 = _interopRequireDefault(_LISTENER);

	var _Camera = __webpack_require__(104);

	var _Camera2 = _interopRequireDefault(_Camera);

	var _Math = __webpack_require__(105);

	var _Math2 = _interopRequireDefault(_Math);

	var _Config = __webpack_require__(52);

	var _Config2 = _interopRequireDefault(_Config);

	var _MapOptions = __webpack_require__(106);

	var _MapOptions2 = _interopRequireDefault(_MapOptions);

	var _Clock = __webpack_require__(118);

	var _Clock2 = _interopRequireDefault(_Clock);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Earth = function (_Class) {
	    _inherits(Earth, _Class);

	    function Earth(params, embed, geocanvas) {
	        _classCallCheck(this, Earth);

	        var _this = _possibleConstructorReturn(this, (Earth.__proto__ || Object.getPrototypeOf(Earth)).call(this));

	        _this.parent = geocanvas;
	        _this._complete = false;
	        _this._init(params, embed);

	        _this._frameStatInfoCallBack = [];
	        return _this;
	    }

	    /**
	     * gvml版本号
	     */

	    _createClass(Earth, [{
	        key: '_init',

	        /**
	         * 默认初始化，通过xml生成或者用户自己写的json
	         * @param params json默认配置
	         * @param embed c++球
	         */
	        value: function _init(params, embed) {
	            var _this2 = this;

	            this._messageManager = new _MessageManager2.default(embed);
	            this._uuid = 'map';
	            var message = {};
	            //参数容错
	            params = params || {};
	            params.map = params.map || {};
	            params.map.options = params.map.options || {};
	            message.layers = params.map.layers || {};
	            message.scenes = params.map.scenes || {};
	            message.camera = params.map.camera || {};
	            message.math = params.math || {};
	            // message.clock = params.map.clock || {};
	            message.plugins = params.plugins || {};
	            message.toolbox = {};
	            message.widgetbox = {};

	            //map属性初始化
	            this.name = params.map.name;
	            this.supportedMode = params.map.supported_mode || params.map.supportedMode;
	            this.currentMode = params.map.current_mode || params.map.currentMode;
	            this._hasSwitchAnimation = params.map.has_switch_animation || params.map.hasSwitchAnimation;;

	            //初始化时间对象
	            message.clock = params.map.current_clock || params.map.currentClock || {};
	            // this._currentClock = new Clock(this._clockParam, this);
	            //初始化地球配置对象
	            this._mapOptions = new _MapOptions2.default(params.map.options);

	            this.bindCallback(function (msg) {
	                switch (msg.para1) {
	                    case _MessageSet2.default.Map.listen.finishCreateMap:
	                        // console.debug('map', msg);
	                        var uuids = msg.para2.map;
	                        message.layers.uuid = uuids.layerset;
	                        message.scenes.uuid = uuids.sceneset;
	                        message.camera.uuid = uuids.camera;
	                        message.toolbox.uuid = uuids.toolbox;
	                        message.widgetbox.uuid = uuids.widgetbox;
	                        message.math.uuid = uuids.jsmath;
	                        message.clock.uuid = uuids.jsclock;

	                        //options uuid reset
	                        _this2._mapOptions._uuid = uuids.options;
	                        _this2._mapOptions.setMap(_this2);

	                        //接受和gv.conf同目录下的userOptions.conf文件的内容用于用户这只自己的配置数据
	                        _this2._userOptions = uuids.useroptions;

	                        // toolbox
	                        _this2._toolBox = new _ToolBox2.default(_this2, message.toolbox);
	                        // widgetbox
	                        _this2._widgetBox = new _WidgetBox2.default(_this2, message.widgetbox);

	                        var dll = '';
	                        if (_Config2.default.DllPluginUrl) {
	                            for (var key in _Config2.default.DllPluginUrl) {
	                                dll += _Config2.default.DllPluginUrl[key] + ',';
	                            }
	                        }
	                        // 相机
	                        _this2._camera = new _Camera2.default(_this2, message.camera);
	                        _this2.postMessage('enviro', _MessageSet2.default.Enviro.loadPlugin, dll);
	                        break;
	                    case _MessageSet2.default.Enviro.loadPlugin:
	                        if (msg.para2) {
	                            // 图层管理
	                            _this2._layerSet = new _LayerSet2.default(_this2, message.layers);
	                            // 场景管理
	                            _this2._sceneSet = new _SceneSet2.default(_this2, message.scenes);

	                            //数学运算
	                            _this2._math = new _Math2.default(_this2, message.math);
	                            _this2._currentClock = new _Clock2.default(_this2, message.clock);

	                            _this2.parent._initPluginManager(message.plugins);

	                            _this2._complete = true;
	                        }
	                        break;

	                    case _MessageSet2.default.Map.listen.getFrameImageBase64:
	                        _this2._getFrameImageBase64(msg.para2);
	                        break;

	                    case _MessageSet2.default.Map.listen.location:
	                        _this2._setLocation(msg.para2);
	                        break;
	                    case _MessageSet2.default.Map.listen.frameStatInfo:
	                        if (_this2._frameStatInfoCallBack.length > 0) {
	                            _this2._frameStatInfoCallBack.forEach(function (fun) {
	                                fun(msg.para2.info);
	                            });
	                        }
	                        break;
	                    default:
	                        _this2._otherCallback(msg.para1, msg.para2);
	                }
	            });
	            this.postMessage(_MessageSet2.default.Map.post.createMap, '', this.toMessageStr(params));
	        }
	    }, {
	        key: '_otherCallback',
	        value: function _otherCallback(type, para) {
	            if (this._otherCallbacks instanceof Array) {
	                this._otherCallbacks.forEach(function (callback) {
	                    if (Util.$.isFunction(callback)) {
	                        callback(type, para);
	                    }
	                });
	            }
	        }

	        /*
	         * addOtherCallback
	         */

	    }, {
	        key: 'addOtherCallback',
	        value: function addOtherCallback(fun) {
	            if (!this._otherCallbacks) this._otherCallbacks = [];
	            this._otherCallbacks.push(fun);
	        }
	    }, {
	        key: '_setLocation',
	        value: function _setLocation(info) {
	            if (info instanceof Array) {
	                if (info.length === 3) {
	                    this._location = {
	                        lon: info[0],
	                        lat: info[1],
	                        alt: info[2]
	                    };
	                } else if (info.length === 11) {
	                    this._location = {
	                        lon: info[0],
	                        lat: info[1],
	                        alt: info[2],
	                        heightAngle: info[3],
	                        azimuthAngle: info[4],
	                        zenithAngle: info[5],
	                        localtime: info[6],
	                        lamda: info[7],
	                        beta: info[8],
	                        dist: info[9],
	                        moonAngle: info[10]
	                    };
	                } else {
	                    this._location = undefined;
	                }
	            } else if (info instanceof Object && info.location !== undefined) {
	                this._location = info.location;
	            } else {
	                this._location = undefined;
	            }
	        }

	        /**
	         * 当前鼠标对应的经纬度
	         * @property location
	         */

	    }, {
	        key: 'saveFrameImage',

	        /**
	         * 保存当前视口下的图像
	         * @param imageinfo{url:, w:, h:} 图片的路径,宽度，高度
	         */
	        value: function saveFrameImage(imageinfo) {
	            var imageUrl = "../../../saveFrameImage.jpg";
	            var screenW = this.parent.container[0].clientWidth;
	            var screenH = this.parent.container[0].clientHeight;
	            if (Util.isObject(imageinfo)) {
	                if (imageinfo.url && Util.isAddUnit(imageinfo.w) && Util.isAddUnit(imageinfo.h)) {
	                    imageUrl = imageinfo.url;
	                    if (Util.filterUnit(imageinfo.w) > 0 && Util.filterUnit(imageinfo.w) <= screenW) screenW = imageinfo.w;
	                    if (Util.filterUnit(imageinfo.h) > 0 && Util.filterUnit(imageinfo.h) <= screenH) screenH = imageinfo.h;else console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CUSTOM, 'saveFrameImage', '图片宽度w，高度h须大于0'));
	                } else console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CUSTOM, 'saveFrameImage', '参数须为包含url、w、h的object对象，{url:, w:, h:}! 现已默认存储当前窗口为saveFrameImage.jpg'));
	            } else console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CUSTOM, 'saveFrameImage', '参数须为包含url、w、h的object对象，{url:, w:, h:}'));

	            this.postMessage('map', _MessageSet2.default.Map.post.saveFrameImage, {
	                url: imageUrl,
	                s: screenW,
	                t: screenH
	            });
	        }

	        /**
	         * 保存当前视口下的图像为base64
	         * @param imageinfo{w:, h:} 图片的路径,宽度，高度
	         */

	    }, {
	        key: 'getFrameImageBase64',
	        value: function getFrameImageBase64(imageinfo, fun) {
	            if (!imageinfo) return;
	            if (Util.isAddUnit(imageinfo.w) && Util.isAddUnit(imageinfo.h)) {
	                if (Util.filterUnit(imageinfo.w) <= 0 || Util.filterUnit(imageinfo.h) <= 0) {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CUSTOM, 'getFrameImageBase64', '图片宽度w，高度h须大于0'));
	                } else {
	                    if (!this._frameImageBase64) this._frameImageBase64 = new Map();
	                    var id = Util.createGuid();
	                    this._frameImageBase64.set(id, fun);
	                    this.postMessage('map', _MessageSet2.default.Map.post.getFrameImageBase64, {
	                        id: id,
	                        s: imageinfo.w,
	                        t: imageinfo.h
	                    });
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CUSTOM, 'getFrameImageBase64', '图片宽度w，高度h取值须为，如45或"45"或"45px"'));
	            }
	        }
	    }, {
	        key: '_getFrameImageBase64',
	        value: function _getFrameImageBase64(info) {
	            if (!info || !this._frameImageBase64) return;
	            info = info.frame_image;
	            if (!info || !info.id || !info.data) return;

	            var fun = this._frameImageBase64.get(info.id);
	            if (!fun) return;
	            var data = 'data:image/png;base64,' + info.data;
	            fun(data);
	            this._frameImageBase64.delete(info.id);
	        }

	        /**
	         * 保存gvml
	         */

	    }, {
	        key: 'saveGvml',
	        value: function saveGvml() {
	            this.postMessage('map', _MessageSet2.default.Map.post.saveGvml);
	        }
	    }, {
	        key: 'listen',
	        value: function listen(type, callback) {
	            var _this3 = this;

	            if (!this._messageManager._listenerCallback) {
	                this._messageManager._listenerCallback = [];
	            }
	            // this._listeners[type] = callback;
	            this._messageManager._listenerCallback[type] = function (opt) {
	                var info = void 0;
	                var json = Util.xmlToJson(Util.strToXml(opt.para1));
	                var key = void 0;for (key in json) {
	                    break;
	                }switch (opt.command) {
	                    case _LISTENER2.default.ADDLAYER:
	                        var layer = _this3._layerSet.getLayerByName(json[key].name);
	                        info = layer;
	                        break;
	                    case _LISTENER2.default.ADDNODE:
	                        var scene = _this3._sceneSet._scenes.get(opt.object);
	                        var node = scene._nodes.get(json[key].uuid);
	                        info = { scene: scene, node: node };
	                        break;
	                    case _LISTENER2.default.ADDSCENE:
	                        info = json;
	                        break;
	                    default:
	                        break;
	                }
	                callback(info);
	            };
	        }
	    }, {
	        key: 'clearListenerElement',
	        value: function clearListenerElement() {
	            this._messageManager.postMessage('input_event_check', '', 'false');
	        }
	    }, {
	        key: 'setListenerElement',
	        value: function setListenerElement(dom) {
	            if (dom) {
	                dom.addEventListener('mousedown', this.onMousedown.bind(this), false);
	                dom.addEventListener('mouseup', this.onMouseUp.bind(this), false);
	                dom.addEventListener('mousemove', this.onMouseMove.bind(this), false);
	                dom.addEventListener('keydown', this.onKeyDown.bind(this), false);
	                dom.addEventListener('keyup', this.onkeyUp.bind(this), false);
	                dom.addEventListener('wheel', this.onMousewheel.bind(this), false);
	                this._messageManager.postMessage('input_event_check', '', 'true');
	            }
	        }
	    }, {
	        key: 'onMousedown',
	        value: function onMousedown(event) {
	            var outEvent = {};
	            outEvent.type = 0;
	            this.mapEventListener(event, outEvent);
	        }
	    }, {
	        key: 'onMousewheel',
	        value: function onMousewheel(event) {
	            var outEvent = {};
	            outEvent.type = 5;
	            this.mapEventListener(event, outEvent);
	        }
	    }, {
	        key: 'onMouseUp',
	        value: function onMouseUp(event) {
	            var outEvent = {};
	            outEvent.type = 1;
	            this.mapEventListener(event, outEvent);
	        }
	    }, {
	        key: 'onMouseMove',
	        value: function onMouseMove(event) {
	            var outEvent = {};
	            outEvent.type = 2;
	            this.mapEventListener(event, outEvent);
	        }
	    }, {
	        key: 'onKeyDown',
	        value: function onKeyDown(event) {
	            var outEvent = {};
	            outEvent.type = 7;
	            this.mapEventListener(event, outEvent);
	        }
	    }, {
	        key: 'onkeyUp',
	        value: function onkeyUp(event) {
	            var outEvent = {};
	            outEvent.type = 8;
	            this.mapEventListener(event, outEvent);
	        }
	    }, {
	        key: 'mapEventListener',
	        value: function mapEventListener(event, outEvent) {
	            outEvent.button = event.button || -1;
	            outEvent.x = event.clientX || 0;
	            outEvent.y = event.clientY || 0;
	            outEvent.clicks = event.detail || -1;
	            outEvent.keyCode = event.keyCode || 0;
	            outEvent.deltaX = event.wheelDeltaX || 0;
	            outEvent.deltaY = event.wheelDeltaY || 0;

	            outEvent.modify = 0;
	            if (event.shiftKey) outEvent.modify += 1;
	            if (event.ctrlKey) outEvent.modify += 2;
	            if (event.altKey) outEvent.modify += 4;
	            this._messageManager.postMessage('input_event', '', outEvent);
	        }

	        /**
	         * 设置相机
	         * @param camera
	         */

	    }, {
	        key: 'onFrameStatInfo',

	        /**
	         * 打开帧率统计
	         * @param {Function} fun 
	         * @param fun(info) info.frame_rate 帧率
	         * @param fun(info) info.event_time 时间循环时间
	         * @param fun(info) info.update_time 更新回调时间
	         * @param fun(info) info.cull_time 裁剪时间
	         * @param fun(info) info.draw_time 绘制时间
	         * @param fun(info) info.gpu_time GPU绘制时间
	         * @param fun(info) info.postframe_time 绘制完成处理事件的时间
	         * @param fun(info) info.webgl_time webgl绘制时间
	         */
	        value: function onFrameStatInfo(fun) {
	            if (Util.$.isFunction(fun)) {
	                if (this._frameStatInfoCallBack.length === 0) {
	                    this.postMessage('Map', _MessageSet2.default.Map.listen.frameStatInfo, true);
	                }
	                this._frameStatInfoCallBack.push(fun);
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'Map', 'openFrameStatInfo', 'Function'));
	            }
	        }

	        /**
	         * 取消监听帧率变化
	         * @method offFrameStatInfo
	         * @param fun
	         * @type {Function}
	         */

	    }, {
	        key: 'offFrameStatInfo',
	        value: function offFrameStatInfo(fun) {
	            if (!fun) return;
	            var i = this._frameStatInfoCallBack.indexOf(fun);
	            if (i >= 0) {
	                this._frameStatInfoCallBack.splice(i, 1);
	            }
	            if (this._frameStatInfoCallBack.length === 0) {
	                this.postMessage('Map', _MessageSet2.default.Map.listen.frameStatInfo, false);
	            }
	        }

	        /**
	         * 清除帧率监听
	         */

	    }, {
	        key: 'clearFrameStatInfo',
	        value: function clearFrameStatInfo() {
	            this._frameStatInfoCallBack = [];
	            this.postMessage('Map', _MessageSet2.default.Map.listen.frameStatInfo, false);
	        }

	        /*
	         * 设置地图时间，如果未设置，使用程序的统一时间
	         * @method setCurrentClock
	         * @param {string|object} clock参数可为"2002-12-3 23:38:18"或{year:2002,month:12,day:3,hour:23,minute:38,second:18}
	         */

	    }, {
	        key: 'setCurrentClock',
	        value: function setCurrentClock(clock) {
	            this._currentClock.setClock(clock);
	        }
	        /** 
	         * 获取当前时间，如果未设置，使用程序的统一时间
	         * @method getCurrentClock
	         * @param {Function} fun 回调函数fun对时间信息进行处理
	         * @param {string} type  获取的时间信息类型，支持string和object类型
	         */

	    }, {
	        key: 'getCurrentClock',
	        value: function getCurrentClock(fun) {
	            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'object';

	            this._currentClock.getClock(fun, type);
	        }

	        /**
	         * 图层相关操作：获取所有图层信息
	         * @return {Object}
	         */

	    }, {
	        key: 'getLayers',
	        value: function getLayers() {
	            if (this._layerSet) {
	                return this._layerSet.getLayers();
	            }
	            return undefined;
	        }

	        /**
	         * 图层相关操作接口 **[添加影像、矢量、地形图层]**
	         * @method addLayer
	         * @param {object} layer 
	         */

	    }, {
	        key: 'addLayer',
	        value: function addLayer(layer) {
	            return this._layerSet.addLayer(layer);
	        }

	        /**
	         * 图层相关操作： 添加影像图层
	         * @param layer {object}
	         */

	    }, {
	        key: 'addImageLayer',
	        value: function addImageLayer(layer) {
	            return this._layerSet.addImageLayer(layer);
	        }

	        /**
	         * 图层相关操作：添加地形图层
	         * @param layer {object}
	         */

	    }, {
	        key: 'addTerrainLayer',
	        value: function addTerrainLayer(layer) {
	            return this._layerSet.addTerrainLayer(layer);
	        }

	        /**
	         * 图层相关操作：添加矢量图层
	         */

	    }, {
	        key: 'addVectorLayer',
	        value: function addVectorLayer(layer) {
	            return this._layerSet.addVectorLayer(layer);
	        }

	        /**
	         * 图层相关操作： 获取基础图层
	         * @return {BaseImageLayer}
	         */

	    }, {
	        key: 'getBaseLayer',
	        value: function getBaseLayer() {
	            return this._layerSet.getBaseLayer();
	        }

	        /**
	         * 图层相关操作：获取某一个图层
	         * @param name {string}
	         * @return {Layer}
	         */

	    }, {
	        key: 'getLayerByName',
	        value: function getLayerByName(name) {
	            return this._layerSet.getLayerByName(name);
	        }

	        /**
	         * 图层相关操作：获取某一个图层
	         * @param id {string}
	         * @return {Layer}
	         */

	    }, {
	        key: 'getLayerById',
	        value: function getLayerById(id) {
	            return this._layerSet.getLayerById(id);
	        }

	        /**
	         * 图层相关操作接口 **[获取所有影像图层]**
	         * @method getImageLayers
	         * @return {Array<ImageLayer>} 返回影像图层数组
	         */

	    }, {
	        key: 'getImageLayers',
	        value: function getImageLayers() {
	            return this._layerSet.getImageLayers();
	        }

	        /**
	         * 图层相关操作接口 **[获取所有地形图层]**
	         * @method getTerrainLayers
	         * @return {Array<TerrainLayer>} 返回地形图层数组
	         */

	    }, {
	        key: 'getTerrainLayers',
	        value: function getTerrainLayers() {
	            return this._layerSet.getTerrainLayers();
	        }

	        /**
	         * 图层相关操作接口 **[获取所有矢量图层]**
	         * @method getVectorLayers
	         * @return {Array<VectorLayer>} 返回矢量图层数组
	         */

	    }, {
	        key: 'getVectorLayers',
	        value: function getVectorLayers() {
	            return this._layerSet.getVectorLayers();
	        }

	        /**
	         * 图层相关操作: 删除图层
	         * @param layer {Layer|string}
	         */

	    }, {
	        key: 'removeLayer',
	        value: function removeLayer(layer) {
	            this._layerSet.removeLayer(layer);
	        }

	        /**
	         * 图层相关操作接口 **[通过id删除某一个图层]**
	         * @method removeLayer
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'removeLayerById',
	        value: function removeLayerById(layer) {
	            this._layerSet.removeLayerById(layer);
	        }

	        /**
	         * 图层相关操作接口 **[通过名称删除某一个图层]**
	         * @method removeLayer
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'removeLayerByName',
	        value: function removeLayerByName(layer) {
	            this._layerSet.removeLayerByName(layer);
	        }

	        /**
	         * 图层相关操作接口 **[上移某一个图层]**
	         * @method raise
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'moveUp',
	        value: function moveUp(layer) {
	            this._layerSet.moveUp(layer);
	        }

	        /**
	         * 图层相关操作接口 **[下移某一个图层]**
	         * @method lower
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'moveDown',
	        value: function moveDown(layer) {
	            this._layerSet.moveDown(layer);
	        }

	        /**
	         * 图层相关操作接口 **[上移图层至顶端]**
	         * @method raisetoTop
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'moveTop',
	        value: function moveTop(layer) {
	            this._layerSet.moveTop(layer);
	        }

	        /**
	         * 图层相关操作接口 **[下移图层至底端]**
	         * @method lowertoBottom
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'moveBottom',
	        value: function moveBottom(layer) {
	            this._layerSet.moveBottom(layer);
	        }

	        /**
	         * 转化为消息字符串
	         * @return {String}
	         */

	    }, {
	        key: 'toMessageStr',
	        value: function toMessageStr(params) {
	            if (!params || !params.map) return '<geocanvas><map></map></geocanvas>';
	            var baseimage = '';
	            var layers = '';
	            if (params.map && params.map.layers && params.map.layers.baseimage && params.map.layers.baseimage.uuid) baseimage = '<baseimage><uuid>' + params.map.layers.baseimage.uuid + '</uuid></baseimage>';
	            if (params.map && params.map.layers && params.map.uuid) layers = '<layers><uuid>' + params.map.layers.uuid + '</uuid>' + baseimage + '</layers>';

	            var xmlStr = '<geocanvas>\n                    <map>\n                        ' + (this.name ? '<name>' + this.name + '</name>' : '') + '\n                        <supported_mode>' + this.supportedMode + '</supported_mode>\n                        <current_mode>' + this.currentMode + '</current_mode>\n                        ' + (this.hasSwitchAnimation ? '<has_switch_animation>' + this.hasSwitchAnimation + '</has_switch_animation>' : '') + '\n                        ' + this._mapOptions.toXml() + '\n                        ' + layers + '\n                    </map>\n                </geocanvas>';
	            return Util.replaceXmlSpace(xmlStr);
	        }

	        /**
	         * 序列化相关接口 **[保存整个场景]**
	         * @method saveGVML
	         * @param type {String} 要保存的场景的数据格式（.xml或者.json）,取值范围为'XML'或者'JSON'
	         */

	    }, {
	        key: 'saveGVML',
	        value: function saveGVML() {
	            var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'XML';

	            // TODO do anything
	            if (type === 'xml' || type === 'XML') {
	                var xmlStr = '<geocanvas>\n                    ' + this.parent._pluginManager.toTags() + '\n                    <map>\n                        ' + (this.name ? '<name>' + this.name + '</name>' : '') + '\n                        <supported_mode>' + this.supportedMode + '</supported_mode>\n                        <current_mode>' + this.currentMode + '</current_mode>\n                        ' + (this.hasSwitchAnimation ? '<has_switch_animation>' + this.hasSwitchAnimation + '</has_switch_animation>' : '') + '\n                        ' + this._camera.toXml() + '\n                        ' + this._mapOptions.toXml() + '\n                        ' + this._layerSet.toXml() + '\n                        ' + this._sceneSet.toXml() + '\n                    </map>\n                </geocanvas>';
	                return Util.replaceXmlSpace(xmlStr);
	            } else if (type === 'json' || type === 'JSON') {
	                var json = { geocanvas: { map: {} } };
	                if (this.parent._pluginManager) json.geocanvas.plugins = this.parent._pluginManager.toJson();
	                if (this.name) json.geocanvas.map.name = this.name;
	                if (this.hasSwitchAnimation) json.geocanvas.map.has_switch_animation = this.hasSwitchAnimation;
	                json.geocanvas.map.supported_mode = this.supportedMode;
	                json.geocanvas.map.current_mode = this.currentMode;
	                //json.geocanvas.map.current_clock = this.currentClock.toString();
	                json.geocanvas.map.camera = this._camera.toJson().camera;
	                json.geocanvas.map.options = this._mapOptions ? this._mapOptions.toJson().options : {};
	                json.geocanvas.map.layers = this.saveLayers(type);
	                json.geocanvas.map.scenes = this.saveScenes(type).scenes;
	                return json;
	            }
	            console.log(type + "\u683C\u5F0F\u5C1A\u672A\u652F\u6301");
	            return undefined;
	        }

	        /**
	         * 序列化相关接口 **[保存整个图层]**
	         * @method saveGVML
	         * @param type {String} 要保存的场景的数据格式（.xml或者.json）,取值范围为'XML'或者'JSON'
	         */

	    }, {
	        key: 'saveLayers',
	        value: function saveLayers() {
	            var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'XML';

	            // TODO do anything
	            if (type === 'xml' || type === 'XML') {
	                return this._layerSet.toXml();
	            } else if (type === 'json' || type === 'JSON') {
	                return this._layerSet.toJson();
	            }
	            console.log(type + "\u683C\u5F0F\u5C1A\u672A\u652F\u6301");
	            return undefined;
	        }

	        /**
	         * 序列化相关接口 **[保存整个图层]**
	         * @method saveGVML
	         * @param type {String} 要保存的场景的数据格式（.xml或者.json）,取值范围为'XML'或者'JSON'
	         */

	    }, {
	        key: 'saveScenes',
	        value: function saveScenes() {
	            var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'XML';

	            // TODO do anything
	            if (type === 'xml' || type === 'XML') {
	                return Util.json2xml(this._sceneSet.toJson());
	            } else if (type === 'json' || type === 'JSON') {
	                return this._sceneSet.toJson();
	            }
	            console.log(type + "\u683C\u5F0F\u5C1A\u672A\u652F\u6301");
	            return undefined;
	        }
	    }, {
	        key: 'parseLayers',
	        value: function parseLayers(json) {
	            this._layerSet.parseLayer(json);
	        }
	    }, {
	        key: 'parseScenes',
	        value: function parseScenes(json) {
	            this._sceneSet._parseScenes(json.scenes ? json.scenes : json);
	        }
	    }, {
	        key: '_callBack',
	        value: function _callBack(type, para) {
	            console.log(type);
	            console.log(para);
	            switch (type) {
	                case 'get_frame_stat_info':
	                    console.log(para);
	                    break;
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: 'version',
	        get: function get() {
	            return '1.0.0.180326';
	        }

	        /**
	         * map名称
	         * @property name
	         */

	    }, {
	        key: 'name',
	        set: function set(name) {
	            if (this._name !== undefined) return;
	            this._name = name;
	        },
	        get: function get() {
	            return this._name;
	        }

	        /**
	         * @property supportedMode
	         */

	    }, {
	        key: 'supportedMode',
	        set: function set(supportedMode) {
	            if (this._supportedMode) return;

	            if (supportedMode) {
	                var tempMode = supportedMode.split(';');
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = tempMode[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var key = _step.value;

	                        if (key === '') continue;
	                        if (!this._supportedMode) this._supportedMode = [];
	                        this._supportedMode.push(key);
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	            }

	            if (!this._supportedMode) {
	                console.log('supportedMode使用默认参数 2D;3D');
	                this._supportedMode = ['3D', '2D'];
	            }
	        },
	        get: function get() {
	            var modes = '';
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = this._supportedMode[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var mode = _step2.value;

	                    if (modes !== '') modes += ';';
	                    modes += mode;
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            return modes;
	        }

	        /**
	         * currentMode
	         */

	    }, {
	        key: 'currentMode',
	        set: function set(currentMode) {
	            var index = this._supportedMode.indexOf(currentMode);
	            if (index < 0) {
	                this._currentMode = this._supportedMode[0];
	                console.log("current_mode\u8BBE\u7F6E\u9519\u8BEF\u4F7F\u7528\u9ED8\u8BA4\u53C2\u6570" + this._supportedMode[0]);
	            } else {
	                this._currentMode = currentMode;

	                this.postMessage('map', _MessageSet2.default.Map.post.changeView, this._currentMode);
	            }
	        },
	        get: function get() {
	            return this._currentMode;
	        }
	    }, {
	        key: 'hasSwitchAnimation',
	        get: function get() {
	            return this._hasSwitchAnimation === undefined ? false : this._hasSwitchAnimation;
	        }

	        /**
	         * 球的配置
	         * @return GV.MapOptions
	         */

	    }, {
	        key: 'mapOptions',
	        get: function get() {
	            return this._mapOptions;
	        }
	    }, {
	        key: 'location',
	        get: function get() {
	            return this._location;
	        }

	        /**
	         * 鼠标样式
	         * @param style{mct:, url:, offsetx:, offsety:}
	         */

	    }, {
	        key: 'cursorStyle',
	        set: function set(style) {
	            if (!style) return;
	            if (style.url === undefined && style.mct === undefined) return;

	            if (style.url === this.cursorStyle.url && style.mct === this.cursorStyle.mct) return;

	            var tempStyle = {};
	            if (style.url) {
	                tempStyle.url = style.url;
	                tempStyle.offsetx = Util.isStrNumber(style.offsetx) ? style.offsetx : 0;
	                tempStyle.offsety = Util.isStrNumber(style.offsety) ? style.offsety : 0;
	            } else {
	                tempStyle.mct = style.mct;
	            }

	            this.postMessage('set_cursor_style', '', tempStyle);
	            this._cursorStyle = tempStyle;
	        }

	        /**
	         * 鼠标样式
	         */

	        , get: function get() {
	            return this._cursorStyle !== undefined ? this._cursorStyle : { mct: _ENUM2.default.CURSOR_STYLE.CUSTOM };
	        }
	    }, {
	        key: 'camera',
	        set: function set(camera) {
	            this._camera = camera;
	        }

	        /**
	         * 获取事件监听对象
	         * @property MessageListener
	         */

	        , /**
	           * 获取相机
	           * @return {Camera}
	           */
	        get: function get() {
	            return this._camera;
	        }

	        /**
	         * 获取时间对象
	         * @property clock
	         */

	    }, {
	        key: 'messageListener',
	        get: function get() {
	            return this._messageManager.messageListener;
	        }
	    }, {
	        key: 'clock',
	        get: function get() {
	            return this._currentClock;
	        }

	        /**
	         * 设置显示插件面板，参数为true-显示默认面板 | Class-显示自定义界面模板 | false-隐藏或不启用面板
	         * @param center
	         */

	    }, {
	        key: 'pluginCenter',
	        set: function set(center) {
	            this._pluginManager.showPluginPanel(center);
	        }

	        /**
	         * 获取插件面板显示状态
	         * @return {boolean}
	         */

	        , get: function get() {
	            return this._pluginManager._pluginView;
	        }
	    }]);

	    return Earth;
	}(_Class3.default);

	exports.default = Earth;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Map.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Class.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com
	 * 日期：2017-02-21 16:23:20.
	 * 用途：所有类的基类
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _defineProperty(obj, key, value) {
	    if (key in obj) {
	        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	    } else {
	        obj[key] = value;
	    }return obj;
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	var Class = function () {
	    // 通用构造方法
	    function Class(params) {
	        _classCallCheck(this, Class);

	        if (params && Util.isJson(params)) {
	            this._uuid = params.uuid;
	            this._parseJson(params);
	        }
	        this._uuid = this._uuid || Util.createGuid();
	    }

	    _createClass(Class, [{
	        key: '_parseJson',
	        value: function _parseJson(params, post) {}

	        /**
	         * 绑定回调事件,为了方便,都写到这里了
	         * @param callback {Function} 回调函数
	         */

	    }, {
	        key: 'bindCallback',
	        value: function bindCallback(callback) {
	            var _target = null;
	            if (this.map) {
	                _target = this.map._messageManager;
	            } else if (this._messageManager) {
	                _target = this._messageManager;
	            }
	            if (_target != null) {
	                _target.bindCallback(this.id, callback, this);
	            }
	        }

	        /**
	         * 设置地球实体
	         * @param map {GV.Map} Map对象
	         */

	    }, {
	        key: 'setMap',
	        value: function setMap(map) {
	            this.map = map;
	            if (this._callBack && Util.$.isFunction(this._callBack)) {
	                this.bindCallback(this._callBack);
	            }
	        }
	    }, {
	        key: 'setProps',
	        value: function setProps(options) {
	            for (var key in options) {
	                this[key] = options[key];
	            }
	        }

	        /**
	         * 向实体传送消息
	         * @param messageType {String} 消息类型
	         * @param para1 {Object} 消息参数
	         * @param para2 {Object} 消息参数
	         */

	    }, {
	        key: 'postMessage',
	        value: function postMessage(messageType, para1, para2) {
	            var _target = null;
	            if (this.map) {
	                _target = this.map._messageManager;
	                _target.postMessage(this.id, messageType, para1, para2);
	            } else if (this._messageManager) {
	                _target = this._messageManager;
	                _target.postMessage(messageType, para1, para2);
	            }
	        }
	    }, {
	        key: 'toXml',

	        /**
	         * 转化为xml描述
	         * @return {string} xml描述文本
	         */
	        value: function toXml() {
	            return this._toXml();
	        }

	        /**
	         * 转化为xml描述
	         * @param innerXML {xml -string} 插入到标签中的xml文本
	         * @return {string} xml描述文本
	         * @private
	         */

	    }, {
	        key: '_toXml',
	        value: function _toXml() {
	            var innerXML = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

	            return Util.replaceXmlSpace('<' + this.tag + '><uuid>' + this.id + '</uuid>' + innerXML + '</' + this.tag + '>');
	        }

	        /**
	         * 转换为json数据
	         */

	    }, {
	        key: '_toJson',
	        value: function _toJson(child) {
	            var obj = { uuid: this.id };
	            if (child) {
	                for (var key in child) {
	                    obj[key] = child[key];
	                }
	            }

	            return _defineProperty({}, this.tag, obj);
	        }
	    }, {
	        key: 'uuid',
	        set: function set(uuid) {
	            if (!this._uuid) {
	                this._uuid = uuid;
	            }
	        }
	    }, {
	        key: 'id',
	        get: function get() {
	            return this._uuid;
	        }

	        /**
	         * 返回该类对应的xml标签
	         * @return {string}
	         */

	    }, {
	        key: 'tag',
	        get: function get() {
	            return 'Class';
	        }
	    }]);

	    return Class;
	}();

	exports.default = Class;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Class.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.limitLat = exports.limitLon = exports.checkCameraViewPoint = exports.parseConfig = exports._isConfigArray = exports._propertyToJson = exports.scriptToXml = exports._propertyToXml = exports.__getGetterProperties = exports.__getSetterProperties = exports.arrayToStr = exports.strToArray = exports.__enumValuesToString = exports.__checkENUMValue = exports.__defineSetterAndGetter = exports.__defineGetter = exports.__defineSetter = exports.getLocation = exports.aAToa_a = exports.a_aToaA = exports.formatURLByHost = exports.formatURL = exports.rename = exports._styleToObj = exports._styleToXml = exports.styleToXml = exports.stylesToXml = exports.xmlToStyles = exports.STRtoCDATA = exports.CDATAtoSTR = exports.replaceAllSpace = exports.replaceXmlSpace = exports.formatString = exports.indexOf = exports.falseFn = exports.createGuid = exports.json2xmlAndaAToa_a = exports.json2xml = exports.xmlToJson = exports.strToXml = exports.jsonSyncPromise = exports.isColor = exports.xmlPromise = exports.filterUnit = exports.isAddUnit = exports.isArray = exports.isStrNumber = exports.isNumber = exports.isString = exports.getJsonLength = exports.toBooleanTrueOrFlse = exports.isTrueOrFalse = exports.isBoolean = exports.isObject = exports.isJson = exports.math = exports.array = exports.$ = undefined;

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	}; /**
	    * 项目：work_dir
	    * 文件：Util.js
	    * 作者：巩志远
	    * 部门：产品研发中心
	    * 邮箱：gongzy@geovis.com.cn
	    * 日期：2016-03-22 20:42:08
	    * 用途：工具类
	    */
	// import jquery from './../thirdParty/jquery-3.1.1.min';

	// import 'jquery-ui';
	// import 'colorpicker';


	var _jquery = __webpack_require__(7);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _mathUtil = __webpack_require__(10);

	var _mathUtil2 = _interopRequireDefault(_mathUtil);

	var _arrayUtil = __webpack_require__(11);

	var _arrayUtil2 = _interopRequireDefault(_arrayUtil);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	var $ = exports.$ = _jquery2.default;
	var array = exports.array = _arrayUtil2.default;
	var math = exports.math = _mathUtil2.default;
	/**
	 * 判定对象是否为纯粹的json对象
	 * @param obj {Object} 被判定对象
	 * @return {boolean} 是-true 否-false
	 */
	var isJson = exports.isJson = function isJson(obj) {
	    if ($.isPlainObject(obj)) {
	        try {
	            JSON.stringify(obj);
	            return true;
	        } catch (e) {
	            return false;
	        }
	    } else {
	        return false;
	    }
	};
	/**
	 * 检查参数是否为普通对象
	 * @param obj
	 * @return {boolean}
	 */
	var isObject = exports.isObject = function isObject(obj) {
	    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null;
	};

	/**
	 * 检查参数是否为布尔值
	 * @param obj
	 * @return {boolean}
	 */
	var isBoolean = exports.isBoolean = function isBoolean(obj) {
	    return typeof obj === 'boolean';
	};

	/**
	 * 检查参数是否为布尔值或者为true、false的字符串
	 * @param value
	 * @return {boolean}
	 */
	var isTrueOrFalse = exports.isTrueOrFalse = function isTrueOrFalse(value) {
	    return typeof value === 'boolean' || value === 'true' || value === 'false';
	};

	/**
	 * 将传入的字符串类型的
	 * @param value
	 * @return {boolean/undefined}
	 */
	var toBooleanTrueOrFlse = exports.toBooleanTrueOrFlse = function toBooleanTrueOrFlse(value) {
	    if (value === true || value === 'true' || value === 'TRUE') {
	        return true;
	    } else if (value === false || value === 'false' || value === 'FALSE') {
	        return false;
	    }
	    return undefined;
	};

	if (!("debug" in console)) {
	    console.debug = function () {
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }

	        console.log.apply(undefined, args);
	    };
	}

	var getJsonLength = exports.getJsonLength = function getJsonLength(obj) {
	    var count = 0;
	    for (var key in obj) {
	        count++;
	    }
	    return count;
	};
	/**
	 * 判定是否为字符串
	 * @param obj {Object}
	 * @return {boolean} 是-true 否-false
	 */
	var isString = exports.isString = function isString(obj) {
	    return typeof obj === 'string' && obj.constructor === String;
	};
	/**
	 * 判定是否为数值
	 * @param obj {Object}
	 * @return {number} 是-true 否-false
	 */
	var isNumber = exports.isNumber = function isNumber(obj) {
	    return typeof obj === 'number' && obj.constructor === Number;
	};

	/**
	 * 判定是否为字符串类型的数值
	 * @param obj {Object}
	 * @return {number} 是-true 否-false
	 */
	var isStrNumber = exports.isStrNumber = function isStrNumber(obj) {
	    if (isString(obj)) {
	        if (isNaN(parseFloat(obj))) return false;
	        return true;
	    }
	    return typeof obj === 'number' && obj.constructor === Number;
	};

	/**
	 * 判定是否为数组
	 * @param obj {Array<any>}
	 * @return {boolean} 是-true 否-false
	 */
	var isArray = exports.isArray = function isArray(obj) {
	    return obj instanceof Array;
	};
	/**
	 * @param {String} string
	 * @description 正则匹配带有单位px或m的属性值
	 */
	var isAddUnit = exports.isAddUnit = function isAddUnit(string) {
	    var reg = new RegExp(/^(\-|\+)?\d+(m|px)?$/);
	    return reg.test(string);
	};
	/**
	 * @param {String} string
	 * @description 正则匹配带有单位m或px的属性值并返回其中的数值
	 */
	var filterUnit = exports.filterUnit = function filterUnit(string) {
	    return isNumber(string) ? string : Number(string.match(/^(\-|\+)?\d+/)[0]);
	};
	/**
	 * ajax获取xml数据
	 */
	var xmlPromise = exports.xmlPromise = function xmlPromise(url) {
	    return $.ajax({ url: url, type: 'get', dataType: 'xml' });
	};
	/**
	 * 
	 * @param {String} string
	 * @description 判断字符串是否为十六进制颜色。例如#FFFFFFFF或者#FFFFFF  
	 */
	var isColor = exports.isColor = function isColor(string) {
	    var regColor = new RegExp('^#([0-9a-fA-F]{6}|[0-9a-fA-F]{8})$');
	    return regColor.test(string);
	};
	/**
	 * ajax获取json数据
	 */
	var jsonSyncPromise = exports.jsonSyncPromise = function jsonSyncPromise(url) {
	    return $.ajax({ url: url, type: 'get', dataType: 'json', async: false });
	};
	var strToXml = exports.strToXml = function strToXml(str) {
	    return new DOMParser().parseFromString(str, 'text/xml');
	};
	/**
	 * xml字符串转换为json
	 * @param xml {String} xml字符串
	 * @return {Json} json对象
	 */
	var xmlToJson = exports.xmlToJson = function xmlToJson(xml) {
	    // Create the return object
	    var obj = {};
	    if (xml.nodeType === 1) {
	        // element
	        // do attributes
	        if (xml.attributes.length > 0) {
	            for (var j = 0; j < xml.attributes.length; j += 1) {
	                var attribute = xml.attributes.item(j);
	                obj[attribute.nodeName] = attribute.nodeValue;
	            }
	        }
	    } else if (xml.nodeType === 3) {
	        // text
	        obj = xml.nodeValue; //--钱晶
	    }
	    if (xml.hasChildNodes()) {
	        for (var i = 0; i < xml.childNodes.length; i += 1) {
	            var item = xml.childNodes.item(i);
	            var nodeName = item.nodeName;
	            if (typeof obj[nodeName] === 'undefined') {
	                var value = null;
	                if (nodeName.toLowerCase() === '#cdata-section') {
	                    value = CDATAtoSTR(xml.innerHTML);
	                    nodeName = 'value';
	                } else {
	                    value = xmlToJson(item);
	                }

	                if (!(nodeName === '#text' && value.replace(/^\s+/g, '') === '') && nodeName !== '#comment') {
	                    // 去除注解
	                    if (nodeName === '#text') {
	                        obj = value;
	                    } else {
	                        obj[nodeName] = value;
	                    }
	                }
	            } else {
	                if (typeof obj[nodeName].length === 'undefined') {
	                    var old = obj[nodeName];
	                    obj[nodeName] = [];
	                    obj[nodeName].push(old);
	                }
	                obj[nodeName].push(xmlToJson(item));
	            }
	        }
	    }
	    return obj;
	};
	/**
	 * json转xml字符串
	 */
	var json2xml = exports.json2xml = function json2xml(json, tag) {
	    var xml = '';
	    if (json instanceof Array) {
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	            for (var _iterator = json[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var v = _step.value;
	                xml += json2xml(v, tag);
	            }
	        } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                    _iterator.return();
	                }
	            } finally {
	                if (_didIteratorError) {
	                    throw _iteratorError;
	                }
	            }
	        }
	    } else if (json instanceof Object) {
	        if (tag) xml += '<' + tag + '>';
	        for (var k in json) {
	            xml += json2xml(json[k], k);
	        }if (tag) xml += '</' + tag + '>';
	    } else {
	        xml += '<' + tag + '>' + json + '</' + tag + '>';
	    }
	    return xml;
	};

	var json2xmlAndaAToa_a = exports.json2xmlAndaAToa_a = function json2xmlAndaAToa_a(json, tag) {
	    var xml = '';
	    if (json instanceof Array) {
	        var _iteratorNormalCompletion2 = true;
	        var _didIteratorError2 = false;
	        var _iteratorError2 = undefined;

	        try {
	            for (var _iterator2 = json[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                var v = _step2.value;
	                xml += json2xmlAndaAToa_a(v, tag);
	            }
	        } catch (err) {
	            _didIteratorError2 = true;
	            _iteratorError2 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                    _iterator2.return();
	                }
	            } finally {
	                if (_didIteratorError2) {
	                    throw _iteratorError2;
	                }
	            }
	        }
	    } else if (json instanceof Object) {
	        if (tag) xml += '<' + aAToa_a(tag) + '>';
	        for (var k in json) {
	            xml += json2xmlAndaAToa_a(json[k], k);
	        }if (tag) xml += '</' + aAToa_a(tag) + '>';
	    } else {
	        xml += '<' + aAToa_a(tag) + '>' + json + '</' + aAToa_a(tag) + '>';
	    }
	    return xml;
	};

	var createGuid = exports.createGuid = function createGuid() {
	    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
	        var r = Math.random() * 16 | 0;
	        var v = c === 'x' ? r : r & 0x3 | 0x8;
	        return v.toString(16);
	    });
	};

	var falseFn = exports.falseFn = function falseFn() {
	    return false;
	};

	var indexOf = exports.indexOf = function indexOf(obj, arr, key) {
	    for (var i in arr) {
	        if (arr[i][key] === obj[key]) {
	            return i;
	        }
	    }
	    return -1;
	};

	/**
	 * 格式化字符串
	 * @param str {String} 被格式化字符串 如 xx.json?a = {a}&b={b}
	 * @param array {Array} 传入得字符 [{k:a,v:asdf}]
	 */
	var formatString = exports.formatString = function formatString(str, array) {
	    if (array.length !== 0) {
	        var _iteratorNormalCompletion3 = true;
	        var _didIteratorError3 = false;
	        var _iteratorError3 = undefined;

	        try {
	            for (var _iterator3 = array[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                var o = _step3.value;

	                var re = new RegExp('{' + o.k + '}', 'gm');
	                str = str.replace(re, o.v);
	            }
	        } catch (err) {
	            _didIteratorError3 = true;
	            _iteratorError3 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                    _iterator3.return();
	                }
	            } finally {
	                if (_didIteratorError3) {
	                    throw _iteratorError3;
	                }
	            }
	        }

	        return str;
	    }
	    return str;
	};
	/**
	 * 替换xml文本中><之间的空格
	 * @param str 被替换的xml字符串
	 * @return {String}
	 */
	var replaceXmlSpace = exports.replaceXmlSpace = function replaceXmlSpace(str) {
	    return str.replace(/>[\r\n\s]+</g, '><');
	};
	/**
	 * 替换文本中所有的空格
	 * @param str 被替换的xml字符串
	 * @return {String}
	 */
	var replaceAllSpace = exports.replaceAllSpace = function replaceAllSpace(str) {
	    return str.replace(/[\r\n\s]+/g, '');
	};

	/**
	 *  CDATA转普通字符串
	 * @param CDATA
	 * @return str
	 */
	var CDATAtoSTR = exports.CDATAtoSTR = function CDATAtoSTR(CDATA) {
	    var regExp = new RegExp(/^(<!\[CDATA\[)([\s\S]*)(\]\]>)$/);
	    var str = CDATA.replace(/[\n]/g, '').replace(/^\s+|\s+$/g, '');
	    return regExp.exec(str)[2];
	};

	/**
	 * 字符串拼成CDATA格式字符串
	 * @param str
	 * @return CDATA
	 */
	var STRtoCDATA = exports.STRtoCDATA = function STRtoCDATA(str) {
	    return '<![CDATA[' + str + ']]>';
	};

	/**
	 * style格式字符串解析
	 * @param str
	 * @return obj
	 */
	var xmlToStyles = exports.xmlToStyles = function xmlToStyles(str) {

	    //去除所有空格和换行
	    str = replaceAllSpace(str);

	    str = str.split(/[\{\}]/);

	    if (str.length > 1) {
	        var obj = {};
	        for (var i = 0; i < str.length - 1; i += 2) {
	            if (str[i] === '') continue;
	            obj[str[i]] = _styleToObj(str[i + 1]);
	        }
	        return obj;
	    } else {
	        return _styleToObj(str[0]);
	    }
	};

	var stylesToXml = exports.stylesToXml = function stylesToXml(obj) {
	    var str = '';
	    for (var key in obj) {
	        if (obj[key] === undefined) continue;
	        str = str + (key + '{' + _styleToXml(obj[key]) + '}');
	    }

	    return '<style type="text/css">' + str + '</style>';
	};

	var styleToXml = exports.styleToXml = function styleToXml(obj) {
	    return '<style type="text/css">' + _styleToXml(obj) + '</style>';
	};

	var _styleToXml = exports._styleToXml = function _styleToXml(obj) {
	    if (!obj) return '';

	    var str = '';
	    for (var key in obj) {
	        if (obj[key] === undefined) continue;
	        str = str + (key + ':' + obj[key] + ';');
	    }

	    return str;
	};

	var _styleToObj = exports._styleToObj = function _styleToObj(str) {
	    str = str.split(';');
	    var obj = {};
	    for (var i = 0; i < str.length; i++) {
	        var tempItem = str[i].split(':');
	        if (tempItem.length !== 2) continue;
	        obj[tempItem[0]] = tempItem[1];
	    }
	    return obj;
	};

	var rename = exports.rename = function rename() {
	    var nameValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	    var objMap = arguments[1];
	    var prop = arguments[2];
	    var obj = arguments[3];

	    var count = 0;
	    var uniqueMap = function uniqueMap(str, map, key, self) {
	        // let res = str;
	        for (var mapkey in map) {
	            var compareValue = void 0;
	            if (key) {
	                // 匹配value[key]
	                compareValue = map[mapkey][key];
	            } else {
	                compareValue = map[mapkey];
	            }
	            // console.log(str, compareValue);
	            if (compareValue && str === compareValue && map[mapkey] !== self) return uniqueMap(str + '_' + ++count, map, key, self);
	        }
	        return str;
	    };
	    return uniqueMap(nameValue, objMap, prop, obj);
	};

	var formatURL = exports.formatURL = function formatURL(file) {
	    if (!file) return;
	    var tempUrl = file.split('/');
	    var htmlUrl = window.location.href; //当前页面路径
	    if (!htmlUrl) return file;
	    htmlUrl = htmlUrl.split('/');

	    // 去掉末尾的‘/’
	    htmlUrl.pop();
	    var res = '';
	    for (var i = 0; i < tempUrl.length; i += 1) {
	        if (i === 0 && tempUrl[i] === '.') i += 1;
	        if (tempUrl[i] === '..') {
	            htmlUrl.pop();
	        } else {
	            htmlUrl.push(tempUrl[i]);
	        }
	    }
	    for (var _i = 0; _i < htmlUrl.length; _i += 1) {
	        var sp = _i === htmlUrl.length - 1 ? '' : '/';
	        res += htmlUrl[_i] + sp;
	    }
	    return res;
	};

	var formatURLByHost = exports.formatURLByHost = function formatURLByHost(file) {
	    if (!file) return;
	    var root = window.location.origin;
	    if (!root) return file;

	    var tempUrl = file.split('/');
	    var url = [root];

	    var res = '';
	    for (var i = 0; i < tempUrl.length; i += 1) {
	        if (i === 0 && tempUrl[i] === '.') i += 1;
	        if (tempUrl[i] === '..') {
	            i += 1;
	        } else {
	            url.push(tempUrl[i]);
	        }
	    }
	    for (var _i2 = 0; _i2 < url.length; _i2 += 1) {
	        var sp = _i2 === url.length - 1 ? '' : '/';
	        res += url[_i2] + sp;
	    }

	    return res;
	};

	/**
	 * xxxx_xx_xx转xxxxXxXx的方法
	 */
	var a_aToaA = exports.a_aToaA = function a_aToaA(str) {
	    return str.replace(/_[a-z]/g, function ($0) {
	        return $0.toUpperCase().charAt(1);
	    });
	};

	/**
	 * xxxxXx转xxxx_xx
	 */
	var aAToa_a = exports.aAToa_a = function aAToa_a(str) {
	    return str.replace(/[A-Z]/g, function ($0) {
	        return '_' + $0.toLowerCase();
	    });
	};

	var getLocation = exports.getLocation = function getLocation(filepath) {
	    var location = { dir: '', filename: '' };
	    if (new RegExp(/^http:\/\//g).test(filepath)) filepath = filepath.substring(6);
	    var dirs = filepath.split('/');
	    for (var i = 0; i < dirs.length; i++) {
	        // 暂时写成以html结尾的路径
	        if (i === dirs.length - 1) {
	            // 最后一个是文件名
	            location.dir += '/';
	            location.filename = dirs[i];
	        } else if (dirs[i] !== null && dirs[i] !== '') {
	            location.dir += '/' + dirs[i];
	        }
	    }
	    location.dir = 'http:/' + location.dir;
	    return location;
	};

	var __defineSetter = exports.__defineSetter = function __defineSetter(obj, prop) {
	    Object.defineProperty(obj, prop, {
	        set: function set(value) {
	            this['_' + prop] = value;
	            this._updateProperty(prop);
	        },
	        configurable: true
	    });
	};

	var __defineGetter = exports.__defineGetter = function __defineGetter(obj, prop, defaultValue) {
	    Object.defineProperty(obj, prop, {
	        get: function get() {
	            return this['_' + prop] || defaultValue;
	        },
	        configurable: true
	    });
	};

	var __defineSetterAndGetter = exports.__defineSetterAndGetter = function __defineSetterAndGetter(obj, prop) {
	    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	    if ('prototype' in obj) {
	        obj = obj.prototype;
	    }
	    __defineSetter(obj, prop);
	    __defineGetter(obj, prop, defaultValue);
	};
	/**
	 * 检查一个值是否在一个枚举对象中
	 * @param value 被检查值
	 * @param enumObject 枚举对象
	 * @private
	 */
	var __checkENUMValue = exports.__checkENUMValue = function __checkENUMValue(value, enumObject) {
	    var returnValue = false;
	    for (var key in enumObject) {
	        if (enumObject[key] === value) {
	            returnValue = true;
	            break;
	        }
	    }
	    return returnValue;
	};
	/**
	 * 转变枚举对象的每个值
	 * @param enumObject
	 * @private
	 */
	var __enumValuesToString = exports.__enumValuesToString = function __enumValuesToString(enumObject) {
	    var values = [];
	    for (var key in enumObject) {
	        values.push(enumObject[key]);
	    }
	    return values.join(',');
	};

	/**
	 * 字符串转数组 样例：'1 2 3,4 5 6' => [[1, 2, 3], [4, 5, 6]]
	 *                   1,2,45,5 =>[1,2,45,5]
	 */
	var strToArray = exports.strToArray = function strToArray(string) {
	    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'float';

	    var points = [];
	    if (typeof string !== 'string') return points;

	    var datas = string.split(',');
	    if (!datas) return points;

	    if (!(datas instanceof Array)) datas = [datas];

	    datas.forEach(function (value) {
	        if (typeof value === 'string') {
	            var tempVecStr = value.split(' ');

	            if (tempVecStr && tempVecStr.length === 1) {
	                points.push(tempVecStr[0]);
	            } else if (tempVecStr && tempVecStr.length > 1) {

	                var tempVec = [];
	                for (var i = 0; i < tempVecStr.length; i++) {
	                    tempVec.push(parseFloat(tempVecStr[i]));
	                }
	                points.push(tempVec);
	            }
	        }
	    });

	    //转换文字类型
	    if (type === 'string' || type === 'String' || type === 'STRING') return points;

	    points.forEach(function (point, pointIndex, pointArr) {
	        if (point instanceof Array) {
	            point.forEach(function (data, index, arr) {
	                switch (type) {
	                    case 'float':
	                        arr[index] = parseFloat(data);
	                        break;

	                    default:
	                        break;
	                }
	            });
	        } else {
	            switch (type) {
	                case 'float':
	                    pointArr[pointIndex] = parseFloat(point);
	                    break;

	                default:
	                    break;
	            }
	        }
	    });

	    return points;
	};

	/**
	 * 数组转字符串样例：[[1, 2, 3], [4, 5, 6]] => '1 2 3,4 5 6'
	 */
	var arrayToStr = exports.arrayToStr = function arrayToStr(points) {
	    var str = '';
	    if (!points || !(points instanceof Array) || points.length === 0) return '';

	    for (var i = 0; i < points.length; i++) {
	        if (i !== 0) str += ',';
	        var data = points[i];
	        if (data instanceof Array) {
	            for (var k = 0; k < data.length; k++) {
	                if (k !== 0) str += ' ';
	                str += '' + data[k];
	            }
	        } else {
	            str += '' + data;
	        }
	    }
	    return str;
	};

	/**
	 * 得到对象所有使用set的属性值
	 */
	var __getSetterProperties = exports.__getSetterProperties = function __getSetterProperties(context) {
	    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	    var proto = Object.getPrototypeOf(context);

	    if (!Object.getPrototypeOf(proto)) return props; //当该原型链再没有原型链的时候默认为是基类object对象 
	    var names = Object.getOwnPropertyNames(proto);
	    var des = void 0;
	    var _iteratorNormalCompletion4 = true;
	    var _didIteratorError4 = false;
	    var _iteratorError4 = undefined;

	    try {
	        for (var _iterator4 = names[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	            var name = _step4.value;

	            des = Object.getOwnPropertyDescriptor(proto, name);
	            if (typeof des.set === 'function' && name !== 'parent' && !name.startsWith('_')) {
	                props.push(name);
	            }
	        }
	    } catch (err) {
	        _didIteratorError4 = true;
	        _iteratorError4 = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                _iterator4.return();
	            }
	        } finally {
	            if (_didIteratorError4) {
	                throw _iteratorError4;
	            }
	        }
	    }

	    return this.__getSetterProperties(proto, props);
	};

	/**
	 * 得到对象所有使用get的属性值
	 */
	var __getGetterProperties = exports.__getGetterProperties = function __getGetterProperties(context) {
	    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	    var proto = Object.getPrototypeOf(context);

	    if (!Object.getPrototypeOf(proto)) return props; //当该原型链再没有原型链的时候默认为是基类object对象 
	    var names = Object.getOwnPropertyNames(proto);
	    var des = void 0;
	    var _iteratorNormalCompletion5 = true;
	    var _didIteratorError5 = false;
	    var _iteratorError5 = undefined;

	    try {
	        for (var _iterator5 = names[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	            var name = _step5.value;

	            des = Object.getOwnPropertyDescriptor(proto, name);
	            if (typeof des.get === 'function') {
	                props.push(name);
	            }
	        }
	    } catch (err) {
	        _didIteratorError5 = true;
	        _iteratorError5 = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                _iterator5.return();
	            }
	        } finally {
	            if (_didIteratorError5) {
	                throw _iteratorError5;
	            }
	        }
	    }

	    return this.__getGetterProperties(proto, props);
	};

	/**
	 * 获得属性的xml字符
	 * @param type 属性值
	 * @return 返回的单属性的xml值
	 */
	var _propertyToXml = exports._propertyToXml = function _propertyToXml(type, obj) {
	    var xml = '';
	    if (obj === undefined || obj == null) return '';

	    //属性格式转换aAa 转 a_aa
	    type = aAToa_a(type);

	    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
	        if ('toXml' in obj) {
	            xml = obj.toXml();
	        } else {
	            xml = xml + ('<' + type + '>');
	            for (var key in obj) {
	                xml = xml + _propertyToXml(key, obj[key]);
	            }
	            xml = xml + ('</' + type + '>');
	        }
	    } else {
	        if (type === 'value') {
	            xml = STRtoCDATA(obj);
	        } else {
	            xml = '<' + type + '>' + obj + '</' + type + '>';
	        }
	    }

	    return xml;
	};

	var scriptToXml = exports.scriptToXml = function scriptToXml(obj) {
	    if (typeof obj === 'string') {
	        return '<script language="javascript">' + obj + '</script>';
	    }
	    return '';
	};

	/**
	 * @param prikey 属性值
	 * @param obj 要保存的对象
	 */
	var _propertyToJson = exports._propertyToJson = function _propertyToJson(context, prikey, obj) {
	    if (prikey === 'parent') return '';
	    var value = context[prikey];
	    if (value === undefined || value == null) return;

	    //属性格式转换aAa 转 a_aa
	    var type = aAToa_a(prikey);

	    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	        if ('toJson' in value) {
	            obj[type] = value.toJson()[type];
	        } else if (isJson(value)) {
	            obj[type] = value;
	        }
	    } else {
	        obj[type] = value;
	    }
	};

	var _isConfigArray = exports._isConfigArray = function _isConfigArray(str) {
	    var r = new RegExp(/^[a-z,A-Z,_][a-z,A-Z,0-1,_]*(__array__)$/);
	    return r.test(str);
	};

	var parseConfig = exports.parseConfig = function parseConfig(param) {
	    if ($.isPlainObject(param)) {
	        for (var key in param) {
	            if ($.isPlainObject(param[key])) {
	                parseConfig(param[key]);
	            } else if ($.isArray(param[key])) {
	                parseConfig(param[key]);
	                if (_isConfigArray(key)) {
	                    var tempKey = key.slice(-key.length, -9);
	                    param[tempKey] = param[key];
	                    delete param[key];
	                }
	            }
	        }
	    } else if ($.isArray(param)) {
	        for (var i = 0; i < param.length; i++) {
	            if ($.isPlainObject(param[i]) || $.isArray(param[i])) {
	                parseConfig(param[i]);
	            }
	        }
	    }
	};

	/**
	 * 检测相机姿态是否合法
	 * @return true 如果传入相机姿态合法
	 *         false 如果相机姿态不合法
	 */

	var checkCameraViewPoint = exports.checkCameraViewPoint = function checkCameraViewPoint(viewPoint) {
	    if (!$.isPlainObject(viewPoint)) return false;

	    for (var key in viewPoint) {
	        var tempValue = parseFloat(viewPoint[key]);
	        if (isNaN(tempValue)) {
	            console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'camera', 'viewPoint.' + key, 'Number'));
	            return false;
	        } else {
	            viewPoint[key] = tempValue;
	        }
	    }

	    if (viewPoint.lon < -180 || viewPoint.lon > 180) {
	        console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONEDEFAULT, 'camera', 'viewPoint.lon', '[-180, 180]'));
	        return false;
	    }

	    if (viewPoint.lat < -89 || viewPoint.lat > 89) {
	        console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONEDEFAULT, 'camera', 'viewPoint.lat', '[-89, 89]'));
	        return false;
	    }

	    if (viewPoint.pitch < -90 || viewPoint.pitch > 0) {
	        console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONEDEFAULT, 'camera', 'viewPoint.pitch', '[-90, 0]'));
	        return false;
	    }

	    return true;
	};

	var limitLon = exports.limitLon = function limitLon(value, tag, attribute) {
	    if (value === undefined) return false;
	    if (isStrNumber(value)) {
	        if (value < -180 || value > 180) {
	            console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONEDEFAULT, tag, attribute + '.lon', '[-180, 180]'));
	            return false;
	        }
	    } else {
	        console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONEDEFAULT, tag, attribute + '.lon', '[-180, 180]'));
	        return false;
	    }
	    return true;
	};

	var limitLat = exports.limitLat = function limitLat(value, tag, attribute) {
	    if (value === undefined) return false;
	    if (isStrNumber(value)) {
	        if (value < -90 || value > 90) {
	            console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONEDEFAULT, tag, attribute + '.lat', '[-90, 90]'));
	            return false;
	        }
	    } else {
	        console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONEDEFAULT, tag, attribute + '.lat', '[-90, 90]'));
	        return false;
	    }
	    return true;
	};

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Util.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	"use strict";

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	/*! jQuery v3.1.1 | (c) jQuery Foundation | jquery.org/license */
	!function (a, b) {
	  "use strict";

	  "object" == ( false ? "undefined" : _typeof(module)) && "object" == _typeof(module.exports) ? module.exports = a.document ? b(a, !0) : function (a) {
	    if (!a.document) throw new Error("jQuery requires a window with a document");return b(a);
	  } : b(a);
	}("undefined" != typeof window ? window : undefined, function (a, b) {
	  "use strict";

	  var c = [],
	      d = a.document,
	      e = Object.getPrototypeOf,
	      f = c.slice,
	      g = c.concat,
	      h = c.push,
	      i = c.indexOf,
	      j = {},
	      k = j.toString,
	      l = j.hasOwnProperty,
	      m = l.toString,
	      n = m.call(Object),
	      o = {};function p(a, b) {
	    b = b || d;var c = b.createElement("script");c.text = a, b.head.appendChild(c).parentNode.removeChild(c);
	  }var q = "3.1.1",
	      r = function r(a, b) {
	    return new r.fn.init(a, b);
	  },
	      s = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	      t = /^-ms-/,
	      u = /-([a-z])/g,
	      v = function v(a, b) {
	    return b.toUpperCase();
	  };r.fn = r.prototype = { jquery: q, constructor: r, length: 0, toArray: function toArray() {
	      return f.call(this);
	    }, get: function get(a) {
	      return null == a ? f.call(this) : a < 0 ? this[a + this.length] : this[a];
	    }, pushStack: function pushStack(a) {
	      var b = r.merge(this.constructor(), a);return b.prevObject = this, b;
	    }, each: function each(a) {
	      return r.each(this, a);
	    }, map: function map(a) {
	      return this.pushStack(r.map(this, function (b, c) {
	        return a.call(b, c, b);
	      }));
	    }, slice: function slice() {
	      return this.pushStack(f.apply(this, arguments));
	    }, first: function first() {
	      return this.eq(0);
	    }, last: function last() {
	      return this.eq(-1);
	    }, eq: function eq(a) {
	      var b = this.length,
	          c = +a + (a < 0 ? b : 0);return this.pushStack(c >= 0 && c < b ? [this[c]] : []);
	    }, end: function end() {
	      return this.prevObject || this.constructor();
	    }, push: h, sort: c.sort, splice: c.splice }, r.extend = r.fn.extend = function () {
	    var a,
	        b,
	        c,
	        d,
	        e,
	        f,
	        g = arguments[0] || {},
	        h = 1,
	        i = arguments.length,
	        j = !1;for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == (typeof g === "undefined" ? "undefined" : _typeof(g)) || r.isFunction(g) || (g = {}), h === i && (g = this, h--); h < i; h++) {
	      if (null != (a = arguments[h])) for (b in a) {
	        c = g[b], d = a[b], g !== d && (j && d && (r.isPlainObject(d) || (e = r.isArray(d))) ? (e ? (e = !1, f = c && r.isArray(c) ? c : []) : f = c && r.isPlainObject(c) ? c : {}, g[b] = r.extend(j, f, d)) : void 0 !== d && (g[b] = d));
	      }
	    }return g;
	  }, r.extend({ expando: "jQuery" + (q + Math.random()).replace(/\D/g, ""), isReady: !0, error: function error(a) {
	      throw new Error(a);
	    }, noop: function noop() {}, isFunction: function isFunction(a) {
	      return "function" === r.type(a);
	    }, isArray: Array.isArray, isWindow: function isWindow(a) {
	      return null != a && a === a.window;
	    }, isNumeric: function isNumeric(a) {
	      var b = r.type(a);return ("number" === b || "string" === b) && !isNaN(a - parseFloat(a));
	    }, isPlainObject: function isPlainObject(a) {
	      var b, c;return !(!a || "[object Object]" !== k.call(a)) && (!(b = e(a)) || (c = l.call(b, "constructor") && b.constructor, "function" == typeof c && m.call(c) === n));
	    }, isEmptyObject: function isEmptyObject(a) {
	      var b;for (b in a) {
	        return !1;
	      }return !0;
	    }, type: function type(a) {
	      return null == a ? a + "" : "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) || "function" == typeof a ? j[k.call(a)] || "object" : typeof a === "undefined" ? "undefined" : _typeof(a);
	    }, globalEval: function globalEval(a) {
	      p(a);
	    }, camelCase: function camelCase(a) {
	      return a.replace(t, "ms-").replace(u, v);
	    }, nodeName: function nodeName(a, b) {
	      return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
	    }, each: function each(a, b) {
	      var c,
	          d = 0;if (w(a)) {
	        for (c = a.length; d < c; d++) {
	          if (b.call(a[d], d, a[d]) === !1) break;
	        }
	      } else for (d in a) {
	        if (b.call(a[d], d, a[d]) === !1) break;
	      }return a;
	    }, trim: function trim(a) {
	      return null == a ? "" : (a + "").replace(s, "");
	    }, makeArray: function makeArray(a, b) {
	      var c = b || [];return null != a && (w(Object(a)) ? r.merge(c, "string" == typeof a ? [a] : a) : h.call(c, a)), c;
	    }, inArray: function inArray(a, b, c) {
	      return null == b ? -1 : i.call(b, a, c);
	    }, merge: function merge(a, b) {
	      for (var c = +b.length, d = 0, e = a.length; d < c; d++) {
	        a[e++] = b[d];
	      }return a.length = e, a;
	    }, grep: function grep(a, b, c) {
	      for (var d, e = [], f = 0, g = a.length, h = !c; f < g; f++) {
	        d = !b(a[f], f), d !== h && e.push(a[f]);
	      }return e;
	    }, map: function map(a, b, c) {
	      var d,
	          e,
	          f = 0,
	          h = [];if (w(a)) for (d = a.length; f < d; f++) {
	        e = b(a[f], f, c), null != e && h.push(e);
	      } else for (f in a) {
	        e = b(a[f], f, c), null != e && h.push(e);
	      }return g.apply([], h);
	    }, guid: 1, proxy: function proxy(a, b) {
	      var c, d, e;if ("string" == typeof b && (c = a[b], b = a, a = c), r.isFunction(a)) return d = f.call(arguments, 2), e = function e() {
	        return a.apply(b || this, d.concat(f.call(arguments)));
	      }, e.guid = a.guid = a.guid || r.guid++, e;
	    }, now: Date.now, support: o }), "function" == typeof Symbol && (r.fn[Symbol.iterator] = c[Symbol.iterator]), r.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (a, b) {
	    j["[object " + b + "]"] = b.toLowerCase();
	  });function w(a) {
	    var b = !!a && "length" in a && a.length,
	        c = r.type(a);return "function" !== c && !r.isWindow(a) && ("array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a);
	  }var x = function (a) {
	    var b,
	        c,
	        d,
	        e,
	        f,
	        g,
	        h,
	        i,
	        j,
	        k,
	        l,
	        m,
	        n,
	        o,
	        p,
	        q,
	        r,
	        s,
	        t,
	        u = "sizzle" + 1 * new Date(),
	        v = a.document,
	        w = 0,
	        x = 0,
	        y = ha(),
	        z = ha(),
	        A = ha(),
	        B = function B(a, b) {
	      return a === b && (l = !0), 0;
	    },
	        C = {}.hasOwnProperty,
	        D = [],
	        E = D.pop,
	        F = D.push,
	        G = D.push,
	        H = D.slice,
	        I = function I(a, b) {
	      for (var c = 0, d = a.length; c < d; c++) {
	        if (a[c] === b) return c;
	      }return -1;
	    },
	        J = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	        K = "[\\x20\\t\\r\\n\\f]",
	        L = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
	        M = "\\[" + K + "*(" + L + ")(?:" + K + "*([*^$|!~]?=)" + K + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + L + "))|)" + K + "*\\]",
	        N = ":(" + L + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + M + ")*)|.*)\\)|)",
	        O = new RegExp(K + "+", "g"),
	        P = new RegExp("^" + K + "+|((?:^|[^\\\\])(?:\\\\.)*)" + K + "+$", "g"),
	        Q = new RegExp("^" + K + "*," + K + "*"),
	        R = new RegExp("^" + K + "*([>+~]|" + K + ")" + K + "*"),
	        S = new RegExp("=" + K + "*([^\\]'\"]*?)" + K + "*\\]", "g"),
	        T = new RegExp(N),
	        U = new RegExp("^" + L + "$"),
	        V = { ID: new RegExp("^#(" + L + ")"), CLASS: new RegExp("^\\.(" + L + ")"), TAG: new RegExp("^(" + L + "|[*])"), ATTR: new RegExp("^" + M), PSEUDO: new RegExp("^" + N), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + K + "*(even|odd|(([+-]|)(\\d*)n|)" + K + "*(?:([+-]|)" + K + "*(\\d+)|))" + K + "*\\)|)", "i"), bool: new RegExp("^(?:" + J + ")$", "i"), needsContext: new RegExp("^" + K + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + K + "*((?:-\\d)?\\d*)" + K + "*\\)|)(?=[^-]|$)", "i") },
	        W = /^(?:input|select|textarea|button)$/i,
	        X = /^h\d$/i,
	        Y = /^[^{]+\{\s*\[native \w/,
	        Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	        $ = /[+~]/,
	        _ = new RegExp("\\\\([\\da-f]{1,6}" + K + "?|(" + K + ")|.)", "ig"),
	        aa = function aa(a, b, c) {
	      var d = "0x" + b - 65536;return d !== d || c ? b : d < 0 ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);
	    },
	        ba = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	        ca = function ca(a, b) {
	      return b ? "\0" === a ? "\uFFFD" : a.slice(0, -1) + "\\" + a.charCodeAt(a.length - 1).toString(16) + " " : "\\" + a;
	    },
	        da = function da() {
	      m();
	    },
	        ea = ta(function (a) {
	      return a.disabled === !0 && ("form" in a || "label" in a);
	    }, { dir: "parentNode", next: "legend" });try {
	      G.apply(D = H.call(v.childNodes), v.childNodes), D[v.childNodes.length].nodeType;
	    } catch (fa) {
	      G = { apply: D.length ? function (a, b) {
	          F.apply(a, H.call(b));
	        } : function (a, b) {
	          var c = a.length,
	              d = 0;while (a[c++] = b[d++]) {}a.length = c - 1;
	        } };
	    }function ga(a, b, d, e) {
	      var f,
	          h,
	          j,
	          k,
	          l,
	          o,
	          r,
	          s = b && b.ownerDocument,
	          w = b ? b.nodeType : 9;if (d = d || [], "string" != typeof a || !a || 1 !== w && 9 !== w && 11 !== w) return d;if (!e && ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, p)) {
	        if (11 !== w && (l = Z.exec(a))) if (f = l[1]) {
	          if (9 === w) {
	            if (!(j = b.getElementById(f))) return d;if (j.id === f) return d.push(j), d;
	          } else if (s && (j = s.getElementById(f)) && t(b, j) && j.id === f) return d.push(j), d;
	        } else {
	          if (l[2]) return G.apply(d, b.getElementsByTagName(a)), d;if ((f = l[3]) && c.getElementsByClassName && b.getElementsByClassName) return G.apply(d, b.getElementsByClassName(f)), d;
	        }if (c.qsa && !A[a + " "] && (!q || !q.test(a))) {
	          if (1 !== w) s = b, r = a;else if ("object" !== b.nodeName.toLowerCase()) {
	            (k = b.getAttribute("id")) ? k = k.replace(ba, ca) : b.setAttribute("id", k = u), o = g(a), h = o.length;while (h--) {
	              o[h] = "#" + k + " " + sa(o[h]);
	            }r = o.join(","), s = $.test(a) && qa(b.parentNode) || b;
	          }if (r) try {
	            return G.apply(d, s.querySelectorAll(r)), d;
	          } catch (x) {} finally {
	            k === u && b.removeAttribute("id");
	          }
	        }
	      }return i(a.replace(P, "$1"), b, d, e);
	    }function ha() {
	      var a = [];function b(c, e) {
	        return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e;
	      }return b;
	    }function ia(a) {
	      return a[u] = !0, a;
	    }function ja(a) {
	      var b = n.createElement("fieldset");try {
	        return !!a(b);
	      } catch (c) {
	        return !1;
	      } finally {
	        b.parentNode && b.parentNode.removeChild(b), b = null;
	      }
	    }function ka(a, b) {
	      var c = a.split("|"),
	          e = c.length;while (e--) {
	        d.attrHandle[c[e]] = b;
	      }
	    }function la(a, b) {
	      var c = b && a,
	          d = c && 1 === a.nodeType && 1 === b.nodeType && a.sourceIndex - b.sourceIndex;if (d) return d;if (c) while (c = c.nextSibling) {
	        if (c === b) return -1;
	      }return a ? 1 : -1;
	    }function ma(a) {
	      return function (b) {
	        var c = b.nodeName.toLowerCase();return "input" === c && b.type === a;
	      };
	    }function na(a) {
	      return function (b) {
	        var c = b.nodeName.toLowerCase();return ("input" === c || "button" === c) && b.type === a;
	      };
	    }function oa(a) {
	      return function (b) {
	        return "form" in b ? b.parentNode && b.disabled === !1 ? "label" in b ? "label" in b.parentNode ? b.parentNode.disabled === a : b.disabled === a : b.isDisabled === a || b.isDisabled !== !a && ea(b) === a : b.disabled === a : "label" in b && b.disabled === a;
	      };
	    }function pa(a) {
	      return ia(function (b) {
	        return b = +b, ia(function (c, d) {
	          var e,
	              f = a([], c.length, b),
	              g = f.length;while (g--) {
	            c[e = f[g]] && (c[e] = !(d[e] = c[e]));
	          }
	        });
	      });
	    }function qa(a) {
	      return a && "undefined" != typeof a.getElementsByTagName && a;
	    }c = ga.support = {}, f = ga.isXML = function (a) {
	      var b = a && (a.ownerDocument || a).documentElement;return !!b && "HTML" !== b.nodeName;
	    }, m = ga.setDocument = function (a) {
	      var b,
	          e,
	          g = a ? a.ownerDocument || a : v;return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = n.documentElement, p = !f(n), v !== n && (e = n.defaultView) && e.top !== e && (e.addEventListener ? e.addEventListener("unload", da, !1) : e.attachEvent && e.attachEvent("onunload", da)), c.attributes = ja(function (a) {
	        return a.className = "i", !a.getAttribute("className");
	      }), c.getElementsByTagName = ja(function (a) {
	        return a.appendChild(n.createComment("")), !a.getElementsByTagName("*").length;
	      }), c.getElementsByClassName = Y.test(n.getElementsByClassName), c.getById = ja(function (a) {
	        return o.appendChild(a).id = u, !n.getElementsByName || !n.getElementsByName(u).length;
	      }), c.getById ? (d.filter.ID = function (a) {
	        var b = a.replace(_, aa);return function (a) {
	          return a.getAttribute("id") === b;
	        };
	      }, d.find.ID = function (a, b) {
	        if ("undefined" != typeof b.getElementById && p) {
	          var c = b.getElementById(a);return c ? [c] : [];
	        }
	      }) : (d.filter.ID = function (a) {
	        var b = a.replace(_, aa);return function (a) {
	          var c = "undefined" != typeof a.getAttributeNode && a.getAttributeNode("id");return c && c.value === b;
	        };
	      }, d.find.ID = function (a, b) {
	        if ("undefined" != typeof b.getElementById && p) {
	          var c,
	              d,
	              e,
	              f = b.getElementById(a);if (f) {
	            if (c = f.getAttributeNode("id"), c && c.value === a) return [f];e = b.getElementsByName(a), d = 0;while (f = e[d++]) {
	              if (c = f.getAttributeNode("id"), c && c.value === a) return [f];
	            }
	          }return [];
	        }
	      }), d.find.TAG = c.getElementsByTagName ? function (a, b) {
	        return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0;
	      } : function (a, b) {
	        var c,
	            d = [],
	            e = 0,
	            f = b.getElementsByTagName(a);if ("*" === a) {
	          while (c = f[e++]) {
	            1 === c.nodeType && d.push(c);
	          }return d;
	        }return f;
	      }, d.find.CLASS = c.getElementsByClassName && function (a, b) {
	        if ("undefined" != typeof b.getElementsByClassName && p) return b.getElementsByClassName(a);
	      }, r = [], q = [], (c.qsa = Y.test(n.querySelectorAll)) && (ja(function (a) {
	        o.appendChild(a).innerHTML = "<a id='" + u + "'></a><select id='" + u + "-\r\\' msallowcapture=''><option selected=''></option></select>", a.querySelectorAll("[msallowcapture^='']").length && q.push("[*^$]=" + K + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + K + "*(?:value|" + J + ")"), a.querySelectorAll("[id~=" + u + "-]").length || q.push("~="), a.querySelectorAll(":checked").length || q.push(":checked"), a.querySelectorAll("a#" + u + "+*").length || q.push(".#.+[+~]");
	      }), ja(function (a) {
	        a.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var b = n.createElement("input");b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + K + "*[*^$|!~]?="), 2 !== a.querySelectorAll(":enabled").length && q.push(":enabled", ":disabled"), o.appendChild(a).disabled = !0, 2 !== a.querySelectorAll(":disabled").length && q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:");
	      })), (c.matchesSelector = Y.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ja(function (a) {
	        c.disconnectedMatch = s.call(a, "*"), s.call(a, "[s!='']:x"), r.push("!=", N);
	      }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = Y.test(o.compareDocumentPosition), t = b || Y.test(o.contains) ? function (a, b) {
	        var c = 9 === a.nodeType ? a.documentElement : a,
	            d = b && b.parentNode;return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
	      } : function (a, b) {
	        if (b) while (b = b.parentNode) {
	          if (b === a) return !0;
	        }return !1;
	      }, B = b ? function (a, b) {
	        if (a === b) return l = !0, 0;var d = !a.compareDocumentPosition - !b.compareDocumentPosition;return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === n || a.ownerDocument === v && t(v, a) ? -1 : b === n || b.ownerDocument === v && t(v, b) ? 1 : k ? I(k, a) - I(k, b) : 0 : 4 & d ? -1 : 1);
	      } : function (a, b) {
	        if (a === b) return l = !0, 0;var c,
	            d = 0,
	            e = a.parentNode,
	            f = b.parentNode,
	            g = [a],
	            h = [b];if (!e || !f) return a === n ? -1 : b === n ? 1 : e ? -1 : f ? 1 : k ? I(k, a) - I(k, b) : 0;if (e === f) return la(a, b);c = a;while (c = c.parentNode) {
	          g.unshift(c);
	        }c = b;while (c = c.parentNode) {
	          h.unshift(c);
	        }while (g[d] === h[d]) {
	          d++;
	        }return d ? la(g[d], h[d]) : g[d] === v ? -1 : h[d] === v ? 1 : 0;
	      }, n) : n;
	    }, ga.matches = function (a, b) {
	      return ga(a, null, null, b);
	    }, ga.matchesSelector = function (a, b) {
	      if ((a.ownerDocument || a) !== n && m(a), b = b.replace(S, "='$1']"), c.matchesSelector && p && !A[b + " "] && (!r || !r.test(b)) && (!q || !q.test(b))) try {
	        var d = s.call(a, b);if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;
	      } catch (e) {}return ga(b, n, null, [a]).length > 0;
	    }, ga.contains = function (a, b) {
	      return (a.ownerDocument || a) !== n && m(a), t(a, b);
	    }, ga.attr = function (a, b) {
	      (a.ownerDocument || a) !== n && m(a);var e = d.attrHandle[b.toLowerCase()],
	          f = e && C.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;
	    }, ga.escape = function (a) {
	      return (a + "").replace(ba, ca);
	    }, ga.error = function (a) {
	      throw new Error("Syntax error, unrecognized expression: " + a);
	    }, ga.uniqueSort = function (a) {
	      var b,
	          d = [],
	          e = 0,
	          f = 0;if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
	        while (b = a[f++]) {
	          b === a[f] && (e = d.push(f));
	        }while (e--) {
	          a.splice(d[e], 1);
	        }
	      }return k = null, a;
	    }, e = ga.getText = function (a) {
	      var b,
	          c = "",
	          d = 0,
	          f = a.nodeType;if (f) {
	        if (1 === f || 9 === f || 11 === f) {
	          if ("string" == typeof a.textContent) return a.textContent;for (a = a.firstChild; a; a = a.nextSibling) {
	            c += e(a);
	          }
	        } else if (3 === f || 4 === f) return a.nodeValue;
	      } else while (b = a[d++]) {
	        c += e(b);
	      }return c;
	    }, d = ga.selectors = { cacheLength: 50, createPseudo: ia, match: V, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function ATTR(a) {
	          return a[1] = a[1].replace(_, aa), a[3] = (a[3] || a[4] || a[5] || "").replace(_, aa), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);
	        }, CHILD: function CHILD(a) {
	          return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || ga.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && ga.error(a[0]), a;
	        }, PSEUDO: function PSEUDO(a) {
	          var b,
	              c = !a[6] && a[2];return V.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && T.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));
	        } }, filter: { TAG: function TAG(a) {
	          var b = a.replace(_, aa).toLowerCase();return "*" === a ? function () {
	            return !0;
	          } : function (a) {
	            return a.nodeName && a.nodeName.toLowerCase() === b;
	          };
	        }, CLASS: function CLASS(a) {
	          var b = y[a + " "];return b || (b = new RegExp("(^|" + K + ")" + a + "(" + K + "|$)")) && y(a, function (a) {
	            return b.test("string" == typeof a.className && a.className || "undefined" != typeof a.getAttribute && a.getAttribute("class") || "");
	          });
	        }, ATTR: function ATTR(a, b, c) {
	          return function (d) {
	            var e = ga.attr(d, a);return null == e ? "!=" === b : !b || (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e.replace(O, " ") + " ").indexOf(c) > -1 : "|=" === b && (e === c || e.slice(0, c.length + 1) === c + "-"));
	          };
	        }, CHILD: function CHILD(a, b, c, d, e) {
	          var f = "nth" !== a.slice(0, 3),
	              g = "last" !== a.slice(-4),
	              h = "of-type" === b;return 1 === d && 0 === e ? function (a) {
	            return !!a.parentNode;
	          } : function (b, c, i) {
	            var j,
	                k,
	                l,
	                m,
	                n,
	                o,
	                p = f !== g ? "nextSibling" : "previousSibling",
	                q = b.parentNode,
	                r = h && b.nodeName.toLowerCase(),
	                s = !i && !h,
	                t = !1;if (q) {
	              if (f) {
	                while (p) {
	                  m = b;while (m = m[p]) {
	                    if (h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) return !1;
	                  }o = p = "only" === a && !o && "nextSibling";
	                }return !0;
	              }if (o = [g ? q.firstChild : q.lastChild], g && s) {
	                m = q, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n && j[2], m = n && q.childNodes[n];while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) {
	                  if (1 === m.nodeType && ++t && m === b) {
	                    k[a] = [w, n, t];break;
	                  }
	                }
	              } else if (s && (m = b, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n), t === !1) while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) {
	                if ((h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) && ++t && (s && (l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), k[a] = [w, t]), m === b)) break;
	              }return t -= e, t === d || t % d === 0 && t / d >= 0;
	            }
	          };
	        }, PSEUDO: function PSEUDO(a, b) {
	          var c,
	              e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || ga.error("unsupported pseudo: " + a);return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ia(function (a, c) {
	            var d,
	                f = e(a, b),
	                g = f.length;while (g--) {
	              d = I(a, f[g]), a[d] = !(c[d] = f[g]);
	            }
	          }) : function (a) {
	            return e(a, 0, c);
	          }) : e;
	        } }, pseudos: { not: ia(function (a) {
	          var b = [],
	              c = [],
	              d = h(a.replace(P, "$1"));return d[u] ? ia(function (a, b, c, e) {
	            var f,
	                g = d(a, null, e, []),
	                h = a.length;while (h--) {
	              (f = g[h]) && (a[h] = !(b[h] = f));
	            }
	          }) : function (a, e, f) {
	            return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop();
	          };
	        }), has: ia(function (a) {
	          return function (b) {
	            return ga(a, b).length > 0;
	          };
	        }), contains: ia(function (a) {
	          return a = a.replace(_, aa), function (b) {
	            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
	          };
	        }), lang: ia(function (a) {
	          return U.test(a || "") || ga.error("unsupported lang: " + a), a = a.replace(_, aa).toLowerCase(), function (b) {
	            var c;do {
	              if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-");
	            } while ((b = b.parentNode) && 1 === b.nodeType);return !1;
	          };
	        }), target: function target(b) {
	          var c = a.location && a.location.hash;return c && c.slice(1) === b.id;
	        }, root: function root(a) {
	          return a === o;
	        }, focus: function focus(a) {
	          return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
	        }, enabled: oa(!1), disabled: oa(!0), checked: function checked(a) {
	          var b = a.nodeName.toLowerCase();return "input" === b && !!a.checked || "option" === b && !!a.selected;
	        }, selected: function selected(a) {
	          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
	        }, empty: function empty(a) {
	          for (a = a.firstChild; a; a = a.nextSibling) {
	            if (a.nodeType < 6) return !1;
	          }return !0;
	        }, parent: function parent(a) {
	          return !d.pseudos.empty(a);
	        }, header: function header(a) {
	          return X.test(a.nodeName);
	        }, input: function input(a) {
	          return W.test(a.nodeName);
	        }, button: function button(a) {
	          var b = a.nodeName.toLowerCase();return "input" === b && "button" === a.type || "button" === b;
	        }, text: function text(a) {
	          var b;return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());
	        }, first: pa(function () {
	          return [0];
	        }), last: pa(function (a, b) {
	          return [b - 1];
	        }), eq: pa(function (a, b, c) {
	          return [c < 0 ? c + b : c];
	        }), even: pa(function (a, b) {
	          for (var c = 0; c < b; c += 2) {
	            a.push(c);
	          }return a;
	        }), odd: pa(function (a, b) {
	          for (var c = 1; c < b; c += 2) {
	            a.push(c);
	          }return a;
	        }), lt: pa(function (a, b, c) {
	          for (var d = c < 0 ? c + b : c; --d >= 0;) {
	            a.push(d);
	          }return a;
	        }), gt: pa(function (a, b, c) {
	          for (var d = c < 0 ? c + b : c; ++d < b;) {
	            a.push(d);
	          }return a;
	        }) } }, d.pseudos.nth = d.pseudos.eq;for (b in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) {
	      d.pseudos[b] = ma(b);
	    }for (b in { submit: !0, reset: !0 }) {
	      d.pseudos[b] = na(b);
	    }function ra() {}ra.prototype = d.filters = d.pseudos, d.setFilters = new ra(), g = ga.tokenize = function (a, b) {
	      var c,
	          e,
	          f,
	          g,
	          h,
	          i,
	          j,
	          k = z[a + " "];if (k) return b ? 0 : k.slice(0);h = a, i = [], j = d.preFilter;while (h) {
	        c && !(e = Q.exec(h)) || (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = R.exec(h)) && (c = e.shift(), f.push({ value: c, type: e[0].replace(P, " ") }), h = h.slice(c.length));for (g in d.filter) {
	          !(e = V[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({ value: c, type: g, matches: e }), h = h.slice(c.length));
	        }if (!c) break;
	      }return b ? h.length : h ? ga.error(a) : z(a, i).slice(0);
	    };function sa(a) {
	      for (var b = 0, c = a.length, d = ""; b < c; b++) {
	        d += a[b].value;
	      }return d;
	    }function ta(a, b, c) {
	      var d = b.dir,
	          e = b.next,
	          f = e || d,
	          g = c && "parentNode" === f,
	          h = x++;return b.first ? function (b, c, e) {
	        while (b = b[d]) {
	          if (1 === b.nodeType || g) return a(b, c, e);
	        }return !1;
	      } : function (b, c, i) {
	        var j,
	            k,
	            l,
	            m = [w, h];if (i) {
	          while (b = b[d]) {
	            if ((1 === b.nodeType || g) && a(b, c, i)) return !0;
	          }
	        } else while (b = b[d]) {
	          if (1 === b.nodeType || g) if (l = b[u] || (b[u] = {}), k = l[b.uniqueID] || (l[b.uniqueID] = {}), e && e === b.nodeName.toLowerCase()) b = b[d] || b;else {
	            if ((j = k[f]) && j[0] === w && j[1] === h) return m[2] = j[2];if (k[f] = m, m[2] = a(b, c, i)) return !0;
	          }
	        }return !1;
	      };
	    }function ua(a) {
	      return a.length > 1 ? function (b, c, d) {
	        var e = a.length;while (e--) {
	          if (!a[e](b, c, d)) return !1;
	        }return !0;
	      } : a[0];
	    }function va(a, b, c) {
	      for (var d = 0, e = b.length; d < e; d++) {
	        ga(a, b[d], c);
	      }return c;
	    }function wa(a, b, c, d, e) {
	      for (var f, g = [], h = 0, i = a.length, j = null != b; h < i; h++) {
	        (f = a[h]) && (c && !c(f, d, e) || (g.push(f), j && b.push(h)));
	      }return g;
	    }function xa(a, b, c, d, e, f) {
	      return d && !d[u] && (d = xa(d)), e && !e[u] && (e = xa(e, f)), ia(function (f, g, h, i) {
	        var j,
	            k,
	            l,
	            m = [],
	            n = [],
	            o = g.length,
	            p = f || va(b || "*", h.nodeType ? [h] : h, []),
	            q = !a || !f && b ? p : wa(p, m, a, h, i),
	            r = c ? e || (f ? a : o || d) ? [] : g : q;if (c && c(q, r, h, i), d) {
	          j = wa(r, n), d(j, [], h, i), k = j.length;while (k--) {
	            (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
	          }
	        }if (f) {
	          if (e || a) {
	            if (e) {
	              j = [], k = r.length;while (k--) {
	                (l = r[k]) && j.push(q[k] = l);
	              }e(null, r = [], j, i);
	            }k = r.length;while (k--) {
	              (l = r[k]) && (j = e ? I(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));
	            }
	          }
	        } else r = wa(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : G.apply(g, r);
	      });
	    }function ya(a) {
	      for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = ta(function (a) {
	        return a === b;
	      }, h, !0), l = ta(function (a) {
	        return I(b, a) > -1;
	      }, h, !0), m = [function (a, c, d) {
	        var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));return b = null, e;
	      }]; i < f; i++) {
	        if (c = d.relative[a[i].type]) m = [ta(ua(m), c)];else {
	          if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
	            for (e = ++i; e < f; e++) {
	              if (d.relative[a[e].type]) break;
	            }return xa(i > 1 && ua(m), i > 1 && sa(a.slice(0, i - 1).concat({ value: " " === a[i - 2].type ? "*" : "" })).replace(P, "$1"), c, i < e && ya(a.slice(i, e)), e < f && ya(a = a.slice(e)), e < f && sa(a));
	          }m.push(c);
	        }
	      }return ua(m);
	    }function za(a, b) {
	      var c = b.length > 0,
	          e = a.length > 0,
	          f = function f(_f, g, h, i, k) {
	        var l,
	            o,
	            q,
	            r = 0,
	            s = "0",
	            t = _f && [],
	            u = [],
	            v = j,
	            x = _f || e && d.find.TAG("*", k),
	            y = w += null == v ? 1 : Math.random() || .1,
	            z = x.length;for (k && (j = g === n || g || k); s !== z && null != (l = x[s]); s++) {
	          if (e && l) {
	            o = 0, g || l.ownerDocument === n || (m(l), h = !p);while (q = a[o++]) {
	              if (q(l, g || n, h)) {
	                i.push(l);break;
	              }
	            }k && (w = y);
	          }c && ((l = !q && l) && r--, _f && t.push(l));
	        }if (r += s, c && s !== r) {
	          o = 0;while (q = b[o++]) {
	            q(t, u, g, h);
	          }if (_f) {
	            if (r > 0) while (s--) {
	              t[s] || u[s] || (u[s] = E.call(i));
	            }u = wa(u);
	          }G.apply(i, u), k && !_f && u.length > 0 && r + b.length > 1 && ga.uniqueSort(i);
	        }return k && (w = y, j = v), t;
	      };return c ? ia(f) : f;
	    }return h = ga.compile = function (a, b) {
	      var c,
	          d = [],
	          e = [],
	          f = A[a + " "];if (!f) {
	        b || (b = g(a)), c = b.length;while (c--) {
	          f = ya(b[c]), f[u] ? d.push(f) : e.push(f);
	        }f = A(a, za(e, d)), f.selector = a;
	      }return f;
	    }, i = ga.select = function (a, b, c, e) {
	      var f,
	          i,
	          j,
	          k,
	          l,
	          m = "function" == typeof a && a,
	          n = !e && g(a = m.selector || a);if (c = c || [], 1 === n.length) {
	        if (i = n[0] = n[0].slice(0), i.length > 2 && "ID" === (j = i[0]).type && 9 === b.nodeType && p && d.relative[i[1].type]) {
	          if (b = (d.find.ID(j.matches[0].replace(_, aa), b) || [])[0], !b) return c;m && (b = b.parentNode), a = a.slice(i.shift().value.length);
	        }f = V.needsContext.test(a) ? 0 : i.length;while (f--) {
	          if (j = i[f], d.relative[k = j.type]) break;if ((l = d.find[k]) && (e = l(j.matches[0].replace(_, aa), $.test(i[0].type) && qa(b.parentNode) || b))) {
	            if (i.splice(f, 1), a = e.length && sa(i), !a) return G.apply(c, e), c;break;
	          }
	        }
	      }return (m || h(a, n))(e, b, !p, c, !b || $.test(a) && qa(b.parentNode) || b), c;
	    }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ja(function (a) {
	      return 1 & a.compareDocumentPosition(n.createElement("fieldset"));
	    }), ja(function (a) {
	      return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href");
	    }) || ka("type|href|height|width", function (a, b, c) {
	      if (!c) return a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
	    }), c.attributes && ja(function (a) {
	      return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");
	    }) || ka("value", function (a, b, c) {
	      if (!c && "input" === a.nodeName.toLowerCase()) return a.defaultValue;
	    }), ja(function (a) {
	      return null == a.getAttribute("disabled");
	    }) || ka(J, function (a, b, c) {
	      var d;if (!c) return a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
	    }), ga;
	  }(a);r.find = x, r.expr = x.selectors, r.expr[":"] = r.expr.pseudos, r.uniqueSort = r.unique = x.uniqueSort, r.text = x.getText, r.isXMLDoc = x.isXML, r.contains = x.contains, r.escapeSelector = x.escape;var y = function y(a, b, c) {
	    var d = [],
	        e = void 0 !== c;while ((a = a[b]) && 9 !== a.nodeType) {
	      if (1 === a.nodeType) {
	        if (e && r(a).is(c)) break;d.push(a);
	      }
	    }return d;
	  },
	      z = function z(a, b) {
	    for (var c = []; a; a = a.nextSibling) {
	      1 === a.nodeType && a !== b && c.push(a);
	    }return c;
	  },
	      A = r.expr.match.needsContext,
	      B = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,
	      C = /^.[^:#\[\.,]*$/;function D(a, b, c) {
	    return r.isFunction(b) ? r.grep(a, function (a, d) {
	      return !!b.call(a, d, a) !== c;
	    }) : b.nodeType ? r.grep(a, function (a) {
	      return a === b !== c;
	    }) : "string" != typeof b ? r.grep(a, function (a) {
	      return i.call(b, a) > -1 !== c;
	    }) : C.test(b) ? r.filter(b, a, c) : (b = r.filter(b, a), r.grep(a, function (a) {
	      return i.call(b, a) > -1 !== c && 1 === a.nodeType;
	    }));
	  }r.filter = function (a, b, c) {
	    var d = b[0];return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? r.find.matchesSelector(d, a) ? [d] : [] : r.find.matches(a, r.grep(b, function (a) {
	      return 1 === a.nodeType;
	    }));
	  }, r.fn.extend({ find: function find(a) {
	      var b,
	          c,
	          d = this.length,
	          e = this;if ("string" != typeof a) return this.pushStack(r(a).filter(function () {
	        for (b = 0; b < d; b++) {
	          if (r.contains(e[b], this)) return !0;
	        }
	      }));for (c = this.pushStack([]), b = 0; b < d; b++) {
	        r.find(a, e[b], c);
	      }return d > 1 ? r.uniqueSort(c) : c;
	    }, filter: function filter(a) {
	      return this.pushStack(D(this, a || [], !1));
	    }, not: function not(a) {
	      return this.pushStack(D(this, a || [], !0));
	    }, is: function is(a) {
	      return !!D(this, "string" == typeof a && A.test(a) ? r(a) : a || [], !1).length;
	    } });var E,
	      F = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
	      G = r.fn.init = function (a, b, c) {
	    var e, f;if (!a) return this;if (c = c || E, "string" == typeof a) {
	      if (e = "<" === a[0] && ">" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : F.exec(a), !e || !e[1] && b) return !b || b.jquery ? (b || c).find(a) : this.constructor(b).find(a);if (e[1]) {
	        if (b = b instanceof r ? b[0] : b, r.merge(this, r.parseHTML(e[1], b && b.nodeType ? b.ownerDocument || b : d, !0)), B.test(e[1]) && r.isPlainObject(b)) for (e in b) {
	          r.isFunction(this[e]) ? this[e](b[e]) : this.attr(e, b[e]);
	        }return this;
	      }return f = d.getElementById(e[2]), f && (this[0] = f, this.length = 1), this;
	    }return a.nodeType ? (this[0] = a, this.length = 1, this) : r.isFunction(a) ? void 0 !== c.ready ? c.ready(a) : a(r) : r.makeArray(a, this);
	  };G.prototype = r.fn, E = r(d);var H = /^(?:parents|prev(?:Until|All))/,
	      I = { children: !0, contents: !0, next: !0, prev: !0 };r.fn.extend({ has: function has(a) {
	      var b = r(a, this),
	          c = b.length;return this.filter(function () {
	        for (var a = 0; a < c; a++) {
	          if (r.contains(this, b[a])) return !0;
	        }
	      });
	    }, closest: function closest(a, b) {
	      var c,
	          d = 0,
	          e = this.length,
	          f = [],
	          g = "string" != typeof a && r(a);if (!A.test(a)) for (; d < e; d++) {
	        for (c = this[d]; c && c !== b; c = c.parentNode) {
	          if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && r.find.matchesSelector(c, a))) {
	            f.push(c);break;
	          }
	        }
	      }return this.pushStack(f.length > 1 ? r.uniqueSort(f) : f);
	    }, index: function index(a) {
	      return a ? "string" == typeof a ? i.call(r(a), this[0]) : i.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
	    }, add: function add(a, b) {
	      return this.pushStack(r.uniqueSort(r.merge(this.get(), r(a, b))));
	    }, addBack: function addBack(a) {
	      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
	    } });function J(a, b) {
	    while ((a = a[b]) && 1 !== a.nodeType) {}return a;
	  }r.each({ parent: function parent(a) {
	      var b = a.parentNode;return b && 11 !== b.nodeType ? b : null;
	    }, parents: function parents(a) {
	      return y(a, "parentNode");
	    }, parentsUntil: function parentsUntil(a, b, c) {
	      return y(a, "parentNode", c);
	    }, next: function next(a) {
	      return J(a, "nextSibling");
	    }, prev: function prev(a) {
	      return J(a, "previousSibling");
	    }, nextAll: function nextAll(a) {
	      return y(a, "nextSibling");
	    }, prevAll: function prevAll(a) {
	      return y(a, "previousSibling");
	    }, nextUntil: function nextUntil(a, b, c) {
	      return y(a, "nextSibling", c);
	    }, prevUntil: function prevUntil(a, b, c) {
	      return y(a, "previousSibling", c);
	    }, siblings: function siblings(a) {
	      return z((a.parentNode || {}).firstChild, a);
	    }, children: function children(a) {
	      return z(a.firstChild);
	    }, contents: function contents(a) {
	      return a.contentDocument || r.merge([], a.childNodes);
	    } }, function (a, b) {
	    r.fn[a] = function (c, d) {
	      var e = r.map(this, b, c);return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = r.filter(d, e)), this.length > 1 && (I[a] || r.uniqueSort(e), H.test(a) && e.reverse()), this.pushStack(e);
	    };
	  });var K = /[^\x20\t\r\n\f]+/g;function L(a) {
	    var b = {};return r.each(a.match(K) || [], function (a, c) {
	      b[c] = !0;
	    }), b;
	  }r.Callbacks = function (a) {
	    a = "string" == typeof a ? L(a) : r.extend({}, a);var b,
	        c,
	        d,
	        e,
	        f = [],
	        g = [],
	        h = -1,
	        i = function i() {
	      for (e = a.once, d = b = !0; g.length; h = -1) {
	        c = g.shift();while (++h < f.length) {
	          f[h].apply(c[0], c[1]) === !1 && a.stopOnFalse && (h = f.length, c = !1);
	        }
	      }a.memory || (c = !1), b = !1, e && (f = c ? [] : "");
	    },
	        j = { add: function add() {
	        return f && (c && !b && (h = f.length - 1, g.push(c)), function d(b) {
	          r.each(b, function (b, c) {
	            r.isFunction(c) ? a.unique && j.has(c) || f.push(c) : c && c.length && "string" !== r.type(c) && d(c);
	          });
	        }(arguments), c && !b && i()), this;
	      }, remove: function remove() {
	        return r.each(arguments, function (a, b) {
	          var c;while ((c = r.inArray(b, f, c)) > -1) {
	            f.splice(c, 1), c <= h && h--;
	          }
	        }), this;
	      }, has: function has(a) {
	        return a ? r.inArray(a, f) > -1 : f.length > 0;
	      }, empty: function empty() {
	        return f && (f = []), this;
	      }, disable: function disable() {
	        return e = g = [], f = c = "", this;
	      }, disabled: function disabled() {
	        return !f;
	      }, lock: function lock() {
	        return e = g = [], c || b || (f = c = ""), this;
	      }, locked: function locked() {
	        return !!e;
	      }, fireWith: function fireWith(a, c) {
	        return e || (c = c || [], c = [a, c.slice ? c.slice() : c], g.push(c), b || i()), this;
	      }, fire: function fire() {
	        return j.fireWith(this, arguments), this;
	      }, fired: function fired() {
	        return !!d;
	      } };return j;
	  };function M(a) {
	    return a;
	  }function N(a) {
	    throw a;
	  }function O(a, b, c) {
	    var d;try {
	      a && r.isFunction(d = a.promise) ? d.call(a).done(b).fail(c) : a && r.isFunction(d = a.then) ? d.call(a, b, c) : b.call(void 0, a);
	    } catch (a) {
	      c.call(void 0, a);
	    }
	  }r.extend({ Deferred: function Deferred(b) {
	      var c = [["notify", "progress", r.Callbacks("memory"), r.Callbacks("memory"), 2], ["resolve", "done", r.Callbacks("once memory"), r.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", r.Callbacks("once memory"), r.Callbacks("once memory"), 1, "rejected"]],
	          d = "pending",
	          e = { state: function state() {
	          return d;
	        }, always: function always() {
	          return f.done(arguments).fail(arguments), this;
	        }, "catch": function _catch(a) {
	          return e.then(null, a);
	        }, pipe: function pipe() {
	          var a = arguments;return r.Deferred(function (b) {
	            r.each(c, function (c, d) {
	              var e = r.isFunction(a[d[4]]) && a[d[4]];f[d[1]](function () {
	                var a = e && e.apply(this, arguments);a && r.isFunction(a.promise) ? a.promise().progress(b.notify).done(b.resolve).fail(b.reject) : b[d[0] + "With"](this, e ? [a] : arguments);
	              });
	            }), a = null;
	          }).promise();
	        }, then: function then(b, d, e) {
	          var f = 0;function g(b, c, d, e) {
	            return function () {
	              var h = this,
	                  i = arguments,
	                  j = function j() {
	                var a, j;if (!(b < f)) {
	                  if (a = d.apply(h, i), a === c.promise()) throw new TypeError("Thenable self-resolution");j = a && ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) || "function" == typeof a) && a.then, r.isFunction(j) ? e ? j.call(a, g(f, c, M, e), g(f, c, N, e)) : (f++, j.call(a, g(f, c, M, e), g(f, c, N, e), g(f, c, M, c.notifyWith))) : (d !== M && (h = void 0, i = [a]), (e || c.resolveWith)(h, i));
	                }
	              },
	                  k = e ? j : function () {
	                try {
	                  j();
	                } catch (a) {
	                  r.Deferred.exceptionHook && r.Deferred.exceptionHook(a, k.stackTrace), b + 1 >= f && (d !== N && (h = void 0, i = [a]), c.rejectWith(h, i));
	                }
	              };b ? k() : (r.Deferred.getStackHook && (k.stackTrace = r.Deferred.getStackHook()), a.setTimeout(k));
	            };
	          }return r.Deferred(function (a) {
	            c[0][3].add(g(0, a, r.isFunction(e) ? e : M, a.notifyWith)), c[1][3].add(g(0, a, r.isFunction(b) ? b : M)), c[2][3].add(g(0, a, r.isFunction(d) ? d : N));
	          }).promise();
	        }, promise: function promise(a) {
	          return null != a ? r.extend(a, e) : e;
	        } },
	          f = {};return r.each(c, function (a, b) {
	        var g = b[2],
	            h = b[5];e[b[1]] = g.add, h && g.add(function () {
	          d = h;
	        }, c[3 - a][2].disable, c[0][2].lock), g.add(b[3].fire), f[b[0]] = function () {
	          return f[b[0] + "With"](this === f ? void 0 : this, arguments), this;
	        }, f[b[0] + "With"] = g.fireWith;
	      }), e.promise(f), b && b.call(f, f), f;
	    }, when: function when(a) {
	      var b = arguments.length,
	          c = b,
	          d = Array(c),
	          e = f.call(arguments),
	          g = r.Deferred(),
	          h = function h(a) {
	        return function (c) {
	          d[a] = this, e[a] = arguments.length > 1 ? f.call(arguments) : c, --b || g.resolveWith(d, e);
	        };
	      };if (b <= 1 && (O(a, g.done(h(c)).resolve, g.reject), "pending" === g.state() || r.isFunction(e[c] && e[c].then))) return g.then();while (c--) {
	        O(e[c], h(c), g.reject);
	      }return g.promise();
	    } });var P = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;r.Deferred.exceptionHook = function (b, c) {
	    a.console && a.console.warn && b && P.test(b.name) && a.console.warn("jQuery.Deferred exception: " + b.message, b.stack, c);
	  }, r.readyException = function (b) {
	    a.setTimeout(function () {
	      throw b;
	    });
	  };var Q = r.Deferred();r.fn.ready = function (a) {
	    return Q.then(a)["catch"](function (a) {
	      r.readyException(a);
	    }), this;
	  }, r.extend({ isReady: !1, readyWait: 1, holdReady: function holdReady(a) {
	      a ? r.readyWait++ : r.ready(!0);
	    }, ready: function ready(a) {
	      (a === !0 ? --r.readyWait : r.isReady) || (r.isReady = !0, a !== !0 && --r.readyWait > 0 || Q.resolveWith(d, [r]));
	    } }), r.ready.then = Q.then;function R() {
	    d.removeEventListener("DOMContentLoaded", R), a.removeEventListener("load", R), r.ready();
	  }"complete" === d.readyState || "loading" !== d.readyState && !d.documentElement.doScroll ? a.setTimeout(r.ready) : (d.addEventListener("DOMContentLoaded", R), a.addEventListener("load", R));var S = function S(a, b, c, d, e, f, g) {
	    var h = 0,
	        i = a.length,
	        j = null == c;if ("object" === r.type(c)) {
	      e = !0;for (h in c) {
	        S(a, b, h, c[h], !0, f, g);
	      }
	    } else if (void 0 !== d && (e = !0, r.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function b(a, _b, c) {
	      return j.call(r(a), c);
	    })), b)) for (; h < i; h++) {
	      b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
	    }return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
	  },
	      T = function T(a) {
	    return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;
	  };function U() {
	    this.expando = r.expando + U.uid++;
	  }U.uid = 1, U.prototype = { cache: function cache(a) {
	      var b = a[this.expando];return b || (b = {}, T(a) && (a.nodeType ? a[this.expando] = b : Object.defineProperty(a, this.expando, { value: b, configurable: !0 }))), b;
	    }, set: function set(a, b, c) {
	      var d,
	          e = this.cache(a);if ("string" == typeof b) e[r.camelCase(b)] = c;else for (d in b) {
	        e[r.camelCase(d)] = b[d];
	      }return e;
	    }, get: function get(a, b) {
	      return void 0 === b ? this.cache(a) : a[this.expando] && a[this.expando][r.camelCase(b)];
	    }, access: function access(a, b, c) {
	      return void 0 === b || b && "string" == typeof b && void 0 === c ? this.get(a, b) : (this.set(a, b, c), void 0 !== c ? c : b);
	    }, remove: function remove(a, b) {
	      var c,
	          d = a[this.expando];if (void 0 !== d) {
	        if (void 0 !== b) {
	          r.isArray(b) ? b = b.map(r.camelCase) : (b = r.camelCase(b), b = b in d ? [b] : b.match(K) || []), c = b.length;while (c--) {
	            delete d[b[c]];
	          }
	        }(void 0 === b || r.isEmptyObject(d)) && (a.nodeType ? a[this.expando] = void 0 : delete a[this.expando]);
	      }
	    }, hasData: function hasData(a) {
	      var b = a[this.expando];return void 0 !== b && !r.isEmptyObject(b);
	    } };var V = new U(),
	      W = new U(),
	      X = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	      Y = /[A-Z]/g;function Z(a) {
	    return "true" === a || "false" !== a && ("null" === a ? null : a === +a + "" ? +a : X.test(a) ? JSON.parse(a) : a);
	  }function $(a, b, c) {
	    var d;if (void 0 === c && 1 === a.nodeType) if (d = "data-" + b.replace(Y, "-$&").toLowerCase(), c = a.getAttribute(d), "string" == typeof c) {
	      try {
	        c = Z(c);
	      } catch (e) {}W.set(a, b, c);
	    } else c = void 0;return c;
	  }r.extend({ hasData: function hasData(a) {
	      return W.hasData(a) || V.hasData(a);
	    }, data: function data(a, b, c) {
	      return W.access(a, b, c);
	    }, removeData: function removeData(a, b) {
	      W.remove(a, b);
	    }, _data: function _data(a, b, c) {
	      return V.access(a, b, c);
	    }, _removeData: function _removeData(a, b) {
	      V.remove(a, b);
	    } }), r.fn.extend({ data: function data(a, b) {
	      var c,
	          d,
	          e,
	          f = this[0],
	          g = f && f.attributes;if (void 0 === a) {
	        if (this.length && (e = W.get(f), 1 === f.nodeType && !V.get(f, "hasDataAttrs"))) {
	          c = g.length;while (c--) {
	            g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = r.camelCase(d.slice(5)), $(f, d, e[d])));
	          }V.set(f, "hasDataAttrs", !0);
	        }return e;
	      }return "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) ? this.each(function () {
	        W.set(this, a);
	      }) : S(this, function (b) {
	        var c;if (f && void 0 === b) {
	          if (c = W.get(f, a), void 0 !== c) return c;if (c = $(f, a), void 0 !== c) return c;
	        } else this.each(function () {
	          W.set(this, a, b);
	        });
	      }, null, b, arguments.length > 1, null, !0);
	    }, removeData: function removeData(a) {
	      return this.each(function () {
	        W.remove(this, a);
	      });
	    } }), r.extend({ queue: function queue(a, b, c) {
	      var d;if (a) return b = (b || "fx") + "queue", d = V.get(a, b), c && (!d || r.isArray(c) ? d = V.access(a, b, r.makeArray(c)) : d.push(c)), d || [];
	    }, dequeue: function dequeue(a, b) {
	      b = b || "fx";var c = r.queue(a, b),
	          d = c.length,
	          e = c.shift(),
	          f = r._queueHooks(a, b),
	          g = function g() {
	        r.dequeue(a, b);
	      };"inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
	    }, _queueHooks: function _queueHooks(a, b) {
	      var c = b + "queueHooks";return V.get(a, c) || V.access(a, c, { empty: r.Callbacks("once memory").add(function () {
	          V.remove(a, [b + "queue", c]);
	        }) });
	    } }), r.fn.extend({ queue: function queue(a, b) {
	      var c = 2;return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? r.queue(this[0], a) : void 0 === b ? this : this.each(function () {
	        var c = r.queue(this, a, b);r._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && r.dequeue(this, a);
	      });
	    }, dequeue: function dequeue(a) {
	      return this.each(function () {
	        r.dequeue(this, a);
	      });
	    }, clearQueue: function clearQueue(a) {
	      return this.queue(a || "fx", []);
	    }, promise: function promise(a, b) {
	      var c,
	          d = 1,
	          e = r.Deferred(),
	          f = this,
	          g = this.length,
	          h = function h() {
	        --d || e.resolveWith(f, [f]);
	      };"string" != typeof a && (b = a, a = void 0), a = a || "fx";while (g--) {
	        c = V.get(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));
	      }return h(), e.promise(b);
	    } });var _ = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
	      aa = new RegExp("^(?:([+-])=|)(" + _ + ")([a-z%]*)$", "i"),
	      ba = ["Top", "Right", "Bottom", "Left"],
	      ca = function ca(a, b) {
	    return a = b || a, "none" === a.style.display || "" === a.style.display && r.contains(a.ownerDocument, a) && "none" === r.css(a, "display");
	  },
	      da = function da(a, b, c, d) {
	    var e,
	        f,
	        g = {};for (f in b) {
	      g[f] = a.style[f], a.style[f] = b[f];
	    }e = c.apply(a, d || []);for (f in b) {
	      a.style[f] = g[f];
	    }return e;
	  };function ea(a, b, c, d) {
	    var e,
	        f = 1,
	        g = 20,
	        h = d ? function () {
	      return d.cur();
	    } : function () {
	      return r.css(a, b, "");
	    },
	        i = h(),
	        j = c && c[3] || (r.cssNumber[b] ? "" : "px"),
	        k = (r.cssNumber[b] || "px" !== j && +i) && aa.exec(r.css(a, b));if (k && k[3] !== j) {
	      j = j || k[3], c = c || [], k = +i || 1;do {
	        f = f || ".5", k /= f, r.style(a, b, k + j);
	      } while (f !== (f = h() / i) && 1 !== f && --g);
	    }return c && (k = +k || +i || 0, e = c[1] ? k + (c[1] + 1) * c[2] : +c[2], d && (d.unit = j, d.start = k, d.end = e)), e;
	  }var fa = {};function ga(a) {
	    var b,
	        c = a.ownerDocument,
	        d = a.nodeName,
	        e = fa[d];return e ? e : (b = c.body.appendChild(c.createElement(d)), e = r.css(b, "display"), b.parentNode.removeChild(b), "none" === e && (e = "block"), fa[d] = e, e);
	  }function ha(a, b) {
	    for (var c, d, e = [], f = 0, g = a.length; f < g; f++) {
	      d = a[f], d.style && (c = d.style.display, b ? ("none" === c && (e[f] = V.get(d, "display") || null, e[f] || (d.style.display = "")), "" === d.style.display && ca(d) && (e[f] = ga(d))) : "none" !== c && (e[f] = "none", V.set(d, "display", c)));
	    }for (f = 0; f < g; f++) {
	      null != e[f] && (a[f].style.display = e[f]);
	    }return a;
	  }r.fn.extend({ show: function show() {
	      return ha(this, !0);
	    }, hide: function hide() {
	      return ha(this);
	    }, toggle: function toggle(a) {
	      return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function () {
	        ca(this) ? r(this).show() : r(this).hide();
	      });
	    } });var ia = /^(?:checkbox|radio)$/i,
	      ja = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i,
	      ka = /^$|\/(?:java|ecma)script/i,
	      la = { option: [1, "<select multiple='multiple'>", "</select>"], thead: [1, "<table>", "</table>"], col: [2, "<table><colgroup>", "</colgroup></table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: [0, "", ""] };la.optgroup = la.option, la.tbody = la.tfoot = la.colgroup = la.caption = la.thead, la.th = la.td;function ma(a, b) {
	    var c;return c = "undefined" != typeof a.getElementsByTagName ? a.getElementsByTagName(b || "*") : "undefined" != typeof a.querySelectorAll ? a.querySelectorAll(b || "*") : [], void 0 === b || b && r.nodeName(a, b) ? r.merge([a], c) : c;
	  }function na(a, b) {
	    for (var c = 0, d = a.length; c < d; c++) {
	      V.set(a[c], "globalEval", !b || V.get(b[c], "globalEval"));
	    }
	  }var oa = /<|&#?\w+;/;function pa(a, b, c, d, e) {
	    for (var f, g, h, i, j, k, l = b.createDocumentFragment(), m = [], n = 0, o = a.length; n < o; n++) {
	      if (f = a[n], f || 0 === f) if ("object" === r.type(f)) r.merge(m, f.nodeType ? [f] : f);else if (oa.test(f)) {
	        g = g || l.appendChild(b.createElement("div")), h = (ja.exec(f) || ["", ""])[1].toLowerCase(), i = la[h] || la._default, g.innerHTML = i[1] + r.htmlPrefilter(f) + i[2], k = i[0];while (k--) {
	          g = g.lastChild;
	        }r.merge(m, g.childNodes), g = l.firstChild, g.textContent = "";
	      } else m.push(b.createTextNode(f));
	    }l.textContent = "", n = 0;while (f = m[n++]) {
	      if (d && r.inArray(f, d) > -1) e && e.push(f);else if (j = r.contains(f.ownerDocument, f), g = ma(l.appendChild(f), "script"), j && na(g), c) {
	        k = 0;while (f = g[k++]) {
	          ka.test(f.type || "") && c.push(f);
	        }
	      }
	    }return l;
	  }!function () {
	    var a = d.createDocumentFragment(),
	        b = a.appendChild(d.createElement("div")),
	        c = d.createElement("input");c.setAttribute("type", "radio"), c.setAttribute("checked", "checked"), c.setAttribute("name", "t"), b.appendChild(c), o.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = "<textarea>x</textarea>", o.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue;
	  }();var qa = d.documentElement,
	      ra = /^key/,
	      sa = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	      ta = /^([^.]*)(?:\.(.+)|)/;function ua() {
	    return !0;
	  }function va() {
	    return !1;
	  }function wa() {
	    try {
	      return d.activeElement;
	    } catch (a) {}
	  }function xa(a, b, c, d, e, f) {
	    var g, h;if ("object" == (typeof b === "undefined" ? "undefined" : _typeof(b))) {
	      "string" != typeof c && (d = d || c, c = void 0);for (h in b) {
	        xa(a, h, c, d, b[h], f);
	      }return a;
	    }if (null == d && null == e ? (e = c, d = c = void 0) : null == e && ("string" == typeof c ? (e = d, d = void 0) : (e = d, d = c, c = void 0)), e === !1) e = va;else if (!e) return a;return 1 === f && (g = e, e = function e(a) {
	      return r().off(a), g.apply(this, arguments);
	    }, e.guid = g.guid || (g.guid = r.guid++)), a.each(function () {
	      r.event.add(this, b, e, d, c);
	    });
	  }r.event = { global: {}, add: function add(a, b, c, d, e) {
	      var f,
	          g,
	          h,
	          i,
	          j,
	          k,
	          l,
	          m,
	          n,
	          o,
	          p,
	          q = V.get(a);if (q) {
	        c.handler && (f = c, c = f.handler, e = f.selector), e && r.find.matchesSelector(qa, e), c.guid || (c.guid = r.guid++), (i = q.events) || (i = q.events = {}), (g = q.handle) || (g = q.handle = function (b) {
	          return "undefined" != typeof r && r.event.triggered !== b.type ? r.event.dispatch.apply(a, arguments) : void 0;
	        }), b = (b || "").match(K) || [""], j = b.length;while (j--) {
	          h = ta.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n && (l = r.event.special[n] || {}, n = (e ? l.delegateType : l.bindType) || n, l = r.event.special[n] || {}, k = r.extend({ type: n, origType: p, data: d, handler: c, guid: c.guid, selector: e, needsContext: e && r.expr.match.needsContext.test(e), namespace: o.join(".") }, f), (m = i[n]) || (m = i[n] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, o, g) !== !1 || a.addEventListener && a.addEventListener(n, g)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), r.event.global[n] = !0);
	        }
	      }
	    }, remove: function remove(a, b, c, d, e) {
	      var f,
	          g,
	          h,
	          i,
	          j,
	          k,
	          l,
	          m,
	          n,
	          o,
	          p,
	          q = V.hasData(a) && V.get(a);if (q && (i = q.events)) {
	        b = (b || "").match(K) || [""], j = b.length;while (j--) {
	          if (h = ta.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n) {
	            l = r.event.special[n] || {}, n = (d ? l.delegateType : l.bindType) || n, m = i[n] || [], h = h[2] && new RegExp("(^|\\.)" + o.join("\\.(?:.*\\.|)") + "(\\.|$)"), g = f = m.length;while (f--) {
	              k = m[f], !e && p !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && ("**" !== d || !k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));
	            }g && !m.length && (l.teardown && l.teardown.call(a, o, q.handle) !== !1 || r.removeEvent(a, n, q.handle), delete i[n]);
	          } else for (n in i) {
	            r.event.remove(a, n + b[j], c, d, !0);
	          }
	        }r.isEmptyObject(i) && V.remove(a, "handle events");
	      }
	    }, dispatch: function dispatch(a) {
	      var b = r.event.fix(a),
	          c,
	          d,
	          e,
	          f,
	          g,
	          h,
	          i = new Array(arguments.length),
	          j = (V.get(this, "events") || {})[b.type] || [],
	          k = r.event.special[b.type] || {};for (i[0] = b, c = 1; c < arguments.length; c++) {
	        i[c] = arguments[c];
	      }if (b.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, b) !== !1) {
	        h = r.event.handlers.call(this, b, j), c = 0;while ((f = h[c++]) && !b.isPropagationStopped()) {
	          b.currentTarget = f.elem, d = 0;while ((g = f.handlers[d++]) && !b.isImmediatePropagationStopped()) {
	            b.rnamespace && !b.rnamespace.test(g.namespace) || (b.handleObj = g, b.data = g.data, e = ((r.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (b.result = e) === !1 && (b.preventDefault(), b.stopPropagation()));
	          }
	        }return k.postDispatch && k.postDispatch.call(this, b), b.result;
	      }
	    }, handlers: function handlers(a, b) {
	      var c,
	          d,
	          e,
	          f,
	          g,
	          h = [],
	          i = b.delegateCount,
	          j = a.target;if (i && j.nodeType && !("click" === a.type && a.button >= 1)) for (; j !== this; j = j.parentNode || this) {
	        if (1 === j.nodeType && ("click" !== a.type || j.disabled !== !0)) {
	          for (f = [], g = {}, c = 0; c < i; c++) {
	            d = b[c], e = d.selector + " ", void 0 === g[e] && (g[e] = d.needsContext ? r(e, this).index(j) > -1 : r.find(e, this, null, [j]).length), g[e] && f.push(d);
	          }f.length && h.push({ elem: j, handlers: f });
	        }
	      }return j = this, i < b.length && h.push({ elem: j, handlers: b.slice(i) }), h;
	    }, addProp: function addProp(a, b) {
	      Object.defineProperty(r.Event.prototype, a, { enumerable: !0, configurable: !0, get: r.isFunction(b) ? function () {
	          if (this.originalEvent) return b(this.originalEvent);
	        } : function () {
	          if (this.originalEvent) return this.originalEvent[a];
	        }, set: function set(b) {
	          Object.defineProperty(this, a, { enumerable: !0, configurable: !0, writable: !0, value: b });
	        } });
	    }, fix: function fix(a) {
	      return a[r.expando] ? a : new r.Event(a);
	    }, special: { load: { noBubble: !0 }, focus: { trigger: function trigger() {
	          if (this !== wa() && this.focus) return this.focus(), !1;
	        }, delegateType: "focusin" }, blur: { trigger: function trigger() {
	          if (this === wa() && this.blur) return this.blur(), !1;
	        }, delegateType: "focusout" }, click: { trigger: function trigger() {
	          if ("checkbox" === this.type && this.click && r.nodeName(this, "input")) return this.click(), !1;
	        }, _default: function _default(a) {
	          return r.nodeName(a.target, "a");
	        } }, beforeunload: { postDispatch: function postDispatch(a) {
	          void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
	        } } } }, r.removeEvent = function (a, b, c) {
	    a.removeEventListener && a.removeEventListener(b, c);
	  }, r.Event = function (a, b) {
	    return this instanceof r.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? ua : va, this.target = a.target && 3 === a.target.nodeType ? a.target.parentNode : a.target, this.currentTarget = a.currentTarget, this.relatedTarget = a.relatedTarget) : this.type = a, b && r.extend(this, b), this.timeStamp = a && a.timeStamp || r.now(), void (this[r.expando] = !0)) : new r.Event(a, b);
	  }, r.Event.prototype = { constructor: r.Event, isDefaultPrevented: va, isPropagationStopped: va, isImmediatePropagationStopped: va, isSimulated: !1, preventDefault: function preventDefault() {
	      var a = this.originalEvent;this.isDefaultPrevented = ua, a && !this.isSimulated && a.preventDefault();
	    }, stopPropagation: function stopPropagation() {
	      var a = this.originalEvent;this.isPropagationStopped = ua, a && !this.isSimulated && a.stopPropagation();
	    }, stopImmediatePropagation: function stopImmediatePropagation() {
	      var a = this.originalEvent;this.isImmediatePropagationStopped = ua, a && !this.isSimulated && a.stopImmediatePropagation(), this.stopPropagation();
	    } }, r.each({ altKey: !0, bubbles: !0, cancelable: !0, changedTouches: !0, ctrlKey: !0, detail: !0, eventPhase: !0, metaKey: !0, pageX: !0, pageY: !0, shiftKey: !0, view: !0, "char": !0, charCode: !0, key: !0, keyCode: !0, button: !0, buttons: !0, clientX: !0, clientY: !0, offsetX: !0, offsetY: !0, pointerId: !0, pointerType: !0, screenX: !0, screenY: !0, targetTouches: !0, toElement: !0, touches: !0, which: function which(a) {
	      var b = a.button;return null == a.which && ra.test(a.type) ? null != a.charCode ? a.charCode : a.keyCode : !a.which && void 0 !== b && sa.test(a.type) ? 1 & b ? 1 : 2 & b ? 3 : 4 & b ? 2 : 0 : a.which;
	    } }, r.event.addProp), r.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (a, b) {
	    r.event.special[a] = { delegateType: b, bindType: b, handle: function handle(a) {
	        var c,
	            d = this,
	            e = a.relatedTarget,
	            f = a.handleObj;return e && (e === d || r.contains(d, e)) || (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;
	      } };
	  }), r.fn.extend({ on: function on(a, b, c, d) {
	      return xa(this, a, b, c, d);
	    }, one: function one(a, b, c, d) {
	      return xa(this, a, b, c, d, 1);
	    }, off: function off(a, b, c) {
	      var d, e;if (a && a.preventDefault && a.handleObj) return d = a.handleObj, r(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) {
	        for (e in a) {
	          this.off(e, b, a[e]);
	        }return this;
	      }return b !== !1 && "function" != typeof b || (c = b, b = void 0), c === !1 && (c = va), this.each(function () {
	        r.event.remove(this, a, c, b);
	      });
	    } });var ya = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
	      za = /<script|<style|<link/i,
	      Aa = /checked\s*(?:[^=]|=\s*.checked.)/i,
	      Ba = /^true\/(.*)/,
	      Ca = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Da(a, b) {
	    return r.nodeName(a, "table") && r.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a : a;
	  }function Ea(a) {
	    return a.type = (null !== a.getAttribute("type")) + "/" + a.type, a;
	  }function Fa(a) {
	    var b = Ba.exec(a.type);return b ? a.type = b[1] : a.removeAttribute("type"), a;
	  }function Ga(a, b) {
	    var c, d, e, f, g, h, i, j;if (1 === b.nodeType) {
	      if (V.hasData(a) && (f = V.access(a), g = V.set(b, f), j = f.events)) {
	        delete g.handle, g.events = {};for (e in j) {
	          for (c = 0, d = j[e].length; c < d; c++) {
	            r.event.add(b, e, j[e][c]);
	          }
	        }
	      }W.hasData(a) && (h = W.access(a), i = r.extend({}, h), W.set(b, i));
	    }
	  }function Ha(a, b) {
	    var c = b.nodeName.toLowerCase();"input" === c && ia.test(a.type) ? b.checked = a.checked : "input" !== c && "textarea" !== c || (b.defaultValue = a.defaultValue);
	  }function Ia(a, b, c, d) {
	    b = g.apply([], b);var e,
	        f,
	        h,
	        i,
	        j,
	        k,
	        l = 0,
	        m = a.length,
	        n = m - 1,
	        q = b[0],
	        s = r.isFunction(q);if (s || m > 1 && "string" == typeof q && !o.checkClone && Aa.test(q)) return a.each(function (e) {
	      var f = a.eq(e);s && (b[0] = q.call(this, e, f.html())), Ia(f, b, c, d);
	    });if (m && (e = pa(b, a[0].ownerDocument, !1, a, d), f = e.firstChild, 1 === e.childNodes.length && (e = f), f || d)) {
	      for (h = r.map(ma(e, "script"), Ea), i = h.length; l < m; l++) {
	        j = e, l !== n && (j = r.clone(j, !0, !0), i && r.merge(h, ma(j, "script"))), c.call(a[l], j, l);
	      }if (i) for (k = h[h.length - 1].ownerDocument, r.map(h, Fa), l = 0; l < i; l++) {
	        j = h[l], ka.test(j.type || "") && !V.access(j, "globalEval") && r.contains(k, j) && (j.src ? r._evalUrl && r._evalUrl(j.src) : p(j.textContent.replace(Ca, ""), k));
	      }
	    }return a;
	  }function Ja(a, b, c) {
	    for (var d, e = b ? r.filter(b, a) : a, f = 0; null != (d = e[f]); f++) {
	      c || 1 !== d.nodeType || r.cleanData(ma(d)), d.parentNode && (c && r.contains(d.ownerDocument, d) && na(ma(d, "script")), d.parentNode.removeChild(d));
	    }return a;
	  }r.extend({ htmlPrefilter: function htmlPrefilter(a) {
	      return a.replace(ya, "<$1></$2>");
	    }, clone: function clone(a, b, c) {
	      var d,
	          e,
	          f,
	          g,
	          h = a.cloneNode(!0),
	          i = r.contains(a.ownerDocument, a);if (!(o.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || r.isXMLDoc(a))) for (g = ma(h), f = ma(a), d = 0, e = f.length; d < e; d++) {
	        Ha(f[d], g[d]);
	      }if (b) if (c) for (f = f || ma(a), g = g || ma(h), d = 0, e = f.length; d < e; d++) {
	        Ga(f[d], g[d]);
	      } else Ga(a, h);return g = ma(h, "script"), g.length > 0 && na(g, !i && ma(a, "script")), h;
	    }, cleanData: function cleanData(a) {
	      for (var b, c, d, e = r.event.special, f = 0; void 0 !== (c = a[f]); f++) {
	        if (T(c)) {
	          if (b = c[V.expando]) {
	            if (b.events) for (d in b.events) {
	              e[d] ? r.event.remove(c, d) : r.removeEvent(c, d, b.handle);
	            }c[V.expando] = void 0;
	          }c[W.expando] && (c[W.expando] = void 0);
	        }
	      }
	    } }), r.fn.extend({ detach: function detach(a) {
	      return Ja(this, a, !0);
	    }, remove: function remove(a) {
	      return Ja(this, a);
	    }, text: function text(a) {
	      return S(this, function (a) {
	        return void 0 === a ? r.text(this) : this.empty().each(function () {
	          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = a);
	        });
	      }, null, a, arguments.length);
	    }, append: function append() {
	      return Ia(this, arguments, function (a) {
	        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
	          var b = Da(this, a);b.appendChild(a);
	        }
	      });
	    }, prepend: function prepend() {
	      return Ia(this, arguments, function (a) {
	        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
	          var b = Da(this, a);b.insertBefore(a, b.firstChild);
	        }
	      });
	    }, before: function before() {
	      return Ia(this, arguments, function (a) {
	        this.parentNode && this.parentNode.insertBefore(a, this);
	      });
	    }, after: function after() {
	      return Ia(this, arguments, function (a) {
	        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
	      });
	    }, empty: function empty() {
	      for (var a, b = 0; null != (a = this[b]); b++) {
	        1 === a.nodeType && (r.cleanData(ma(a, !1)), a.textContent = "");
	      }return this;
	    }, clone: function clone(a, b) {
	      return a = null != a && a, b = null == b ? a : b, this.map(function () {
	        return r.clone(this, a, b);
	      });
	    }, html: function html(a) {
	      return S(this, function (a) {
	        var b = this[0] || {},
	            c = 0,
	            d = this.length;if (void 0 === a && 1 === b.nodeType) return b.innerHTML;if ("string" == typeof a && !za.test(a) && !la[(ja.exec(a) || ["", ""])[1].toLowerCase()]) {
	          a = r.htmlPrefilter(a);try {
	            for (; c < d; c++) {
	              b = this[c] || {}, 1 === b.nodeType && (r.cleanData(ma(b, !1)), b.innerHTML = a);
	            }b = 0;
	          } catch (e) {}
	        }b && this.empty().append(a);
	      }, null, a, arguments.length);
	    }, replaceWith: function replaceWith() {
	      var a = [];return Ia(this, arguments, function (b) {
	        var c = this.parentNode;r.inArray(this, a) < 0 && (r.cleanData(ma(this)), c && c.replaceChild(b, this));
	      }, a);
	    } }), r.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (a, b) {
	    r.fn[a] = function (a) {
	      for (var c, d = [], e = r(a), f = e.length - 1, g = 0; g <= f; g++) {
	        c = g === f ? this : this.clone(!0), r(e[g])[b](c), h.apply(d, c.get());
	      }return this.pushStack(d);
	    };
	  });var Ka = /^margin/,
	      La = new RegExp("^(" + _ + ")(?!px)[a-z%]+$", "i"),
	      Ma = function Ma(b) {
	    var c = b.ownerDocument.defaultView;return c && c.opener || (c = a), c.getComputedStyle(b);
	  };!function () {
	    function b() {
	      if (i) {
	        i.style.cssText = "box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%", i.innerHTML = "", qa.appendChild(h);var b = a.getComputedStyle(i);c = "1%" !== b.top, g = "2px" === b.marginLeft, e = "4px" === b.width, i.style.marginRight = "50%", f = "4px" === b.marginRight, qa.removeChild(h), i = null;
	      }
	    }var c,
	        e,
	        f,
	        g,
	        h = d.createElement("div"),
	        i = d.createElement("div");i.style && (i.style.backgroundClip = "content-box", i.cloneNode(!0).style.backgroundClip = "", o.clearCloneStyle = "content-box" === i.style.backgroundClip, h.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute", h.appendChild(i), r.extend(o, { pixelPosition: function pixelPosition() {
	        return b(), c;
	      }, boxSizingReliable: function boxSizingReliable() {
	        return b(), e;
	      }, pixelMarginRight: function pixelMarginRight() {
	        return b(), f;
	      }, reliableMarginLeft: function reliableMarginLeft() {
	        return b(), g;
	      } }));
	  }();function Na(a, b, c) {
	    var d,
	        e,
	        f,
	        g,
	        h = a.style;return c = c || Ma(a), c && (g = c.getPropertyValue(b) || c[b], "" !== g || r.contains(a.ownerDocument, a) || (g = r.style(a, b)), !o.pixelMarginRight() && La.test(g) && Ka.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + "" : g;
	  }function Oa(a, b) {
	    return { get: function get() {
	        return a() ? void delete this.get : (this.get = b).apply(this, arguments);
	      } };
	  }var Pa = /^(none|table(?!-c[ea]).+)/,
	      Qa = { position: "absolute", visibility: "hidden", display: "block" },
	      Ra = { letterSpacing: "0", fontWeight: "400" },
	      Sa = ["Webkit", "Moz", "ms"],
	      Ta = d.createElement("div").style;function Ua(a) {
	    if (a in Ta) return a;var b = a[0].toUpperCase() + a.slice(1),
	        c = Sa.length;while (c--) {
	      if (a = Sa[c] + b, a in Ta) return a;
	    }
	  }function Va(a, b, c) {
	    var d = aa.exec(b);return d ? Math.max(0, d[2] - (c || 0)) + (d[3] || "px") : b;
	  }function Wa(a, b, c, d, e) {
	    var f,
	        g = 0;for (f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0; f < 4; f += 2) {
	      "margin" === c && (g += r.css(a, c + ba[f], !0, e)), d ? ("content" === c && (g -= r.css(a, "padding" + ba[f], !0, e)), "margin" !== c && (g -= r.css(a, "border" + ba[f] + "Width", !0, e))) : (g += r.css(a, "padding" + ba[f], !0, e), "padding" !== c && (g += r.css(a, "border" + ba[f] + "Width", !0, e)));
	    }return g;
	  }function Xa(a, b, c) {
	    var d,
	        e = !0,
	        f = Ma(a),
	        g = "border-box" === r.css(a, "boxSizing", !1, f);if (a.getClientRects().length && (d = a.getBoundingClientRect()[b]), d <= 0 || null == d) {
	      if (d = Na(a, b, f), (d < 0 || null == d) && (d = a.style[b]), La.test(d)) return d;e = g && (o.boxSizingReliable() || d === a.style[b]), d = parseFloat(d) || 0;
	    }return d + Wa(a, b, c || (g ? "border" : "content"), e, f) + "px";
	  }r.extend({ cssHooks: { opacity: { get: function get(a, b) {
	          if (b) {
	            var c = Na(a, "opacity");return "" === c ? "1" : c;
	          }
	        } } }, cssNumber: { animationIterationCount: !0, columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: { "float": "cssFloat" }, style: function style(a, b, c, d) {
	      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
	        var e,
	            f,
	            g,
	            h = r.camelCase(b),
	            i = a.style;return b = r.cssProps[h] || (r.cssProps[h] = Ua(h) || h), g = r.cssHooks[b] || r.cssHooks[h], void 0 === c ? g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b] : (f = typeof c === "undefined" ? "undefined" : _typeof(c), "string" === f && (e = aa.exec(c)) && e[1] && (c = ea(a, b, e), f = "number"), null != c && c === c && ("number" === f && (c += e && e[3] || (r.cssNumber[h] ? "" : "px")), o.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), g && "set" in g && void 0 === (c = g.set(a, c, d)) || (i[b] = c)), void 0);
	      }
	    }, css: function css(a, b, c, d) {
	      var e,
	          f,
	          g,
	          h = r.camelCase(b);return b = r.cssProps[h] || (r.cssProps[h] = Ua(h) || h), g = r.cssHooks[b] || r.cssHooks[h], g && "get" in g && (e = g.get(a, !0, c)), void 0 === e && (e = Na(a, b, d)), "normal" === e && b in Ra && (e = Ra[b]), "" === c || c ? (f = parseFloat(e), c === !0 || isFinite(f) ? f || 0 : e) : e;
	    } }), r.each(["height", "width"], function (a, b) {
	    r.cssHooks[b] = { get: function get(a, c, d) {
	        if (c) return !Pa.test(r.css(a, "display")) || a.getClientRects().length && a.getBoundingClientRect().width ? Xa(a, b, d) : da(a, Qa, function () {
	          return Xa(a, b, d);
	        });
	      }, set: function set(a, c, d) {
	        var e,
	            f = d && Ma(a),
	            g = d && Wa(a, b, d, "border-box" === r.css(a, "boxSizing", !1, f), f);return g && (e = aa.exec(c)) && "px" !== (e[3] || "px") && (a.style[b] = c, c = r.css(a, b)), Va(a, c, g);
	      } };
	  }), r.cssHooks.marginLeft = Oa(o.reliableMarginLeft, function (a, b) {
	    if (b) return (parseFloat(Na(a, "marginLeft")) || a.getBoundingClientRect().left - da(a, { marginLeft: 0 }, function () {
	      return a.getBoundingClientRect().left;
	    })) + "px";
	  }), r.each({ margin: "", padding: "", border: "Width" }, function (a, b) {
	    r.cssHooks[a + b] = { expand: function expand(c) {
	        for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; d < 4; d++) {
	          e[a + ba[d] + b] = f[d] || f[d - 2] || f[0];
	        }return e;
	      } }, Ka.test(a) || (r.cssHooks[a + b].set = Va);
	  }), r.fn.extend({ css: function css(a, b) {
	      return S(this, function (a, b, c) {
	        var d,
	            e,
	            f = {},
	            g = 0;if (r.isArray(b)) {
	          for (d = Ma(a), e = b.length; g < e; g++) {
	            f[b[g]] = r.css(a, b[g], !1, d);
	          }return f;
	        }return void 0 !== c ? r.style(a, b, c) : r.css(a, b);
	      }, a, b, arguments.length > 1);
	    } });function Ya(a, b, c, d, e) {
	    return new Ya.prototype.init(a, b, c, d, e);
	  }r.Tween = Ya, Ya.prototype = { constructor: Ya, init: function init(a, b, c, d, e, f) {
	      this.elem = a, this.prop = c, this.easing = e || r.easing._default, this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (r.cssNumber[c] ? "" : "px");
	    }, cur: function cur() {
	      var a = Ya.propHooks[this.prop];return a && a.get ? a.get(this) : Ya.propHooks._default.get(this);
	    }, run: function run(a) {
	      var b,
	          c = Ya.propHooks[this.prop];return this.options.duration ? this.pos = b = r.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Ya.propHooks._default.set(this), this;
	    } }, Ya.prototype.init.prototype = Ya.prototype, Ya.propHooks = { _default: { get: function get(a) {
	        var b;return 1 !== a.elem.nodeType || null != a.elem[a.prop] && null == a.elem.style[a.prop] ? a.elem[a.prop] : (b = r.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0);
	      }, set: function set(a) {
	        r.fx.step[a.prop] ? r.fx.step[a.prop](a) : 1 !== a.elem.nodeType || null == a.elem.style[r.cssProps[a.prop]] && !r.cssHooks[a.prop] ? a.elem[a.prop] = a.now : r.style(a.elem, a.prop, a.now + a.unit);
	      } } }, Ya.propHooks.scrollTop = Ya.propHooks.scrollLeft = { set: function set(a) {
	      a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
	    } }, r.easing = { linear: function linear(a) {
	      return a;
	    }, swing: function swing(a) {
	      return .5 - Math.cos(a * Math.PI) / 2;
	    }, _default: "swing" }, r.fx = Ya.prototype.init, r.fx.step = {};var Za,
	      $a,
	      _a = /^(?:toggle|show|hide)$/,
	      ab = /queueHooks$/;function bb() {
	    $a && (a.requestAnimationFrame(bb), r.fx.tick());
	  }function cb() {
	    return a.setTimeout(function () {
	      Za = void 0;
	    }), Za = r.now();
	  }function db(a, b) {
	    var c,
	        d = 0,
	        e = { height: a };for (b = b ? 1 : 0; d < 4; d += 2 - b) {
	      c = ba[d], e["margin" + c] = e["padding" + c] = a;
	    }return b && (e.opacity = e.width = a), e;
	  }function eb(a, b, c) {
	    for (var d, e = (hb.tweeners[b] || []).concat(hb.tweeners["*"]), f = 0, g = e.length; f < g; f++) {
	      if (d = e[f].call(c, b, a)) return d;
	    }
	  }function fb(a, b, c) {
	    var d,
	        e,
	        f,
	        g,
	        h,
	        i,
	        j,
	        k,
	        l = "width" in b || "height" in b,
	        m = this,
	        n = {},
	        o = a.style,
	        p = a.nodeType && ca(a),
	        q = V.get(a, "fxshow");c.queue || (g = r._queueHooks(a, "fx"), null == g.unqueued && (g.unqueued = 0, h = g.empty.fire, g.empty.fire = function () {
	      g.unqueued || h();
	    }), g.unqueued++, m.always(function () {
	      m.always(function () {
	        g.unqueued--, r.queue(a, "fx").length || g.empty.fire();
	      });
	    }));for (d in b) {
	      if (e = b[d], _a.test(e)) {
	        if (delete b[d], f = f || "toggle" === e, e === (p ? "hide" : "show")) {
	          if ("show" !== e || !q || void 0 === q[d]) continue;p = !0;
	        }n[d] = q && q[d] || r.style(a, d);
	      }
	    }if (i = !r.isEmptyObject(b), i || !r.isEmptyObject(n)) {
	      l && 1 === a.nodeType && (c.overflow = [o.overflow, o.overflowX, o.overflowY], j = q && q.display, null == j && (j = V.get(a, "display")), k = r.css(a, "display"), "none" === k && (j ? k = j : (ha([a], !0), j = a.style.display || j, k = r.css(a, "display"), ha([a]))), ("inline" === k || "inline-block" === k && null != j) && "none" === r.css(a, "float") && (i || (m.done(function () {
	        o.display = j;
	      }), null == j && (k = o.display, j = "none" === k ? "" : k)), o.display = "inline-block")), c.overflow && (o.overflow = "hidden", m.always(function () {
	        o.overflow = c.overflow[0], o.overflowX = c.overflow[1], o.overflowY = c.overflow[2];
	      })), i = !1;for (d in n) {
	        i || (q ? "hidden" in q && (p = q.hidden) : q = V.access(a, "fxshow", { display: j }), f && (q.hidden = !p), p && ha([a], !0), m.done(function () {
	          p || ha([a]), V.remove(a, "fxshow");for (d in n) {
	            r.style(a, d, n[d]);
	          }
	        })), i = eb(p ? q[d] : 0, d, m), d in q || (q[d] = i.start, p && (i.end = i.start, i.start = 0));
	      }
	    }
	  }function gb(a, b) {
	    var c, d, e, f, g;for (c in a) {
	      if (d = r.camelCase(c), e = b[d], f = a[c], r.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = r.cssHooks[d], g && "expand" in g) {
	        f = g.expand(f), delete a[d];for (c in f) {
	          c in a || (a[c] = f[c], b[c] = e);
	        }
	      } else b[d] = e;
	    }
	  }function hb(a, b, c) {
	    var d,
	        e,
	        f = 0,
	        g = hb.prefilters.length,
	        h = r.Deferred().always(function () {
	      delete i.elem;
	    }),
	        i = function i() {
	      if (e) return !1;for (var b = Za || cb(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; g < i; g++) {
	        j.tweens[g].run(f);
	      }return h.notifyWith(a, [j, f, c]), f < 1 && i ? c : (h.resolveWith(a, [j]), !1);
	    },
	        j = h.promise({ elem: a, props: r.extend({}, b), opts: r.extend(!0, { specialEasing: {}, easing: r.easing._default }, c), originalProperties: b, originalOptions: c, startTime: Za || cb(), duration: c.duration, tweens: [], createTween: function createTween(b, c) {
	        var d = r.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);return j.tweens.push(d), d;
	      }, stop: function stop(b) {
	        var c = 0,
	            d = b ? j.tweens.length : 0;if (e) return this;for (e = !0; c < d; c++) {
	          j.tweens[c].run(1);
	        }return b ? (h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j, b])) : h.rejectWith(a, [j, b]), this;
	      } }),
	        k = j.props;for (gb(k, j.opts.specialEasing); f < g; f++) {
	      if (d = hb.prefilters[f].call(j, a, k, j.opts)) return r.isFunction(d.stop) && (r._queueHooks(j.elem, j.opts.queue).stop = r.proxy(d.stop, d)), d;
	    }return r.map(k, eb, j), r.isFunction(j.opts.start) && j.opts.start.call(a, j), r.fx.timer(r.extend(i, { elem: a, anim: j, queue: j.opts.queue })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);
	  }r.Animation = r.extend(hb, { tweeners: { "*": [function (a, b) {
	        var c = this.createTween(a, b);return ea(c.elem, a, aa.exec(b), c), c;
	      }] }, tweener: function tweener(a, b) {
	      r.isFunction(a) ? (b = a, a = ["*"]) : a = a.match(K);for (var c, d = 0, e = a.length; d < e; d++) {
	        c = a[d], hb.tweeners[c] = hb.tweeners[c] || [], hb.tweeners[c].unshift(b);
	      }
	    }, prefilters: [fb], prefilter: function prefilter(a, b) {
	      b ? hb.prefilters.unshift(a) : hb.prefilters.push(a);
	    } }), r.speed = function (a, b, c) {
	    var e = a && "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) ? r.extend({}, a) : { complete: c || !c && b || r.isFunction(a) && a, duration: a, easing: c && b || b && !r.isFunction(b) && b };return r.fx.off || d.hidden ? e.duration = 0 : "number" != typeof e.duration && (e.duration in r.fx.speeds ? e.duration = r.fx.speeds[e.duration] : e.duration = r.fx.speeds._default), null != e.queue && e.queue !== !0 || (e.queue = "fx"), e.old = e.complete, e.complete = function () {
	      r.isFunction(e.old) && e.old.call(this), e.queue && r.dequeue(this, e.queue);
	    }, e;
	  }, r.fn.extend({ fadeTo: function fadeTo(a, b, c, d) {
	      return this.filter(ca).css("opacity", 0).show().end().animate({ opacity: b }, a, c, d);
	    }, animate: function animate(a, b, c, d) {
	      var e = r.isEmptyObject(a),
	          f = r.speed(b, c, d),
	          g = function g() {
	        var b = hb(this, r.extend({}, a), f);(e || V.get(this, "finish")) && b.stop(!0);
	      };return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);
	    }, stop: function stop(a, b, c) {
	      var d = function d(a) {
	        var b = a.stop;delete a.stop, b(c);
	      };return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function () {
	        var b = !0,
	            e = null != a && a + "queueHooks",
	            f = r.timers,
	            g = V.get(this);if (e) g[e] && g[e].stop && d(g[e]);else for (e in g) {
	          g[e] && g[e].stop && ab.test(e) && d(g[e]);
	        }for (e = f.length; e--;) {
	          f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));
	        }!b && c || r.dequeue(this, a);
	      });
	    }, finish: function finish(a) {
	      return a !== !1 && (a = a || "fx"), this.each(function () {
	        var b,
	            c = V.get(this),
	            d = c[a + "queue"],
	            e = c[a + "queueHooks"],
	            f = r.timers,
	            g = d ? d.length : 0;for (c.finish = !0, r.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) {
	          f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));
	        }for (b = 0; b < g; b++) {
	          d[b] && d[b].finish && d[b].finish.call(this);
	        }delete c.finish;
	      });
	    } }), r.each(["toggle", "show", "hide"], function (a, b) {
	    var c = r.fn[b];r.fn[b] = function (a, d, e) {
	      return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(db(b, !0), a, d, e);
	    };
	  }), r.each({ slideDown: db("show"), slideUp: db("hide"), slideToggle: db("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (a, b) {
	    r.fn[a] = function (a, c, d) {
	      return this.animate(b, a, c, d);
	    };
	  }), r.timers = [], r.fx.tick = function () {
	    var a,
	        b = 0,
	        c = r.timers;for (Za = r.now(); b < c.length; b++) {
	      a = c[b], a() || c[b] !== a || c.splice(b--, 1);
	    }c.length || r.fx.stop(), Za = void 0;
	  }, r.fx.timer = function (a) {
	    r.timers.push(a), a() ? r.fx.start() : r.timers.pop();
	  }, r.fx.interval = 13, r.fx.start = function () {
	    $a || ($a = a.requestAnimationFrame ? a.requestAnimationFrame(bb) : a.setInterval(r.fx.tick, r.fx.interval));
	  }, r.fx.stop = function () {
	    a.cancelAnimationFrame ? a.cancelAnimationFrame($a) : a.clearInterval($a), $a = null;
	  }, r.fx.speeds = { slow: 600, fast: 200, _default: 400 }, r.fn.delay = function (b, c) {
	    return b = r.fx ? r.fx.speeds[b] || b : b, c = c || "fx", this.queue(c, function (c, d) {
	      var e = a.setTimeout(c, b);d.stop = function () {
	        a.clearTimeout(e);
	      };
	    });
	  }, function () {
	    var a = d.createElement("input"),
	        b = d.createElement("select"),
	        c = b.appendChild(d.createElement("option"));a.type = "checkbox", o.checkOn = "" !== a.value, o.optSelected = c.selected, a = d.createElement("input"), a.value = "t", a.type = "radio", o.radioValue = "t" === a.value;
	  }();var ib,
	      jb = r.expr.attrHandle;r.fn.extend({ attr: function attr(a, b) {
	      return S(this, r.attr, a, b, arguments.length > 1);
	    }, removeAttr: function removeAttr(a) {
	      return this.each(function () {
	        r.removeAttr(this, a);
	      });
	    } }), r.extend({ attr: function attr(a, b, c) {
	      var d,
	          e,
	          f = a.nodeType;if (3 !== f && 8 !== f && 2 !== f) return "undefined" == typeof a.getAttribute ? r.prop(a, b, c) : (1 === f && r.isXMLDoc(a) || (e = r.attrHooks[b.toLowerCase()] || (r.expr.match.bool.test(b) ? ib : void 0)), void 0 !== c ? null === c ? void r.removeAttr(a, b) : e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : (a.setAttribute(b, c + ""), c) : e && "get" in e && null !== (d = e.get(a, b)) ? d : (d = r.find.attr(a, b), null == d ? void 0 : d));
	    }, attrHooks: { type: { set: function set(a, b) {
	          if (!o.radioValue && "radio" === b && r.nodeName(a, "input")) {
	            var c = a.value;return a.setAttribute("type", b), c && (a.value = c), b;
	          }
	        } } }, removeAttr: function removeAttr(a, b) {
	      var c,
	          d = 0,
	          e = b && b.match(K);if (e && 1 === a.nodeType) while (c = e[d++]) {
	        a.removeAttribute(c);
	      }
	    } }), ib = { set: function set(a, b, c) {
	      return b === !1 ? r.removeAttr(a, c) : a.setAttribute(c, c), c;
	    } }, r.each(r.expr.match.bool.source.match(/\w+/g), function (a, b) {
	    var c = jb[b] || r.find.attr;jb[b] = function (a, b, d) {
	      var e,
	          f,
	          g = b.toLowerCase();return d || (f = jb[g], jb[g] = e, e = null != c(a, b, d) ? g : null, jb[g] = f), e;
	    };
	  });var kb = /^(?:input|select|textarea|button)$/i,
	      lb = /^(?:a|area)$/i;r.fn.extend({ prop: function prop(a, b) {
	      return S(this, r.prop, a, b, arguments.length > 1);
	    }, removeProp: function removeProp(a) {
	      return this.each(function () {
	        delete this[r.propFix[a] || a];
	      });
	    } }), r.extend({ prop: function prop(a, b, c) {
	      var d,
	          e,
	          f = a.nodeType;if (3 !== f && 8 !== f && 2 !== f) return 1 === f && r.isXMLDoc(a) || (b = r.propFix[b] || b, e = r.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b];
	    }, propHooks: { tabIndex: { get: function get(a) {
	          var b = r.find.attr(a, "tabindex");return b ? parseInt(b, 10) : kb.test(a.nodeName) || lb.test(a.nodeName) && a.href ? 0 : -1;
	        } } }, propFix: { "for": "htmlFor", "class": "className" } }), o.optSelected || (r.propHooks.selected = { get: function get(a) {
	      var b = a.parentNode;return b && b.parentNode && b.parentNode.selectedIndex, null;
	    }, set: function set(a) {
	      var b = a.parentNode;b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex);
	    } }), r.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
	    r.propFix[this.toLowerCase()] = this;
	  });function mb(a) {
	    var b = a.match(K) || [];return b.join(" ");
	  }function nb(a) {
	    return a.getAttribute && a.getAttribute("class") || "";
	  }r.fn.extend({ addClass: function addClass(a) {
	      var b,
	          c,
	          d,
	          e,
	          f,
	          g,
	          h,
	          i = 0;if (r.isFunction(a)) return this.each(function (b) {
	        r(this).addClass(a.call(this, b, nb(this)));
	      });if ("string" == typeof a && a) {
	        b = a.match(K) || [];while (c = this[i++]) {
	          if (e = nb(c), d = 1 === c.nodeType && " " + mb(e) + " ") {
	            g = 0;while (f = b[g++]) {
	              d.indexOf(" " + f + " ") < 0 && (d += f + " ");
	            }h = mb(d), e !== h && c.setAttribute("class", h);
	          }
	        }
	      }return this;
	    }, removeClass: function removeClass(a) {
	      var b,
	          c,
	          d,
	          e,
	          f,
	          g,
	          h,
	          i = 0;if (r.isFunction(a)) return this.each(function (b) {
	        r(this).removeClass(a.call(this, b, nb(this)));
	      });if (!arguments.length) return this.attr("class", "");if ("string" == typeof a && a) {
	        b = a.match(K) || [];while (c = this[i++]) {
	          if (e = nb(c), d = 1 === c.nodeType && " " + mb(e) + " ") {
	            g = 0;while (f = b[g++]) {
	              while (d.indexOf(" " + f + " ") > -1) {
	                d = d.replace(" " + f + " ", " ");
	              }
	            }h = mb(d), e !== h && c.setAttribute("class", h);
	          }
	        }
	      }return this;
	    }, toggleClass: function toggleClass(a, b) {
	      var c = typeof a === "undefined" ? "undefined" : _typeof(a);return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : r.isFunction(a) ? this.each(function (c) {
	        r(this).toggleClass(a.call(this, c, nb(this), b), b);
	      }) : this.each(function () {
	        var b, d, e, f;if ("string" === c) {
	          d = 0, e = r(this), f = a.match(K) || [];while (b = f[d++]) {
	            e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
	          }
	        } else void 0 !== a && "boolean" !== c || (b = nb(this), b && V.set(this, "__className__", b), this.setAttribute && this.setAttribute("class", b || a === !1 ? "" : V.get(this, "__className__") || ""));
	      });
	    }, hasClass: function hasClass(a) {
	      var b,
	          c,
	          d = 0;b = " " + a + " ";while (c = this[d++]) {
	        if (1 === c.nodeType && (" " + mb(nb(c)) + " ").indexOf(b) > -1) return !0;
	      }return !1;
	    } });var ob = /\r/g;r.fn.extend({ val: function val(a) {
	      var b,
	          c,
	          d,
	          e = this[0];{
	        if (arguments.length) return d = r.isFunction(a), this.each(function (c) {
	          var e;1 === this.nodeType && (e = d ? a.call(this, c, r(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : r.isArray(e) && (e = r.map(e, function (a) {
	            return null == a ? "" : a + "";
	          })), b = r.valHooks[this.type] || r.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e));
	        });if (e) return b = r.valHooks[e.type] || r.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(ob, "") : null == c ? "" : c);
	      }
	    } }), r.extend({ valHooks: { option: { get: function get(a) {
	          var b = r.find.attr(a, "value");return null != b ? b : mb(r.text(a));
	        } }, select: { get: function get(a) {
	          var b,
	              c,
	              d,
	              e = a.options,
	              f = a.selectedIndex,
	              g = "select-one" === a.type,
	              h = g ? null : [],
	              i = g ? f + 1 : e.length;for (d = f < 0 ? i : g ? f : 0; d < i; d++) {
	            if (c = e[d], (c.selected || d === f) && !c.disabled && (!c.parentNode.disabled || !r.nodeName(c.parentNode, "optgroup"))) {
	              if (b = r(c).val(), g) return b;h.push(b);
	            }
	          }return h;
	        }, set: function set(a, b) {
	          var c,
	              d,
	              e = a.options,
	              f = r.makeArray(b),
	              g = e.length;while (g--) {
	            d = e[g], (d.selected = r.inArray(r.valHooks.option.get(d), f) > -1) && (c = !0);
	          }return c || (a.selectedIndex = -1), f;
	        } } } }), r.each(["radio", "checkbox"], function () {
	    r.valHooks[this] = { set: function set(a, b) {
	        if (r.isArray(b)) return a.checked = r.inArray(r(a).val(), b) > -1;
	      } }, o.checkOn || (r.valHooks[this].get = function (a) {
	      return null === a.getAttribute("value") ? "on" : a.value;
	    });
	  });var pb = /^(?:focusinfocus|focusoutblur)$/;r.extend(r.event, { trigger: function trigger(b, c, e, f) {
	      var g,
	          h,
	          i,
	          j,
	          k,
	          m,
	          n,
	          o = [e || d],
	          p = l.call(b, "type") ? b.type : b,
	          q = l.call(b, "namespace") ? b.namespace.split(".") : [];if (h = i = e = e || d, 3 !== e.nodeType && 8 !== e.nodeType && !pb.test(p + r.event.triggered) && (p.indexOf(".") > -1 && (q = p.split("."), p = q.shift(), q.sort()), k = p.indexOf(":") < 0 && "on" + p, b = b[r.expando] ? b : new r.Event(p, "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b), b.isTrigger = f ? 2 : 3, b.namespace = q.join("."), b.rnamespace = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = e), c = null == c ? [b] : r.makeArray(c, [b]), n = r.event.special[p] || {}, f || !n.trigger || n.trigger.apply(e, c) !== !1)) {
	        if (!f && !n.noBubble && !r.isWindow(e)) {
	          for (j = n.delegateType || p, pb.test(j + p) || (h = h.parentNode); h; h = h.parentNode) {
	            o.push(h), i = h;
	          }i === (e.ownerDocument || d) && o.push(i.defaultView || i.parentWindow || a);
	        }g = 0;while ((h = o[g++]) && !b.isPropagationStopped()) {
	          b.type = g > 1 ? j : n.bindType || p, m = (V.get(h, "events") || {})[b.type] && V.get(h, "handle"), m && m.apply(h, c), m = k && h[k], m && m.apply && T(h) && (b.result = m.apply(h, c), b.result === !1 && b.preventDefault());
	        }return b.type = p, f || b.isDefaultPrevented() || n._default && n._default.apply(o.pop(), c) !== !1 || !T(e) || k && r.isFunction(e[p]) && !r.isWindow(e) && (i = e[k], i && (e[k] = null), r.event.triggered = p, e[p](), r.event.triggered = void 0, i && (e[k] = i)), b.result;
	      }
	    }, simulate: function simulate(a, b, c) {
	      var d = r.extend(new r.Event(), c, { type: a, isSimulated: !0 });r.event.trigger(d, null, b);
	    } }), r.fn.extend({ trigger: function trigger(a, b) {
	      return this.each(function () {
	        r.event.trigger(a, b, this);
	      });
	    }, triggerHandler: function triggerHandler(a, b) {
	      var c = this[0];if (c) return r.event.trigger(a, b, c, !0);
	    } }), r.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function (a, b) {
	    r.fn[b] = function (a, c) {
	      return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
	    };
	  }), r.fn.extend({ hover: function hover(a, b) {
	      return this.mouseenter(a).mouseleave(b || a);
	    } }), o.focusin = "onfocusin" in a, o.focusin || r.each({ focus: "focusin", blur: "focusout" }, function (a, b) {
	    var c = function c(a) {
	      r.event.simulate(b, a.target, r.event.fix(a));
	    };r.event.special[b] = { setup: function setup() {
	        var d = this.ownerDocument || this,
	            e = V.access(d, b);e || d.addEventListener(a, c, !0), V.access(d, b, (e || 0) + 1);
	      }, teardown: function teardown() {
	        var d = this.ownerDocument || this,
	            e = V.access(d, b) - 1;e ? V.access(d, b, e) : (d.removeEventListener(a, c, !0), V.remove(d, b));
	      } };
	  });var qb = a.location,
	      rb = r.now(),
	      sb = /\?/;r.parseXML = function (b) {
	    var c;if (!b || "string" != typeof b) return null;try {
	      c = new a.DOMParser().parseFromString(b, "text/xml");
	    } catch (d) {
	      c = void 0;
	    }return c && !c.getElementsByTagName("parsererror").length || r.error("Invalid XML: " + b), c;
	  };var tb = /\[\]$/,
	      ub = /\r?\n/g,
	      vb = /^(?:submit|button|image|reset|file)$/i,
	      wb = /^(?:input|select|textarea|keygen)/i;function xb(a, b, c, d) {
	    var e;if (r.isArray(b)) r.each(b, function (b, e) {
	      c || tb.test(a) ? d(a, e) : xb(a + "[" + ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && null != e ? b : "") + "]", e, c, d);
	    });else if (c || "object" !== r.type(b)) d(a, b);else for (e in b) {
	      xb(a + "[" + e + "]", b[e], c, d);
	    }
	  }r.param = function (a, b) {
	    var c,
	        d = [],
	        e = function e(a, b) {
	      var c = r.isFunction(b) ? b() : b;d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(null == c ? "" : c);
	    };if (r.isArray(a) || a.jquery && !r.isPlainObject(a)) r.each(a, function () {
	      e(this.name, this.value);
	    });else for (c in a) {
	      xb(c, a[c], b, e);
	    }return d.join("&");
	  }, r.fn.extend({ serialize: function serialize() {
	      return r.param(this.serializeArray());
	    }, serializeArray: function serializeArray() {
	      return this.map(function () {
	        var a = r.prop(this, "elements");return a ? r.makeArray(a) : this;
	      }).filter(function () {
	        var a = this.type;return this.name && !r(this).is(":disabled") && wb.test(this.nodeName) && !vb.test(a) && (this.checked || !ia.test(a));
	      }).map(function (a, b) {
	        var c = r(this).val();return null == c ? null : r.isArray(c) ? r.map(c, function (a) {
	          return { name: b.name, value: a.replace(ub, "\r\n") };
	        }) : { name: b.name, value: c.replace(ub, "\r\n") };
	      }).get();
	    } });var yb = /%20/g,
	      zb = /#.*$/,
	      Ab = /([?&])_=[^&]*/,
	      Bb = /^(.*?):[ \t]*([^\r\n]*)$/gm,
	      Cb = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	      Db = /^(?:GET|HEAD)$/,
	      Eb = /^\/\//,
	      Fb = {},
	      Gb = {},
	      Hb = "*/".concat("*"),
	      Ib = d.createElement("a");Ib.href = qb.href;function Jb(a) {
	    return function (b, c) {
	      "string" != typeof b && (c = b, b = "*");var d,
	          e = 0,
	          f = b.toLowerCase().match(K) || [];if (r.isFunction(c)) while (d = f[e++]) {
	        "+" === d[0] ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
	      }
	    };
	  }function Kb(a, b, c, d) {
	    var e = {},
	        f = a === Gb;function g(h) {
	      var i;return e[h] = !0, r.each(a[h] || [], function (a, h) {
	        var j = h(b, c, d);return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);
	      }), i;
	    }return g(b.dataTypes[0]) || !e["*"] && g("*");
	  }function Lb(a, b) {
	    var c,
	        d,
	        e = r.ajaxSettings.flatOptions || {};for (c in b) {
	      void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);
	    }return d && r.extend(!0, a, d), a;
	  }function Mb(a, b, c) {
	    var d,
	        e,
	        f,
	        g,
	        h = a.contents,
	        i = a.dataTypes;while ("*" === i[0]) {
	      i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader("Content-Type"));
	    }if (d) for (e in h) {
	      if (h[e] && h[e].test(d)) {
	        i.unshift(e);break;
	      }
	    }if (i[0] in c) f = i[0];else {
	      for (e in c) {
	        if (!i[0] || a.converters[e + " " + i[0]]) {
	          f = e;break;
	        }g || (g = e);
	      }f = f || g;
	    }if (f) return f !== i[0] && i.unshift(f), c[f];
	  }function Nb(a, b, c, d) {
	    var e,
	        f,
	        g,
	        h,
	        i,
	        j = {},
	        k = a.dataTypes.slice();if (k[1]) for (g in a.converters) {
	      j[g.toLowerCase()] = a.converters[g];
	    }f = k.shift();while (f) {
	      if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if ("*" === f) f = i;else if ("*" !== i && i !== f) {
	        if (g = j[i + " " + f] || j["* " + f], !g) for (e in j) {
	          if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
	            g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));break;
	          }
	        }if (g !== !0) if (g && a["throws"]) b = g(b);else try {
	          b = g(b);
	        } catch (l) {
	          return { state: "parsererror", error: g ? l : "No conversion from " + i + " to " + f };
	        }
	      }
	    }return { state: "success", data: b };
	  }r.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: qb.href, type: "GET", isLocal: Cb.test(qb.protocol), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": Hb, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": JSON.parse, "text xml": r.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function ajaxSetup(a, b) {
	      return b ? Lb(Lb(a, r.ajaxSettings), b) : Lb(r.ajaxSettings, a);
	    }, ajaxPrefilter: Jb(Fb), ajaxTransport: Jb(Gb), ajax: function ajax(b, c) {
	      "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && (c = b, b = void 0), c = c || {};var e,
	          f,
	          g,
	          h,
	          i,
	          j,
	          k,
	          l,
	          m,
	          n,
	          o = r.ajaxSetup({}, c),
	          p = o.context || o,
	          q = o.context && (p.nodeType || p.jquery) ? r(p) : r.event,
	          s = r.Deferred(),
	          t = r.Callbacks("once memory"),
	          u = o.statusCode || {},
	          v = {},
	          w = {},
	          x = "canceled",
	          y = { readyState: 0, getResponseHeader: function getResponseHeader(a) {
	          var b;if (k) {
	            if (!h) {
	              h = {};while (b = Bb.exec(g)) {
	                h[b[1].toLowerCase()] = b[2];
	              }
	            }b = h[a.toLowerCase()];
	          }return null == b ? null : b;
	        }, getAllResponseHeaders: function getAllResponseHeaders() {
	          return k ? g : null;
	        }, setRequestHeader: function setRequestHeader(a, b) {
	          return null == k && (a = w[a.toLowerCase()] = w[a.toLowerCase()] || a, v[a] = b), this;
	        }, overrideMimeType: function overrideMimeType(a) {
	          return null == k && (o.mimeType = a), this;
	        }, statusCode: function statusCode(a) {
	          var b;if (a) if (k) y.always(a[y.status]);else for (b in a) {
	            u[b] = [u[b], a[b]];
	          }return this;
	        }, abort: function abort(a) {
	          var b = a || x;return e && e.abort(b), A(0, b), this;
	        } };if (s.promise(y), o.url = ((b || o.url || qb.href) + "").replace(Eb, qb.protocol + "//"), o.type = c.method || c.type || o.method || o.type, o.dataTypes = (o.dataType || "*").toLowerCase().match(K) || [""], null == o.crossDomain) {
	        j = d.createElement("a");try {
	          j.href = o.url, j.href = j.href, o.crossDomain = Ib.protocol + "//" + Ib.host != j.protocol + "//" + j.host;
	        } catch (z) {
	          o.crossDomain = !0;
	        }
	      }if (o.data && o.processData && "string" != typeof o.data && (o.data = r.param(o.data, o.traditional)), Kb(Fb, o, c, y), k) return y;l = r.event && o.global, l && 0 === r.active++ && r.event.trigger("ajaxStart"), o.type = o.type.toUpperCase(), o.hasContent = !Db.test(o.type), f = o.url.replace(zb, ""), o.hasContent ? o.data && o.processData && 0 === (o.contentType || "").indexOf("application/x-www-form-urlencoded") && (o.data = o.data.replace(yb, "+")) : (n = o.url.slice(f.length), o.data && (f += (sb.test(f) ? "&" : "?") + o.data, delete o.data), o.cache === !1 && (f = f.replace(Ab, "$1"), n = (sb.test(f) ? "&" : "?") + "_=" + rb++ + n), o.url = f + n), o.ifModified && (r.lastModified[f] && y.setRequestHeader("If-Modified-Since", r.lastModified[f]), r.etag[f] && y.setRequestHeader("If-None-Match", r.etag[f])), (o.data && o.hasContent && o.contentType !== !1 || c.contentType) && y.setRequestHeader("Content-Type", o.contentType), y.setRequestHeader("Accept", o.dataTypes[0] && o.accepts[o.dataTypes[0]] ? o.accepts[o.dataTypes[0]] + ("*" !== o.dataTypes[0] ? ", " + Hb + "; q=0.01" : "") : o.accepts["*"]);for (m in o.headers) {
	        y.setRequestHeader(m, o.headers[m]);
	      }if (o.beforeSend && (o.beforeSend.call(p, y, o) === !1 || k)) return y.abort();if (x = "abort", t.add(o.complete), y.done(o.success), y.fail(o.error), e = Kb(Gb, o, c, y)) {
	        if (y.readyState = 1, l && q.trigger("ajaxSend", [y, o]), k) return y;o.async && o.timeout > 0 && (i = a.setTimeout(function () {
	          y.abort("timeout");
	        }, o.timeout));try {
	          k = !1, e.send(v, A);
	        } catch (z) {
	          if (k) throw z;A(-1, z);
	        }
	      } else A(-1, "No Transport");function A(b, c, d, h) {
	        var j,
	            m,
	            n,
	            v,
	            w,
	            x = c;k || (k = !0, i && a.clearTimeout(i), e = void 0, g = h || "", y.readyState = b > 0 ? 4 : 0, j = b >= 200 && b < 300 || 304 === b, d && (v = Mb(o, y, d)), v = Nb(o, v, y, j), j ? (o.ifModified && (w = y.getResponseHeader("Last-Modified"), w && (r.lastModified[f] = w), w = y.getResponseHeader("etag"), w && (r.etag[f] = w)), 204 === b || "HEAD" === o.type ? x = "nocontent" : 304 === b ? x = "notmodified" : (x = v.state, m = v.data, n = v.error, j = !n)) : (n = x, !b && x || (x = "error", b < 0 && (b = 0))), y.status = b, y.statusText = (c || x) + "", j ? s.resolveWith(p, [m, x, y]) : s.rejectWith(p, [y, x, n]), y.statusCode(u), u = void 0, l && q.trigger(j ? "ajaxSuccess" : "ajaxError", [y, o, j ? m : n]), t.fireWith(p, [y, x]), l && (q.trigger("ajaxComplete", [y, o]), --r.active || r.event.trigger("ajaxStop")));
	      }return y;
	    }, getJSON: function getJSON(a, b, c) {
	      return r.get(a, b, c, "json");
	    }, getScript: function getScript(a, b) {
	      return r.get(a, void 0, b, "script");
	    } }), r.each(["get", "post"], function (a, b) {
	    r[b] = function (a, c, d, e) {
	      return r.isFunction(c) && (e = e || d, d = c, c = void 0), r.ajax(r.extend({ url: a, type: b, dataType: e, data: c, success: d }, r.isPlainObject(a) && a));
	    };
	  }), r._evalUrl = function (a) {
	    return r.ajax({ url: a, type: "GET", dataType: "script", cache: !0, async: !1, global: !1, "throws": !0 });
	  }, r.fn.extend({ wrapAll: function wrapAll(a) {
	      var b;return this[0] && (r.isFunction(a) && (a = a.call(this[0])), b = r(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function () {
	        var a = this;while (a.firstElementChild) {
	          a = a.firstElementChild;
	        }return a;
	      }).append(this)), this;
	    }, wrapInner: function wrapInner(a) {
	      return r.isFunction(a) ? this.each(function (b) {
	        r(this).wrapInner(a.call(this, b));
	      }) : this.each(function () {
	        var b = r(this),
	            c = b.contents();c.length ? c.wrapAll(a) : b.append(a);
	      });
	    }, wrap: function wrap(a) {
	      var b = r.isFunction(a);return this.each(function (c) {
	        r(this).wrapAll(b ? a.call(this, c) : a);
	      });
	    }, unwrap: function unwrap(a) {
	      return this.parent(a).not("body").each(function () {
	        r(this).replaceWith(this.childNodes);
	      }), this;
	    } }), r.expr.pseudos.hidden = function (a) {
	    return !r.expr.pseudos.visible(a);
	  }, r.expr.pseudos.visible = function (a) {
	    return !!(a.offsetWidth || a.offsetHeight || a.getClientRects().length);
	  }, r.ajaxSettings.xhr = function () {
	    try {
	      return new a.XMLHttpRequest();
	    } catch (b) {}
	  };var Ob = { 0: 200, 1223: 204 },
	      Pb = r.ajaxSettings.xhr();o.cors = !!Pb && "withCredentials" in Pb, o.ajax = Pb = !!Pb, r.ajaxTransport(function (b) {
	    var _c, d;if (o.cors || Pb && !b.crossDomain) return { send: function send(e, f) {
	        var g,
	            h = b.xhr();if (h.open(b.type, b.url, b.async, b.username, b.password), b.xhrFields) for (g in b.xhrFields) {
	          h[g] = b.xhrFields[g];
	        }b.mimeType && h.overrideMimeType && h.overrideMimeType(b.mimeType), b.crossDomain || e["X-Requested-With"] || (e["X-Requested-With"] = "XMLHttpRequest");for (g in e) {
	          h.setRequestHeader(g, e[g]);
	        }_c = function c(a) {
	          return function () {
	            _c && (_c = d = h.onload = h.onerror = h.onabort = h.onreadystatechange = null, "abort" === a ? h.abort() : "error" === a ? "number" != typeof h.status ? f(0, "error") : f(h.status, h.statusText) : f(Ob[h.status] || h.status, h.statusText, "text" !== (h.responseType || "text") || "string" != typeof h.responseText ? { binary: h.response } : { text: h.responseText }, h.getAllResponseHeaders()));
	          };
	        }, h.onload = _c(), d = h.onerror = _c("error"), void 0 !== h.onabort ? h.onabort = d : h.onreadystatechange = function () {
	          4 === h.readyState && a.setTimeout(function () {
	            _c && d();
	          });
	        }, _c = _c("abort");try {
	          h.send(b.hasContent && b.data || null);
	        } catch (i) {
	          if (_c) throw i;
	        }
	      }, abort: function abort() {
	        _c && _c();
	      } };
	  }), r.ajaxPrefilter(function (a) {
	    a.crossDomain && (a.contents.script = !1);
	  }), r.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /\b(?:java|ecma)script\b/ }, converters: { "text script": function textScript(a) {
	        return r.globalEval(a), a;
	      } } }), r.ajaxPrefilter("script", function (a) {
	    void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET");
	  }), r.ajaxTransport("script", function (a) {
	    if (a.crossDomain) {
	      var b, _c2;return { send: function send(e, f) {
	          b = r("<script>").prop({ charset: a.scriptCharset, src: a.url }).on("load error", _c2 = function c(a) {
	            b.remove(), _c2 = null, a && f("error" === a.type ? 404 : 200, a.type);
	          }), d.head.appendChild(b[0]);
	        }, abort: function abort() {
	          _c2 && _c2();
	        } };
	    }
	  });var Qb = [],
	      Rb = /(=)\?(?=&|$)|\?\?/;r.ajaxSetup({ jsonp: "callback", jsonpCallback: function jsonpCallback() {
	      var a = Qb.pop() || r.expando + "_" + rb++;return this[a] = !0, a;
	    } }), r.ajaxPrefilter("json jsonp", function (b, c, d) {
	    var e,
	        f,
	        g,
	        h = b.jsonp !== !1 && (Rb.test(b.url) ? "url" : "string" == typeof b.data && 0 === (b.contentType || "").indexOf("application/x-www-form-urlencoded") && Rb.test(b.data) && "data");if (h || "jsonp" === b.dataTypes[0]) return e = b.jsonpCallback = r.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(Rb, "$1" + e) : b.jsonp !== !1 && (b.url += (sb.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function () {
	      return g || r.error(e + " was not called"), g[0];
	    }, b.dataTypes[0] = "json", f = a[e], a[e] = function () {
	      g = arguments;
	    }, d.always(function () {
	      void 0 === f ? r(a).removeProp(e) : a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, Qb.push(e)), g && r.isFunction(f) && f(g[0]), g = f = void 0;
	    }), "script";
	  }), o.createHTMLDocument = function () {
	    var a = d.implementation.createHTMLDocument("").body;return a.innerHTML = "<form></form><form></form>", 2 === a.childNodes.length;
	  }(), r.parseHTML = function (a, b, c) {
	    if ("string" != typeof a) return [];"boolean" == typeof b && (c = b, b = !1);var e, f, g;return b || (o.createHTMLDocument ? (b = d.implementation.createHTMLDocument(""), e = b.createElement("base"), e.href = d.location.href, b.head.appendChild(e)) : b = d), f = B.exec(a), g = !c && [], f ? [b.createElement(f[1])] : (f = pa([a], b, g), g && g.length && r(g).remove(), r.merge([], f.childNodes));
	  }, r.fn.load = function (a, b, c) {
	    var d,
	        e,
	        f,
	        g = this,
	        h = a.indexOf(" ");return h > -1 && (d = mb(a.slice(h)), a = a.slice(0, h)), r.isFunction(b) ? (c = b, b = void 0) : b && "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && (e = "POST"), g.length > 0 && r.ajax({ url: a, type: e || "GET", dataType: "html", data: b }).done(function (a) {
	      f = arguments, g.html(d ? r("<div>").append(r.parseHTML(a)).find(d) : a);
	    }).always(c && function (a, b) {
	      g.each(function () {
	        c.apply(this, f || [a.responseText, b, a]);
	      });
	    }), this;
	  }, r.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) {
	    r.fn[b] = function (a) {
	      return this.on(b, a);
	    };
	  }), r.expr.pseudos.animated = function (a) {
	    return r.grep(r.timers, function (b) {
	      return a === b.elem;
	    }).length;
	  };function Sb(a) {
	    return r.isWindow(a) ? a : 9 === a.nodeType && a.defaultView;
	  }r.offset = { setOffset: function setOffset(a, b, c) {
	      var d,
	          e,
	          f,
	          g,
	          h,
	          i,
	          j,
	          k = r.css(a, "position"),
	          l = r(a),
	          m = {};"static" === k && (a.style.position = "relative"), h = l.offset(), f = r.css(a, "top"), i = r.css(a, "left"), j = ("absolute" === k || "fixed" === k) && (f + i).indexOf("auto") > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), r.isFunction(b) && (b = b.call(a, c, r.extend({}, h))), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), "using" in b ? b.using.call(a, m) : l.css(m);
	    } }, r.fn.extend({ offset: function offset(a) {
	      if (arguments.length) return void 0 === a ? this : this.each(function (b) {
	        r.offset.setOffset(this, a, b);
	      });var b,
	          c,
	          d,
	          e,
	          f = this[0];if (f) return f.getClientRects().length ? (d = f.getBoundingClientRect(), d.width || d.height ? (e = f.ownerDocument, c = Sb(e), b = e.documentElement, { top: d.top + c.pageYOffset - b.clientTop, left: d.left + c.pageXOffset - b.clientLeft }) : d) : { top: 0, left: 0 };
	    }, position: function position() {
	      if (this[0]) {
	        var a,
	            b,
	            c = this[0],
	            d = { top: 0, left: 0 };return "fixed" === r.css(c, "position") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), r.nodeName(a[0], "html") || (d = a.offset()), d = { top: d.top + r.css(a[0], "borderTopWidth", !0), left: d.left + r.css(a[0], "borderLeftWidth", !0) }), { top: b.top - d.top - r.css(c, "marginTop", !0), left: b.left - d.left - r.css(c, "marginLeft", !0) };
	      }
	    }, offsetParent: function offsetParent() {
	      return this.map(function () {
	        var a = this.offsetParent;while (a && "static" === r.css(a, "position")) {
	          a = a.offsetParent;
	        }return a || qa;
	      });
	    } }), r.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (a, b) {
	    var c = "pageYOffset" === b;r.fn[a] = function (d) {
	      return S(this, function (a, d, e) {
	        var f = Sb(a);return void 0 === e ? f ? f[b] : a[d] : void (f ? f.scrollTo(c ? f.pageXOffset : e, c ? e : f.pageYOffset) : a[d] = e);
	      }, a, d, arguments.length);
	    };
	  }), r.each(["top", "left"], function (a, b) {
	    r.cssHooks[b] = Oa(o.pixelPosition, function (a, c) {
	      if (c) return c = Na(a, b), La.test(c) ? r(a).position()[b] + "px" : c;
	    });
	  }), r.each({ Height: "height", Width: "width" }, function (a, b) {
	    r.each({ padding: "inner" + a, content: b, "": "outer" + a }, function (c, d) {
	      r.fn[d] = function (e, f) {
	        var g = arguments.length && (c || "boolean" != typeof e),
	            h = c || (e === !0 || f === !0 ? "margin" : "border");return S(this, function (b, c, e) {
	          var f;return r.isWindow(b) ? 0 === d.indexOf("outer") ? b["inner" + a] : b.document.documentElement["client" + a] : 9 === b.nodeType ? (f = b.documentElement, Math.max(b.body["scroll" + a], f["scroll" + a], b.body["offset" + a], f["offset" + a], f["client" + a])) : void 0 === e ? r.css(b, c, h) : r.style(b, c, e, h);
	        }, b, g ? e : void 0, g);
	      };
	    });
	  }), r.fn.extend({ bind: function bind(a, b, c) {
	      return this.on(a, null, b, c);
	    }, unbind: function unbind(a, b) {
	      return this.off(a, null, b);
	    }, delegate: function delegate(a, b, c, d) {
	      return this.on(b, a, c, d);
	    }, undelegate: function undelegate(a, b, c) {
	      return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);
	    } }), r.parseJSON = JSON.parse, "function" == "function" && __webpack_require__(9) && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	    return r;
	  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));var Tb = a.jQuery,
	      Ub = a.$;return r.noConflict = function (b) {
	    return a.$ === r && (a.$ = Ub), b && a.jQuery === r && (a.jQuery = Tb), r;
	  }, b || (a.jQuery = a.$ = r), r;
	});

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "jquery-3.1.1.min.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)(module)))

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 9 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：mathUtil.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2017-04-07 16:26:34.
	 * 用途：类
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var math = {};
	/**
	 * Calculates the linearly interpolated value of x between a and b.
	 *
	 * @param {number} a Number
	 * @param {number} b Number
	 * @param {number} x Value to be interpolated.
	 * @return {number} Interpolated value.
	 */
	math.lerp = function (a, b, x) {
	  return a + x * (b - a);
	};
	exports.default = math;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "mathUtil.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：arrayUtil.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2017-04-07 16:24:17.
	 * 用途：类
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var array = {};

	/**
	 * Compare function for array sort that is safe for numbers.
	 * @param {*} a The first object to be compared.
	 * @param {*} b The second object to be compared.
	 * @return {number} A negative number, zero, or a positive number as the first
	 *     argument is less than, equal to, or greater than the second.
	 */
	array.numberSafeCompareFunction = function (a, b) {
	    return a > b ? 1 : a < b ? -1 : 0;
	};
	/**
	 * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.
	 *
	 * @param {Array.<*>} haystack Items to search through.
	 * @param {*} needle The item to look for.
	 * @param {Function=} opt_comparator Comparator function.
	 * @return {number} The index of the item if found, -1 if not.
	 */
	array.binarySearch = function (haystack, needle, opt_comparator) {
	    var mid, cmp;
	    var comparator = opt_comparator || array.numberSafeCompareFunction;
	    var low = 0;
	    var high = haystack.length;
	    var found = false;

	    while (low < high) {
	        /* Note that "(low + high) >>> 1" may overflow, and results in a typecast
	         * to double (which gives the wrong results). */
	        mid = low + (high - low >> 1);
	        cmp = +comparator(haystack[mid], needle);

	        if (cmp < 0.0) {
	            /* Too low. */
	            low = mid + 1;
	        } else {
	            /* Key found or too high */
	            high = mid;
	            found = !cmp;
	        }
	    }

	    /* Key not found. */
	    return found ? low : ~low;
	};

	/**
	 * 把第二个值添加至数组
	 * @param arr {Array} 数组
	 * @param data {Array||value} 添加的对象
	 */
	array.extend = function (arr, data) {
	    var i = void 0;
	    var extension = Array.isArray(data) ? data : [data];
	    var length = extension.length;
	    for (i = 0; i < length; i++) {
	        arr[arr.length] = extension[i];
	    }
	    return 0;
	};

	exports.default = array;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "arrayUtil.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.WarnException = undefined;

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	/**
	 * 项目：GVML
	 * 文件：WarnException.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com
	 * 日期：2017-09-3 09:16:18.
	 * 用途：警告接口
	 */

	function formatMessage(value, phvList) {
	    var arr = [];
	    var j = void 0;
	    var index = void 0;
	    var i = 0;
	    while (i < value.length) {
	        if (value.charAt(i) === '{') {
	            j = value.indexOf('}', i + 1);
	            if (j === -1) {
	                i++;
	            } else {
	                index = parseInt(value.substring(i + 1, j));
	                if (!isNaN(index) && index >= 0) {
	                    var s = value.substring(0, i);
	                    if (s !== '') {
	                        arr.push(s);
	                    }
	                    arr.push(index);
	                    i = 0;
	                    value = value.substring(j + 1);
	                } else {
	                    i = j + 1;
	                }
	            }
	        } else {
	            i++;
	        }
	    }
	    if (value !== '') {
	        arr.push(value);
	    }
	    value = arr;

	    if (value.length === 1 && typeof value[0] === 'string') {
	        return value[0];
	    }

	    var str = '';
	    if (value.length === 0 && phvList) {
	        for (i = 0; i < phvList.length; i++) {
	            str += phvList[i];
	        }
	        return str;
	    }
	    for (i = 0, j = value.length; i < j; i++) {
	        if (typeof value[i] === 'string') {
	            str += value[i];
	        } else if (phvList && value[i] < phvList.length) {
	            str += phvList[value[i]];
	        }
	    }

	    return str;
	}

	function showMessage(message, type, info) {
	    var infoType = message.type;
	    message = formatMessage(message[_ExceptionMessage2.default.show_language], info);
	    return type + ':' + message;
	}

	var WarnException = exports.WarnException = function WarnException(message) {
	    var obj = void 0;

	    for (var _len = arguments.length, type = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        type[_key - 1] = arguments[_key];
	    }

	    if (type.length > 0) {
	        obj = type.shift();
	    }

	    return showMessage(message, obj, type);
	};

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "WarnException.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {


	/**
	 * 项目：gvml
	 * 文件：ExceptionMessage.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com
	 * 日期：2017-03-03 17:39:45.
	 * 用途：异常信息类
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    show_language: 'zh',

	    //错误相关
	    ERRAR_PARAMS: {
	        type: 'error',
	        zh: '参数错误'
	    },
	    ERRAR_PARAMS_ONLY: {
	        type: 'error',
	        zh: '参数错误,只能是:'
	    },
	    ERROR_GVML_FILE_PARSE: {
	        type: 'error',
	        zh: 'GVML文件解析失败，请检查是否拼写错误。'
	    },
	    ERROR_GVML_FILE_READ: {
	        type: 'error',
	        zh: 'GVML文件读取失败，请检查路径是否错误。'
	    },
	    ERROR_PARAMS_BOOLEAN: {
	        type: 'error',
	        zh: '参数必须是布尔类型'
	    },
	    ERROR_PARAMS_FUNCTION: {
	        type: 'error',
	        zh: '参数不是一个有效的函数类型'
	    },
	    ERROR_ANIMATE_TYPE: {
	        type: 'error',
	        zh: '不是一个有效的动画类型'
	    },
	    UNDEFINED_PARENT_CONTAINER: {
	        type: 'error',
	        zh: '父容器未定义'
	    },
	    UNDEFINED_DOM: {
	        type: 'error',
	        zh: '页面未包含相应元素'
	    },
	    UNDEFINED_PLUGIN_TYPE: {
	        type: 'error',
	        zh: '未定义插件类型,必须指定,类型查看GV.PluginType'
	    },
	    UNDEFINED_EXCEPTION: {
	        type: 'error',
	        zh: '未定义(undefined)异常'
	    },
	    UNDEFINED_PLUGIN: {
	        type: 'error',
	        zh: '未定义插件，请检查插件参数是否正确，或者提前注册该插件！'
	    },
	    ERROR_PLUGIN_TYPE: {
	        type: 'error',
	        zh: '插件类型指定错误,请检查自己的gvml数据是否错误'
	    },
	    ERROR_PLUGIN_URL: {
	        type: 'error',
	        zh: '错误插件路径，请检查路径是否指向真实插件路径'
	    },
	    ERROR_IMAGE_SOURCE: {
	        type: 'error',
	        zh: '未指定图层数据源或者图层数据源指定错误'
	    },
	    ERROR_BASEIMAGE_DEFINITION: {
	        type: 'error',
	        zh: '基础图层定义错误'
	    },
	    ERROR_POLYLINE_LENGTH: {
	        type: 'error',
	        zh: 'Polyline最少需要2个折点'
	    },
	    ERROR_POLYGON_LENGTH: {
	        type: 'error',
	        zh: '多边形最少需要3个折点'
	    },
	    centerMessage: {
	        managerService: {
	            error: {
	                zh: '获取所有服务列表失败'
	            }
	        }
	    },
	    UNDEFINED_CACHE_OPTION_PARAM: {
	        type: 'error',
	        zh: 'CacheOption的driver设置有误，须为"filesystem"或"leveldb"'
	    },

	    //警告信息
	    WARN_PARAMS_RANGE: {
	        type: 'warn',
	        zh: '参数范围错误:{0}  取值范围:{1} 单位或枚举:{2}, 使用默认参数 {3}'
	    },

	    WARN_PARAMS_RANGE_NONE: {
	        type: 'warn',
	        zh: '参数范围错误---参数:{0} 取值范围:{1}, 使用默认参数 {2}'
	    },

	    WARN_PARAMS_RANGE_NONEDEFAULT: {
	        type: 'warn',
	        zh: '参数范围错误---参数:{0} 取值范围:{1}'
	    },

	    WARN_PARAMS: {
	        type: 'warn',
	        zh: '参数:{0}--参数类型错误 参数类型:{1}, 使用默认参数 {2}'
	    },

	    WARN_PARAMS_NONE: {
	        type: 'warn',
	        zh: '参数类型错误---参数:{0} 参数类型:{1}'
	    },
	    // 传入参数不为颜色
	    WARN_CORLOR: {
	        type: 'warn',
	        zh: '参数:{0}--参数类型错误,参数应为十六进制颜色#FFFFFFFF或#FFFFFF,使用默认参数:{1}'
	    },

	    //数组错误
	    WARN_ARRAY_ELEMENT_TYPE: {
	        type: 'warn',
	        zh: '参数类型错误---参数:{0} 数组元素参数类型:{1},{2}元素类型为:{3}'
	    },

	    WARN_ARRAY_ELEMENT_PARAMS: {
	        type: 'warn',
	        zh: '参数类型错误---参数:{0} 数组元素取值范围错误'
	    },

	    WARN_ARRAY_LENGHT: {
	        type: 'warn',
	        zh: '参数类型错误---参数:{0},数组长度应{1}{2},当前数组长度为{3}'
	    },

	    WARN_ARRAY_LAYER_EXTENT: {
	        type: 'warn',
	        zh: '获取图层范围失败!',
	        en: 'getExtent failed!'
	    },

	    //自定义，
	    WARN_CUSTOM: {
	        type: 'warn',
	        zh: ''
	    },

	    //提醒

	    // 插件提醒信息
	    ADDED_PLUGIN: {
	        type: 'warn',
	        zh: '插件已经添加过了, 请不要重复添加o(>﹏<)o'
	    },
	    USING_WIDGET: {
	        type: 'warn',
	        zh: '挂件已经在使用中！'
	    },
	    IS_WIDGET_NOT_TOOL: {
	        type: 'warn',
	        zh: '该插件为widget，请使用usingWidget方法添加!'
	    },
	    USING_PLUGIN_FAIL: {
	        type: 'warn',
	        zh: '添加插件{0}失败!'
	    }
	};

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ExceptionMessage.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * 项目: gvml
	 * 文件: ENUM.js
	 * 作者: 巩志远
	 * 部门: 产品研发中心
	 * 邮箱: gongzy@geovis.com
	 * 日期: 2017-03-03 21:43:25.
	 * 用途: 枚举类
	 */

	/**
	 * @module global
	 */
	/**
	 * gvml常用枚举类
	 * @namespace GV
	 * @class ENUM
	 */
	exports.default = {

	    /**
	     *  @property {String} CURSOR_STYLE
	     *  @description
	     * <pre>
	     * 鼠标样式枚举
	     *   CUSTOM: -1,
	     *   POINTER: 0,
	     *   CROSS: 1,
	     *   HAND: 2,
	     *   IBEAM: 3,
	     *   WAIT: 4,
	     *   HELP: 5,
	     *   EASTRESIZE: 6,
	     *   NORTHRESIZE: 7,
	     *   NORTHEASTRESIZE: 8,
	     *   NORTHWESTRESIZE: 9,
	     *   SOUTHRESIZE: 10,
	     *   SOUTHEASTRESIZE: 11,
	     *   SOUTHWESTRESIZE: 12,
	     *   WESTRESIZE: 13,
	     *   NORTHSOUTHRESIZE: 14,
	     *   EASTWESTRESIZE: 15,
	     *   NORTHEASTSOUTHWESTRESIZE: 16,
	     *   NORTHWESTSOUTHEASTRESIZE: 17,
	     *   COLUMNRESIZE: 18,
	     *   ROWRESIZE: 19,
	     *   MIDDLEPANNING: 20,
	     *   EASTPANNING: 21,
	     *   NORTHPANNING: 22,
	     *   NORTHEASTPANNING: 23,
	     *   NORTHWESTPANNING: 24,
	     *   SOUTHPANNING: 25,
	     *   SOUTHEASTPANNING: 26,
	     *   SOUTHWESTPANNING: 27,
	     *   WESTPANNING: 28,
	     *   MOVE: 29,
	     *   VERTICALTEXT: 30,
	     *   CELL: 31,
	     *   CONTEXTMENU: 32,
	     *   ALIAS: 33,
	     *   PROGRESS: 34,
	     *   NODROP: 35,
	     *   COPY: 36,
	     *   NONE: 37,
	     *   NOTALLOWED: 38,
	     *   ZOOMIN: 39,
	     *   ZOOMOUT: 40,
	     *   GRAB: 41,
	     *   GRABBING: 42,
	     * </pre>
	     */
	    CURSOR_STYLE: {
	        CUSTOM: -1,
	        POINTER: 0,
	        CROSS: 1,
	        HAND: 2,
	        IBEAM: 3,
	        WAIT: 4,
	        HELP: 5,
	        EASTRESIZE: 6,
	        NORTHRESIZE: 7,
	        NORTHEASTRESIZE: 8,
	        NORTHWESTRESIZE: 9,
	        SOUTHRESIZE: 10,
	        SOUTHEASTRESIZE: 11,
	        SOUTHWESTRESIZE: 12,
	        WESTRESIZE: 13,
	        NORTHSOUTHRESIZE: 14,
	        EASTWESTRESIZE: 15,
	        NORTHEASTSOUTHWESTRESIZE: 16,
	        NORTHWESTSOUTHEASTRESIZE: 17,
	        COLUMNRESIZE: 18,
	        ROWRESIZE: 19,
	        MIDDLEPANNING: 20,
	        EASTPANNING: 21,
	        NORTHPANNING: 22,
	        NORTHEASTPANNING: 23,
	        NORTHWESTPANNING: 24,
	        SOUTHPANNING: 25,
	        SOUTHEASTPANNING: 26,
	        SOUTHWESTPANNING: 27,
	        WESTPANNING: 28,
	        MOVE: 29,
	        VERTICALTEXT: 30,
	        CELL: 31,
	        CONTEXTMENU: 32,
	        ALIAS: 33,
	        PROGRESS: 34,
	        NODROP: 35,
	        COPY: 36,
	        NONE: 37,
	        NOTALLOWED: 38,
	        ZOOMIN: 39,
	        ZOOMOUT: 40,
	        GRAB: 41,
	        GRABBING: 42
	    },

	    /**
	     * 颜色过滤器卷帘模式
	     * @property {String} ROLL_TYPE
	     * @description 卷帘类型： <br>
	     * <pre>
	     *      NONE: 无卷帘效果
	     *      LEFT_TO_RIGHT:  从左到右
	     *      RIGHT_TO_LEFT:  从右到左
	     *      TOP_TO_BOTTOM:  从上到下
	     *      BOTTOM_TO_TOP:  从下到上
	     *      RECT_OUTSIDE_TO_CENTER: 从外到内
	     *      RECT_CENTER_TO_OUTSIDE: 从内到外
	     * </pre>
	     */
	    ROLL_TYPE: {
	        NONE: 'NONE',
	        LEFT_TO_RIGHT: 'LEFT_TO_RIGHT',
	        RIGHT_TO_LEFT: 'RIGHT_TO_LEFT',
	        TOP_TO_BOTTOM: 'TOP_TO_BOTTOM',
	        BOTTOM_TO_TOP: 'BOTTOM_TO_TOP',
	        RECT_OUTSIDE_TO_CENTER: 'RECT_OUTSIDE_TO_CENTER',
	        RECT_CENTER_TO_OUTSIDE: 'RECT_CENTER_TO_OUTSIDE'
	    },

	    PLUGINTYPE: {
	        WIDGET: 'widget',
	        TOOL: 'tool'
	    },
	    /**
	     * 插值策略的几种类型
	     * @property {String} Interpolation
	     * @description 插值类型: <br>
	     *      <pre>
	     *          NEAREST: nearest neighbor
	     *          AVERAGE: averages the neighboring values
	     *          BILINEAR: linear interpolation in both axes
	     *      </pre>
	     * @static
	     * @final
	     */
	    INTERPOLATION: {
	        NEAREST: 'nearst',
	        AVERAGE: 'average',
	        BILINEAR: 'bilinear'
	    },
	    /**
	     * WebSocket状态码
	     * @property {int} WebSocket
	     * @description WebSocket状态码: <br>
	     *      <pre>
	     *          CONNECTING:  尚未建立连接
	     *          OPEN:  连接已经建立
	     *          CLOSING:  连接正在关闭
	     *          CLOSED:  连接已关闭或不可用
	     *      </pre>
	     * @static
	     * @final
	     */
	    WEBSOCKET: {
	        CONNECTING: 0,
	        OPEN: 1,
	        CLOSING: 2,
	        CLOSED: 3
	    },
	    /**
	     * 地球显示模式
	     * @property {String} VIEWMODE
	     * @description 显示模式类型: <br>
	     *      <pre>
	     *          VIEWMODE_2D: 二维显示
	     *          VIEWMODE_3D: 三维显示
	     *      </pre>
	     * @static
	     * @final
	     */
	    VIEWMODE: {
	        VIEWMODE_2D: '2D',
	        VIEWMODE_3D: '3D'
	    },
	    /**
	     * 模型线框显示模式
	     * @property {String} POLYGONMOdel
	     * @description 显示类型: <br>
	     *      <pre>
	     *          LINE: 线型显示
	     *          FILL: 面显示
	     *      </pre>
	     * @static
	     * @final
	     */
	    POLYGONMOdel: {
	        LINE: true,
	        FILL: false
	    },
	    /**
	     * Cache策略type类型
	     * @property {String} CachePolicy
	     * @description 缓存类型: <br>
	     *      <pre>
	     *          READ_WRITE: 缓存可读写
	     *          CACHE_ONLY: 只读缓存
	     *          NO_CACHE: 不缓存
	     *      </pre>
	     * @static
	     * @final
	     */
	    CACHEPOLICY: {
	        READ_WRITE: 'read_write',
	        CACHE_ONLY: 'cache_only',
	        NO_CACHE: 'no_cache'
	    },

	    /**
	     * 线性
	     * @property{Number}
	     * @description 线条显示类型<br>
	     *      <pre>
	     *          SOLID_LINE:实线
	     *          DOTTED_LINE:虚线
	     *      </pre>
	     */
	    LINETYPE: {
	        SOLID_LINE: 0,
	        DOTTED_LINE: 1
	    },

	    /**
	     * 线性
	     * @property{Number}
	     * @description 距离计算模式<br>
	     *      <pre>
	     *          PIXEL_SIZE_ON_SCREEN:
	     *          DISTANCE_FROM_POINT:
	     *      </pre>
	     */
	    RANGEMODE: {
	        PIXEL_SIZE_ON_SCREEN: 0,
	        DISTANCE_FROM_POINT: 1
	    },

	    /**
	     * 线性
	     * @property{Number}
	     * @description 影像块近视角纹理重采样算法<br>
	     *      <pre>
	     *          LINEAR:
	     *          LINEAR_MIPMAP_LINEAR:
	     *          LINEAR_MIPMAP_NEAREST:
	     *          NEAREST:
	     *          NEAREST_MIPMAP_LINEAR:
	     *          NEAREST_MIPMAP_NEAREST:
	     *      </pre>
	     */
	    MAGFILTER: {
	        LINEAR: 0,
	        LINEAR_MIPMAP_LINEAR: 1,
	        LINEAR_MIPMAP_NEAREST: 2,
	        NEAREST: 3,
	        NEAREST_MIPMAP_LINEAR: 4,
	        NEAREST_MIPMAP_NEAREST: 5
	    },

	    /**
	     * 线性
	     * @property{Number}
	     * @description 影像块远视角纹理重采样算法<br>
	     *      <pre>
	     *          LINEAR:
	     *          LINEAR_MIPMAP_LINEAR:
	     *          LINEAR_MIPMAP_NEAREST:
	     *          NEAREST:
	     *          NEAREST_MIPMAP_LINEAR:
	     *          NEAREST_MIPMAP_NEAREST:
	     *      </pre>
	     */
	    MINFILTER: {
	        LINEAR: 0,
	        LINEAR_MIPMAP_LINEAR: 1,
	        LINEAR_MIPMAP_NEAREST: 2,
	        NEAREST: 3,
	        NEAREST_MIPMAP_LINEAR: 4,
	        NEAREST_MIPMAP_NEAREST: 5
	    },

	    CLOUDTYPE: {
	        CIRROCUMULUS: 0, //卷积云
	        CIRRUS_FIBRATUS: 1, //毛卷云
	        STRATUS: 2, //层云
	        // CUMULUS_MEDIOCRIS: 3,  //中积云
	        CUMULUS_CONGESTUS: 4, //浓积云
	        CUMULONIMBUS_CAPPILATUS: 6, //积雨云
	        // STRATOCUMULUS: 7,      //层积云
	        // STRATOCUMULUS_PARTICLES: 8,       //层积云粒子
	        TOWERING_CUMULUS: 9, //高积云
	        SANDSTORM: 10 //沙尘

	    },

	    TARGETMOVETYPE: {
	        TM_TOEND: 0, //表示目标在接收的新位置时从当前位置直接飞到最新位置
	        TM_ORDER: 1, //表示目标会按照接收到位置顺序依次飞行，该种方式与time属性结合使用
	        TM_ORDERFAST: 2, //备用无效
	        TM_POSITION: 3 //表示目标位置直接更新到最新位置，没有飞行动画
	    },
	    TARGETWARNTYPE: {
	        ROTATE: 0, //旋转报警
	        FLICKER: 1 //闪烁报警
	    }

	};

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ENUM.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：LayerManager.js
	 * 作者：巩志远， 钱晶
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn, jqian@mail.ie.ac.cn
	 * 日期：2016-03-22 14:39:11
	 * 用途：图层管理类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _BaseImageLayer = __webpack_require__(16);

	var _BaseImageLayer2 = _interopRequireDefault(_BaseImageLayer);

	var _ImageLayer = __webpack_require__(17);

	var _ImageLayer2 = _interopRequireDefault(_ImageLayer);

	var _TerrainLayer = __webpack_require__(33);

	var _TerrainLayer2 = _interopRequireDefault(_TerrainLayer);

	var _VectorLayer = __webpack_require__(46);

	var _VectorLayer2 = _interopRequireDefault(_VectorLayer);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _GeneralLayerSource = __webpack_require__(34);

	var _GeneralLayerSource2 = _interopRequireDefault(_GeneralLayerSource);

	var _Layer = __webpack_require__(18);

	var _Layer2 = _interopRequireDefault(_Layer);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _Exception = __webpack_require__(35);

	var _Exception2 = _interopRequireDefault(_Exception);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var LayerSet = function (_Class) {
	    _inherits(LayerSet, _Class);

	    function LayerSet(map, paramJson) {
	        _classCallCheck(this, LayerSet);

	        //  set _uuid
	        var _this = _possibleConstructorReturn(this, (LayerSet.__proto__ || Object.getPrototypeOf(LayerSet)).call(this, paramJson));

	        _this._init(map, paramJson); // init_layerSet_Message
	        return _this;
	    }

	    _createClass(LayerSet, [{
	        key: '_init',
	        value: function _init(map, paramJson) {
	            // console.debug('layerSet: ', paramJson);

	            this.setMap(map);
	            this._baseLayer = undefined;
	            this._imageLayers = [];
	            this._terrainLayers = [];
	            this._vectorLayers = [];
	            this.postMessage(_MessageSet2.default.LayerSet.post.doUpdateLayerSet, '');
	            this._complete = false;
	            this._paramJson = paramJson;
	        }
	    }, {
	        key: '_callBack',
	        value: function _callBack(msg) {
	            switch (msg.para1) {
	                case _MessageSet2.default.LayerSet.listen.updateLayerSet:
	                    // console.debug('图层更新: ', msg.para2);
	                    if (this._complete === false) {
	                        this._initLayerSet(msg.para2);
	                    } else {
	                        this._updateLayerSet(msg.para2);
	                    }
	                    break;
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: '_initLayerSet',
	        value: function _initLayerSet(layers) {
	            var _this2 = this;

	            if (this._complete === false) {
	                this._complete = true;
	                var paramJson = this._paramJson;
	                // 无论如何，先得创建baseimage
	                if (!paramJson || !paramJson['baseimage']) paramJson['baseimage'] = {};
	                for (var key in paramJson) {
	                    // 根据读取的image参数创建image（包括baseimage）
	                    switch (key) {
	                        case _TagsEnum2.default.BaseImageLayer:
	                            paramJson[key].uuid = layers[0].layer.uuid;
	                            this.baseLayer = new _BaseImageLayer2.default(paramJson[key], this.map);
	                            break;
	                        case _TagsEnum2.default.ImageLayer:
	                            if (paramJson[key] instanceof Array) {
	                                paramJson[key].forEach(function (image) {
	                                    _this2.addImageLayer(image);
	                                });
	                            } else {
	                                this.addImageLayer(paramJson[key]);
	                            }
	                            break;
	                        case _TagsEnum2.default.TerrainLayer:
	                            if (paramJson[key] instanceof Array) {
	                                paramJson[key].forEach(function (layer) {
	                                    _this2.addTerrainLayer(layer);
	                                });
	                            } else {
	                                this.addTerrainLayer(paramJson[key]);
	                            }
	                            break;
	                        case _TagsEnum2.default.VectorLayer:
	                        case _TagsEnum2.default.NewVectorLayer:
	                            // 临时写法
	                            if (paramJson[key] instanceof Array) {
	                                paramJson[key].forEach(function (layer) {
	                                    _this2.addVectorLayer(layer);
	                                });
	                            } else {
	                                this.addVectorLayer(paramJson[key]);
	                            }
	                            break;
	                        default:
	                            break;
	                    }
	                }
	            }
	            this._paramJson = undefined;
	        }
	    }, {
	        key: '_updateLayerSet',
	        value: function _updateLayerSet(layers) {
	            // 无需判断底图
	            // 判断各个普通图层添加成功与否， 添加失败则移除
	            var uuids = [];
	            for (var i = 1; i < layers.length; i++) {
	                console.debug('receive: ', layers[i]);
	                uuids.push(layers[i].layer.uuid);
	            }
	            this._imageLayers.forEach(function (value, key) {
	                if (uuids.indexOf(value._uuid) < 0) {
	                    // this._imageLayers.splice(key, 1); // 直接从_imageLayers中拿走layer
	                }
	            });
	            this._terrainLayers.forEach(function (value, key) {
	                if (uuids.indexOf(value._uuid) < 0) {
	                    // this._terrainLayers.splice(key, 1); // 直接从_terrainLayers中拿走layer
	                }
	            });
	            this._vectorLayers.forEach(function (value, key) {
	                if (uuids.indexOf(value._uuid) < 0) {
	                    // this._vectorLayers.splice(key, 1); // 直接从_vectorLayers中拿走layer
	                }
	            });
	        }
	    }, {
	        key: '_add',
	        value: function _add(layer) {
	            this.postMessage(_MessageSet2.default.LayerSet.post.addLayer, layer.toXml());
	            // this.postMessage(MessageSet.LayerSet.post.doUpdateLayerSet, '');
	        }
	    }, {
	        key: '_remove',
	        value: function _remove(layer) {
	            this.postMessage(_MessageSet2.default.LayerSet.post.removeLayer, layer._uuid);
	        }
	    }, {
	        key: 'parseLayer',
	        value: function parseLayer(json) {
	            var nextBaseImage = json.baseimage;
	            if (nextBaseImage) {
	                var source = [];
	                if (nextBaseImage.image instanceof Array) {
	                    var _iteratorNormalCompletion = true;
	                    var _didIteratorError = false;
	                    var _iteratorError = undefined;

	                    try {
	                        for (var _iterator = nextBaseImage.image[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                            var _s = _step.value;

	                            source.push(new _GeneralLayerSource2.default(_s));
	                        }
	                    } catch (err) {
	                        _didIteratorError = true;
	                        _iteratorError = err;
	                    } finally {
	                        try {
	                            if (!_iteratorNormalCompletion && _iterator.return) {
	                                _iterator.return();
	                            }
	                        } finally {
	                            if (_didIteratorError) {
	                                throw _iteratorError;
	                            }
	                        }
	                    }
	                } else source.push(new _GeneralLayerSource2.default(nextBaseImage.image));
	                this._baseLayer.updateDataSource(source);
	            }
	            var addLayer = function addLayer(layers, addLayerFn) {
	                if (layers && layers instanceof Array) {
	                    var _iteratorNormalCompletion2 = true;
	                    var _didIteratorError2 = false;
	                    var _iteratorError2 = undefined;

	                    try {
	                        for (var _iterator2 = layers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                            var _layer = _step2.value;
	                            addLayerFn(_layer);
	                        }
	                    } catch (err) {
	                        _didIteratorError2 = true;
	                        _iteratorError2 = err;
	                    } finally {
	                        try {
	                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                                _iterator2.return();
	                            }
	                        } finally {
	                            if (_didIteratorError2) {
	                                throw _iteratorError2;
	                            }
	                        }
	                    }
	                } else if (layers) addLayerFn(layers);
	            };
	            addLayer(json.image, this.addImageLayer.bind(this));
	            addLayer(json.elevation, this.addTerrainLayer.bind(this));
	            addLayer(json.model, this.addVectorLayer.bind(this));
	        }

	        /**
	         * 对外接口：获取所有图层信息
	         * @return {Object}
	         */

	    }, {
	        key: 'getLayers',
	        value: function getLayers() {
	            return {
	                baseLayer: this._baseLayer,
	                imageLayers: this._imageLayers,
	                terrainLayers: this._terrainLayers,
	                vectorLayers: this._vectorLayers
	            };
	        }
	        /**
	         * 对外接口： **[获取所有影像图层]**
	         * @method getImageLayers
	         * @return {Array<ImageLayer>} 返回影像图层数组
	         */

	    }, {
	        key: 'getImageLayers',
	        value: function getImageLayers() {
	            return this._imageLayers;
	        }

	        /**
	         * 对外接口： **[获取所有地形图层]**
	         * @method getTerrainLayers
	         * @return {Array<TerrainLayer>} 返回地形图层数组
	         */

	    }, {
	        key: 'getTerrainLayers',
	        value: function getTerrainLayers() {
	            return this._terrainLayers;
	        }

	        /**
	         * 对外接口： **[获取所有矢量图层]**
	         * @method getVectorLayers
	         * @return {Array<VectorLayer>} 返回矢量图层数组
	         */

	    }, {
	        key: 'getVectorLayers',
	        value: function getVectorLayers() {
	            return this._vectorLayers;
	        }

	        /**
	         * 对外接口： 添加影像图层
	         * @param layerOption {Object}
	         */

	    }, {
	        key: 'addImageLayer',
	        value: function addImageLayer(layerOption) {
	            if (!Util.isObject(layerOption)) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, '添加影像图层', 'layer', '图层对象'));
	                return undefined;
	            }
	            console.log(this);
	            // console.debug(layerOption);
	            var layer = void 0;
	            if (layerOption instanceof _ImageLayer2.default) {
	                layer = layerOption;
	            } else {
	                layer = new _ImageLayer2.default(layerOption, this.map);
	            }
	            this._imageLayers.push(layer);
	            // console.debug('add_layer', layer._uuid);
	            this._add(layer);
	            layer.setMap(this.map);
	            return layer;
	        }

	        /**
	         * 对外接口： 添加地形图层
	         * @param layer {object}
	         */

	    }, {
	        key: 'addTerrainLayer',
	        value: function addTerrainLayer(layerOption) {
	            if (!Util.isObject(layerOption)) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, '添加地形图层', 'layer', '图层对象'));
	                return undefined;
	            }
	            var layer = void 0;
	            if (layerOption instanceof _TerrainLayer2.default) {
	                layer = layerOption;
	            } else {
	                layer = new _TerrainLayer2.default(layerOption, this.map);
	            }
	            this._terrainLayers.push(layer);
	            // console.debug('add_layer', layer._uuid);
	            this._add(layer);
	            layer.setMap(this.map);
	            return layer;
	        }

	        /**
	         * 图层相关操作：添加矢量图层
	         */

	    }, {
	        key: 'addVectorLayer',
	        value: function addVectorLayer(layerOption) {
	            if (!Util.isObject(layerOption)) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, '添加矢量图层', 'layer', '图层对象'));
	                return undefined;
	            }
	            var layer = void 0;
	            if (layerOption instanceof _VectorLayer2.default) {
	                layer = layerOption;
	            } else {
	                layer = new _VectorLayer2.default(layerOption, this.map);
	            }
	            this._vectorLayers.push(layer);
	            // console.debug('add_layer', layer._uuid);
	            this._add(layer);
	            layer.setMap(this.map);
	            return layer;
	        }

	        /**
	         * 添加图层
	         */

	    }, {
	        key: 'addLayer',
	        value: function addLayer(layer) {
	            if (!Util.isObject(layer)) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, '添加图层', 'layer', '图层对象'));
	                return undefined;
	            }
	            if (layer instanceof _VectorLayer2.default) this._vectorLayers.push(layer);else if (layer instanceof _TerrainLayer2.default) this._terrainLayers.push(layer);else if (layer instanceof _ImageLayer2.default) this._imageLayers.push(layer);else return undefined;

	            this._add(layer);
	            layer.setMap(this.map);

	            return layer;
	        }

	        /**
	         * 对外接口： 获取基础图层
	         * @return {BaseImageLayer}
	         */

	    }, {
	        key: 'getBaseLayer',
	        value: function getBaseLayer() {
	            return this._baseLayer;
	        }

	        /**
	         * 根据id获得某一图层
	         * @param id {string}
	         * @return {Layer}
	         */

	    }, {
	        key: 'getLayerById',
	        value: function getLayerById(id) {
	            var _iteratorNormalCompletion3 = true;
	            var _didIteratorError3 = false;
	            var _iteratorError3 = undefined;

	            try {
	                for (var _iterator3 = this._imageLayers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                    var value = _step3.value;

	                    if (value._uuid === id) {
	                        return value;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError3 = true;
	                _iteratorError3 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                        _iterator3.return();
	                    }
	                } finally {
	                    if (_didIteratorError3) {
	                        throw _iteratorError3;
	                    }
	                }
	            }

	            var _iteratorNormalCompletion4 = true;
	            var _didIteratorError4 = false;
	            var _iteratorError4 = undefined;

	            try {
	                for (var _iterator4 = this._vectorLayers[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                    var _value = _step4.value;

	                    // if (value.id === id) {
	                    if (_value._uuid === id) {
	                        return _value;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError4 = true;
	                _iteratorError4 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                        _iterator4.return();
	                    }
	                } finally {
	                    if (_didIteratorError4) {
	                        throw _iteratorError4;
	                    }
	                }
	            }

	            var _iteratorNormalCompletion5 = true;
	            var _didIteratorError5 = false;
	            var _iteratorError5 = undefined;

	            try {
	                for (var _iterator5 = this._terrainLayers[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	                    var _value2 = _step5.value;

	                    if (_value2._uuid === id) {
	                        return _value2;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError5 = true;
	                _iteratorError5 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                        _iterator5.return();
	                    }
	                } finally {
	                    if (_didIteratorError5) {
	                        throw _iteratorError5;
	                    }
	                }
	            }

	            return undefined;
	        }

	        /**
	         * 对外接口：根据名称获取某一个图层
	         * @param name {string}
	         * @return {Layer}
	         */

	    }, {
	        key: 'getLayerByName',
	        value: function getLayerByName(name) {
	            var _iteratorNormalCompletion6 = true;
	            var _didIteratorError6 = false;
	            var _iteratorError6 = undefined;

	            try {
	                for (var _iterator6 = this._imageLayers[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	                    var value = _step6.value;

	                    if (value.name === name) {
	                        return value;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError6 = true;
	                _iteratorError6 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
	                        _iterator6.return();
	                    }
	                } finally {
	                    if (_didIteratorError6) {
	                        throw _iteratorError6;
	                    }
	                }
	            }

	            var _iteratorNormalCompletion7 = true;
	            var _didIteratorError7 = false;
	            var _iteratorError7 = undefined;

	            try {
	                for (var _iterator7 = this._vectorLayers[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
	                    var _value3 = _step7.value;

	                    if (_value3.name === name) {
	                        return _value3;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError7 = true;
	                _iteratorError7 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
	                        _iterator7.return();
	                    }
	                } finally {
	                    if (_didIteratorError7) {
	                        throw _iteratorError7;
	                    }
	                }
	            }

	            var _iteratorNormalCompletion8 = true;
	            var _didIteratorError8 = false;
	            var _iteratorError8 = undefined;

	            try {
	                for (var _iterator8 = this._terrainLayers[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
	                    var _value4 = _step8.value;

	                    if (_value4.name === name) {
	                        return _value4;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError8 = true;
	                _iteratorError8 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
	                        _iterator8.return();
	                    }
	                } finally {
	                    if (_didIteratorError8) {
	                        throw _iteratorError8;
	                    }
	                }
	            }

	            return undefined;
	        }

	        /**
	         * 对外接口: 删除图层（id|layer）
	         * @param layer {Layer|string}
	         */

	    }, {
	        key: '_removeLayer',
	        value: function _removeLayer(layer) {
	            if (layer) {
	                for (var i in this._imageLayers) {
	                    if (this._imageLayers[i]._uuid === layer._uuid) {
	                        this._imageLayers.splice(i, 1);
	                        this._remove(layer);
	                        return;
	                    }
	                }

	                for (var _i in this._terrainLayers) {
	                    if (this._terrainLayers[_i]._uuid === layer._uuid) {
	                        this._terrainLayers.splice(_i, 1);
	                        this._remove(layer);
	                        return;
	                    }
	                }

	                for (var _i2 in this._vectorLayers) {
	                    if (this._vectorLayers[_i2]._uuid === layer._uuid) {
	                        this._vectorLayers.splice(_i2, 1);
	                        this._remove(layer);
	                        return;
	                    }
	                }
	                console.warn('没有找到该图层！');
	            }
	            console.warn('没有找到该图层！');
	        }

	        /**
	         * 对外接口: 删除图层（id|layer）
	         * @param layer {Layer|string}
	         */

	    }, {
	        key: 'removeLayer',
	        value: function removeLayer(layer) {
	            if (typeof layer === 'string') {
	                var tempLayer = void 0;
	                tempLayer = this.getLayerByName(layer);
	                if (!tempLayer) tempLayer = this.getLayerById(layer);
	                layer = tempLayer;
	            }
	            this._removeLayer(layer);
	        }

	        /**
	         * 对外接口: 删除图层（通过图层id）
	         * @param layer {string}
	         */

	    }, {
	        key: 'removeLayerById',
	        value: function removeLayerById(id) {
	            if (typeof id === 'string') {
	                var layer = void 0;
	                layer = this.getLayerById(id);
	                this._removeLayer(layer);
	            }
	        }

	        /**
	         * 对外接口: 删除图层（通过图层名称）
	         * @param layer {string}
	         */

	    }, {
	        key: 'removeLayerByName',
	        value: function removeLayerByName(name) {
	            if (typeof name === 'string') {
	                var layer = void 0;
	                layer = this.getLayerByName(name);
	                this._removeLayer(layer);
	            }
	        }

	        /**
	        * 对内接口：图层移动辅助接口，返回对象{layers, index}
	        * @param layer 
	        * @return {object}
	        */

	    }, {
	        key: '_getlayerInfo',
	        value: function _getlayerInfo(layer) {
	            if (layer instanceof _Layer2.default) {
	                layer = layer.id;
	            }
	            if (typeof layer === 'string') {
	                var tempLayer = void 0;
	                tempLayer = this.getLayerByName(layer);
	                if (!tempLayer) tempLayer = this.getLayerById(layer);
	                layer = tempLayer;
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, '图层移动', 'layer', '图层id或名称或图层对象'));
	                return undefined;
	            }
	            if (layer) {
	                //identify the type of layer that is imagelayer? terrainlayer or vectorlayer
	                var layers = void 0;
	                var index = void 0;
	                if (layer instanceof _ImageLayer2.default && this._imageLayers.indexOf(layer) > -1) {
	                    layers = this._imageLayers;
	                    index = this._imageLayers.indexOf(layer);
	                } else if (layer instanceof _TerrainLayer2.default && this._terrainLayers.indexOf(layer) > -1) {
	                    layers = this._terrainLayers;
	                    index = this._terrainLayers.indexOf(layer);
	                } else if (layer instanceof _VectorLayer2.default && this._vectorLayers.indexOf(layer) > -1) {
	                    layers = this._vectorLayers;
	                    index = this._vectorLayers.indexOf(layer);
	                }
	                return { layers: layers, index: index };
	            }
	            return undefined;
	        }

	        /**
	         * 对内接口：移动
	         * @param layers {Array}, layer{Layer|string}, funName{string}
	         * @return {null}
	         */

	    }, {
	        key: '_moveLayer',
	        value: function _moveLayer(info, layer, idNew) {
	            var layers = info.layers;
	            var length = info.layers.length;
	            var idOld = info.index;
	            layer = layers[idOld];
	            if (idNew === length) {
	                layers.splice(idOld, 1);
	                layers.splice(idNew, 0, layer);
	                this.postMessage(_MessageSet2.default.LayerSet.post.moveLayer, { Uuid: layer._uuid, Id: idNew });
	            } else if (idNew === 0) {
	                layers.splice(idOld, 1);
	                layers.splice(0, 0, layer);
	                this.postMessage(_MessageSet2.default.LayerSet.post.moveLayer, { Uuid: layer._uuid, Id: idNew });
	            } else {
	                layers.splice(idOld, 1);
	                layers.splice(idNew, 0, layer);
	                this.postMessage(_MessageSet2.default.LayerSet.post.moveLayer, { Uuid: layer._uuid, Id: idNew });
	            }
	        }

	        /**
	         * 对外接口 **[上移某一个图层]**
	         * @method moveUp
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'moveUp',
	        value: function moveUp(layer) {
	            var info = this._getlayerInfo(layer);
	            if (info === undefined) return;
	            var idNew = info.index + 1;
	            if (idNew > info.layers.length - 1) {
	                console.log('该图层已处于顶层！');
	                return;
	            }
	            this._moveLayer(info, layer, idNew);
	        }

	        /**
	         * 对外接口 **[下移某一个图层]**
	         * @method moveDown
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'moveDown',
	        value: function moveDown(layer) {
	            var info = this._getlayerInfo(layer);
	            if (info === undefined) return;
	            var idNew = info.index - 1;
	            if (idNew < 0) {
	                console.log('该图层已处于底层！');
	                return;
	            }
	            this._moveLayer(info, layer, idNew);
	        }

	        /**
	         * 对外接口 **[上移图层至顶端]**
	         * @method moveTop
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'moveTop',
	        value: function moveTop(layer) {
	            var info = this._getlayerInfo(layer);
	            if (info === undefined) return;
	            if (info.index === info.layers.length - 1) {
	                console.log('该图层已处于顶层！');
	                return;
	            }
	            var idNew = info.layers.length - 1;
	            this._moveLayer(info, layer, idNew);
	        }

	        /**
	         * 对外接口 **[下移图层至底端]**
	         * @method moveBottom
	         * @param layer {GV.Layer|string} 图层或者图层名称
	         */

	    }, {
	        key: 'moveBottom',
	        value: function moveBottom(layer) {
	            var info = this._getlayerInfo(layer);
	            if (info === undefined) return;
	            if (info.index === 0) {
	                console.log('该图层已处于底层！');
	                return;
	            }
	            var idNew = 0;
	            this._moveLayer(info, layer, idNew);
	        }

	        /**
	         * 对象转json
	         * @method toJson
	         * @return {Object}
	         */

	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var json = {
	                uuid: this._uuid,
	                baseimage: this._baseLayer ? this._baseLayer.toJson() : undefined
	            };
	            var images = this.getImageLayers();
	            if (images.length === 1) json.image = images[0].toJson().image;else if (images.length > 1) {
	                var imgJson = [];
	                images.forEach(function (item) {
	                    return imgJson.push(item.toJson().image);
	                });
	                json.image = imgJson;
	            }
	            var terrains = this.getTerrainLayers();
	            if (terrains.length === 1) json.elevation = terrains[0].toJson().elevation;else if (terrains.length > 1) {
	                var terrainJson = [];
	                terrains.forEach(function (item) {
	                    return terrainJson.push(item.toJson().elevation);
	                });
	                json.elevation = terrainJson;
	            }
	            var vectors = this.getVectorLayers();
	            if (vectors.length === 1) json.model = vectors[0].toJson().model;else if (vectors.length > 1) {
	                var vectorJson = [];
	                vectors.forEach(function (item) {
	                    return vectorJson.push(item.toJson().model);
	                });
	                json.model = vectorJson;
	            }
	            return json;
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '<layers>';
	            xml += '<uuid>' + this._uuid + '</uuid>';
	            xml += this._baseLayer.toXml();
	            var layers = this.getLayers();
	            xml += layers.baseLayer.toXml();
	            layers.imageLayers.forEach(function (layer) {
	                xml += layer.toXml();
	            });
	            layers.terrainLayers.forEach(function (layer) {
	                xml += layer.toXml();
	            });
	            layers.vectorLayers.forEach(function (layer) {
	                xml += layer.toXml();
	            });
	            xml += '</layers>';
	            return xml;
	        }
	    }, {
	        key: 'baseLayer',
	        set: function set(baseImageLayer) {
	            this._baseLayer = baseImageLayer;
	        }
	    }]);

	    return LayerSet;
	}(_Class3.default);

	exports.default = LayerSet;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "LayerSet.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：BaseImageLayer.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2016-03-22 15:15:51
	 * 用途：基础影像类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	var _ImageLayer = __webpack_require__(17);

	var _ImageLayer2 = _interopRequireDefault(_ImageLayer);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _Exception = __webpack_require__(35);

	var _Exception2 = _interopRequireDefault(_Exception);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var BaseImageLayer = function (_Class) {
	    _inherits(BaseImageLayer, _Class);

	    /**
	     * 构造函数： options 仅支持{image: Array<object>, uuid: String}
	     */
	    function BaseImageLayer(params, map) {
	        _classCallCheck(this, BaseImageLayer);

	        var _this = _possibleConstructorReturn(this, (BaseImageLayer.__proto__ || Object.getPrototypeOf(BaseImageLayer)).call(this, { uuid: params.uuid }));

	        _this._init(map, params.image);
	        return _this;
	    }

	    _createClass(BaseImageLayer, [{
	        key: '_init',
	        value: function _init(map, images) {
	            if (Util.$.isPlainObject(images)) {
	                if (!Util.$.isArray(images)) {
	                    images = [images];
	                }
	            }
	            this._imageSet = [];
	            for (var key in images) {
	                var image = new _ImageLayer2.default(images[key], this.map);
	                this._imageSet.push(image);
	            }
	            this.setMap(map);

	            this.postMessage(_MessageSet2.default.Layer.post.setBaseSource, this.toXml());
	        }

	        /**
	         * 设置数据源
	         * @param dataSource {GV.DataSource} 数据源
	         */

	    }, {
	        key: 'updateDataSource',

	        /**
	         * 添加资源
	         * @param sources {Array<ImageSource>}
	         */
	        value: function updateDataSource(sources) {
	            this._imageSet = [];
	            if (!Util.isObject(sources) && !Util.$.isArray(sources)) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, '更新数据资源', 'sources', 'layer object或[layer object]'));
	                return undefined;
	            }
	            if (!(sources instanceof Array)) {
	                // 不建议用户传直接传source
	                var temp = sources;
	                sources = [];
	                sources.push(temp);
	            }
	            this._baseSource = sources;
	            for (var key in sources) {
	                if (sources[key]) {
	                    // console.debug(sources[key]);
	                    var imagery = new _ImageLayer2.default({ source: sources[key] }, this.map);
	                    this._imageSet.push(imagery);
	                }
	            }
	            // console.debug('base_toxml:', this.toXml());
	            this.postMessage(_MessageSet2.default.Layer.post.setBaseSource, this.toXml());
	            return this;
	        }
	        /**
	         * 获取基础影像数据源
	         */

	    }, {
	        key: 'getBaseImageSource',
	        value: function getBaseImageSource() {
	            return this._baseSource ? this._baseSource : undefined;
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var xmlDom = '<baseimage>';
	            var uuidSource = this.uuid ? '<uuid>' + this._uuid + '</uuid>' : '';
	            xmlDom += uuidSource;
	            for (var key in this._imageSet) {
	                if (this._imageSet[key]) {
	                    var source = this._imageSet[key].toXml();
	                    xmlDom += source;
	                }
	            }
	            xmlDom += '</baseimage>';
	            return xmlDom;
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            if (!this._imageSet || this._imageSet.length === 0) return {};else if (this._imageSet.length === 1) {
	                return {
	                    image: this._imageSet[0].toJson().image
	                };
	            }
	            var imgJson = [];
	            this._imageSet.forEach(function (item) {
	                imgJson.push(item.toJson().image);
	            });
	            return {
	                uuid: this._uuid,
	                image: imgJson
	            };
	        }
	    }, {
	        key: 'dataSource',
	        set: function set(dataSource) {
	            this._dataSource = dataSource;
	        },
	        get: function get() {
	            return this._dataSource;
	        }

	        /**
	         * 设置名称
	         */

	    }, {
	        key: 'name',
	        set: function set(name) {
	            this._name = name;
	        },
	        get: function get() {
	            return this._name;
	        }

	        /**
	         * 设置显影
	         */

	    }, {
	        key: 'visible',
	        set: function set(visible) {
	            this._visible = visible;
	        },
	        get: function get() {
	            return this._visible;
	        }
	    }]);

	    return BaseImageLayer;
	}(_Class3.default);

	exports.default = BaseImageLayer;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "BaseImageLayer.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：ImageLayer.js
	 * 作者：钱晶
	 * 部门：产品研发中心
	 * 邮箱：jqian@mail.ie.ac.cn
	 * 日期：2016-03-22 15:16:01
	 * 用途：影像图层类
	 */

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Layer2 = __webpack_require__(18);

	var _Layer3 = _interopRequireDefault(_Layer2);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _GdalLayerSource = __webpack_require__(24);

	var _GdalLayerSource2 = _interopRequireDefault(_GdalLayerSource);

	var _TileMapServiceSource = __webpack_require__(26);

	var _TileMapServiceSource2 = _interopRequireDefault(_TileMapServiceSource);

	var _WebMapServiceSource = __webpack_require__(27);

	var _WebMapServiceSource2 = _interopRequireDefault(_WebMapServiceSource);

	var _XYZLayerSource = __webpack_require__(28);

	var _XYZLayerSource2 = _interopRequireDefault(_XYZLayerSource);

	var _ArcGisLayerSource = __webpack_require__(29);

	var _ArcGisLayerSource2 = _interopRequireDefault(_ArcGisLayerSource);

	var _RstLayerSource = __webpack_require__(30);

	var _RstLayerSource2 = _interopRequireDefault(_RstLayerSource);

	var _GrstLayerSource = __webpack_require__(31);

	var _GrstLayerSource2 = _interopRequireDefault(_GrstLayerSource);

	var _ColorRampLayerSource = __webpack_require__(32);

	var _ColorRampLayerSource2 = _interopRequireDefault(_ColorRampLayerSource);

	var _WebMapTileServiceSource = __webpack_require__(38);

	var _WebMapTileServiceSource2 = _interopRequireDefault(_WebMapTileServiceSource);

	var _GeneralLayerSource = __webpack_require__(34);

	var _GeneralLayerSource2 = _interopRequireDefault(_GeneralLayerSource);

	var _AggLiteLayerSource = __webpack_require__(39);

	var _AggLiteLayerSource2 = _interopRequireDefault(_AggLiteLayerSource);

	var _ColorFilter = __webpack_require__(45);

	var _ColorFilter2 = _interopRequireDefault(_ColorFilter);

	var _CachePolicy = __webpack_require__(36);

	var _CachePolicy2 = _interopRequireDefault(_CachePolicy);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module layer
	 * @main layer
	 */
	var ImageLayer = function (_Layer) {
	    _inherits(ImageLayer, _Layer);

	    /**
	     * 普通影像图层类
	     *  <pre>其作用主要进行地球普通影像图层的定义</pre>
	     * @namespace GV
	     * @extends Layer
	     * @class ImageLayer
	     * @constructor
	     * @param  {undefined} null 不提供构造函数，添加新的影像图层详见 <code>GeoCanvas.addImageLayer()</code> 方法
	     */
	    function ImageLayer() {
	        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        var map = arguments[1];

	        _classCallCheck(this, ImageLayer);

	        return _possibleConstructorReturn(this, (ImageLayer.__proto__ || Object.getPrototypeOf(ImageLayer)).call(this, options, map));
	    }

	    _createClass(ImageLayer, [{
	        key: '_updateColorFilter',

	        /**
	         * 更新卷帘
	         */
	        value: function _updateColorFilter(type, colorFilter) {
	            if (this._post === true || this._post === undefined) {
	                if (!type || !colorFilter) return;
	                this.postMessage(_MessageSet2.default.Layer.post.updateColorFilter, { type: type, colorFilter: colorFilter });
	            }
	        }
	        /**
	         * 更新颜色过滤器
	         */

	    }, {
	        key: '_updateColorFilters',
	        value: function _updateColorFilters(colorFilters) {
	            if (this._post === true || this._post === undefined) {
	                colorFilters = colorFilters === undefined ? '' : colorFilters.toJson();
	                this.postMessage(_MessageSet2.default.Layer.post.updateColorFilters, colorFilters);
	            }
	        }
	    }, {
	        key: '_createSourceData',
	        value: function _createSourceData(options) {
	            switch (options.driver) {
	                case _TagsEnum2.default.GDAL:
	                    this._sourceData = new _GdalLayerSource2.default(options);
	                    break;
	                case _TagsEnum2.default.TMS:
	                    this._sourceData = new _TileMapServiceSource2.default(options);
	                    break;
	                case _TagsEnum2.default.WMS:
	                    this._sourceData = new _WebMapServiceSource2.default(options);
	                    break;
	                case _TagsEnum2.default.WMTS:
	                    this._sourceData = new _WebMapTileServiceSource2.default(options);
	                    break;
	                case _TagsEnum2.default.ArcGIS:
	                    this._sourceData = new _ArcGisLayerSource2.default(options);
	                    break;
	                case _TagsEnum2.default.XYZ:
	                    this._sourceData = new _XYZLayerSource2.default(options);
	                    break;
	                case _TagsEnum2.default.GRST:
	                    this._sourceData = new _GrstLayerSource2.default(options);
	                    break;
	                case _TagsEnum2.default.RST:
	                    this._sourceData = new _RstLayerSource2.default(options);
	                    break;
	                case _TagsEnum2.default.ColorRamp:
	                    this._sourceData = new _ColorRampLayerSource2.default(options);
	                    break;
	                case _TagsEnum2.default.AGGLite:
	                    this._sourceData = new _AggLiteLayerSource2.default(options);
	                    break;
	                default:
	                    this._sourceData = new _GeneralLayerSource2.default(options);
	            }
	        }

	        /**
	         * 设置图层是否可见
	         * @property visible
	         * @type {boolean}
	         */

	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            return this._toXml();
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            return this._toJson();
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.ImageLayer;
	        }
	    }, {
	        key: 'visible',
	        set: function set(visible) {
	            this._visible = visible;
	            this._updateProperty('visible');
	        },
	        get: function get() {
	            return this._visible;
	        }

	        /**
	         * 在没有数据时显示的图像
	         * @property nodataImage
	         * @type {string}
	         */

	    }, {
	        key: 'nodataImage',
	        set: function set(url) {
	            this._nodataImage = url;
	            // const data = {nodataImage: this._nodataImage};
	            // this._setProp(data);
	        },
	        get: function get() {
	            return this._nodataImage;
	        }

	        /**
	         * 设置图层的透明度，取值范围 0-1
	         * @property opacity
	         * @type {double}
	         */

	    }, {
	        key: 'opacity',
	        set: function set(opacity) {
	            if (opacity < 0 || opacity > 1) console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, this.tag, 'opacity', '0~1', 'none', '1'));else {
	                this._opacity = opacity;
	                this._updateProperty('opacity');
	            }
	        },
	        get: function get() {
	            return this._opacity;
	        }

	        /**
	         * 针对相机而言，设置可见的最小范围，如果距离相机的距离比此值还小，将不可见
	         * @property minRange
	         * @type {double}
	         */

	    }, {
	        key: 'minRange',
	        set: function set(minRange) {
	            this._minRange = minRange;
	        },
	        get: function get() {
	            return this._minRange;
	        }

	        /**
	         * 设置可见的最大范围，要是超出此范围，不会绘制此瓦片
	         * @property maxRange
	         * @type {double}
	         */

	    }, {
	        key: 'maxRange',
	        set: function set(maxRange) {
	            this._maxRange = maxRange;
	        },
	        get: function get() {
	            return this._maxRange;
	        }

	        /**
	         * 设置LOD最小可见度
	         * @property minLevel
	         * @type {int}
	         */

	    }, {
	        key: 'minLevel',
	        set: function set(level) {
	            this._minLevel = level;
	        },
	        get: function get() {
	            return this._minLevel;
	        }

	        /**
	         * 设置LOD最大可见度
	         * @property maxLevel
	         * @type {int}
	         */

	    }, {
	        key: 'maxLevel',
	        set: function set(level) {
	            this._maxLevel = level;
	        },
	        get: function get() {
	            return this._maxLevel;
	        }

	        /**
	         * 设置绘制瓦片的最小分辨率
	         * @property minResolution
	         * @type {double}
	         */

	    }, {
	        key: 'minResolution',
	        set: function set(resolution) {
	            this._minResolution = resolution;
	        }

	        /**
	         * 设置绘制瓦片的最大分辨率
	         * @property maxResolution
	         * @type {double}
	         */

	    }, {
	        key: 'maxResolution',
	        set: function set(resolution) {
	            this._maxResolution = resolution;
	        }

	        /**
	         * 对于共享图层，GLSL代码中能够使用的sampler的唯一名称
	         * @property sharedMatrix
	         * @type {string}
	         */

	    }, {
	        key: 'sharedMatrix',
	        set: function set(sharedMatrix) {
	            this._sharedMatrix = sharedMatrix;
	        }

	        /**
	         * 被用来获得合适的融合当图层数据紧挨着没有重叠，用featherAlphaRegions函数，bool值，是否减弱alpha区域
	         * @property featherPixels
	         * @type {boolean}
	         */

	    }, {
	        key: 'featherPixels',
	        set: function set(featherPixels) {
	            this._featherPixels = featherPixels;
	        }

	        /**
	         * 表明这是一个范围图层，例如一个传达具体语义的离散值图层。范围图层禁止任何插值、滤波和压缩
	         * @property coverage
	         * @type {boolean}
	         */

	    }, {
	        key: 'coverage',
	        set: function set(coverage) {
	            this._coverage = coverage;
	        },
	        get: function get() {
	            return this._coverage;
	        }

	        /**
	         * 设置压缩
	         * “auto”：在GPU上压缩纹理  “none” ：禁止压缩.      “fastdxt”：使用FastDXT 实时DXT压缩
	         * @property textureCompression
	         * @type {GV.ENUM}
	         */

	    }, {
	        key: 'textureCompression',
	        set: function set(textureCompression) {
	            this._textureCompression = textureCompression;
	        }

	        /**
	         * 设置图层代理
	         * @property proxy
	         * @type {GV.ProxyOption}
	         */

	    }, {
	        key: 'proxy',
	        set: function set(proxy) {
	            this._proxy = proxy;
	        }

	        /**
	         * 设置滤波库
	         * @property colorFilters
	         * @type {GV.ColorFilters}
	         */

	    }, {
	        key: 'colorFilters',
	        set: function set(colorFilters) {

	            if (colorFilters instanceof _ColorFilter2.default) {
	                this._colorFilters = colorFilters;
	                colorFilters.parent = this;
	            } else if ((typeof colorFilters === 'undefined' ? 'undefined' : _typeof(colorFilters)) === 'object') {
	                this._colorFilters = new _ColorFilter2.default(colorFilters, this);
	            } else {
	                this._colorFilters = undefined;
	            }

	            this._updateColorFilters(this._colorFilters);
	        },
	        get: function get() {
	            return this._colorFilters;
	        }

	        /**
	         * 设置图层没有数据的地方是否可见
	         * @property transparent
	         * @type {boolean}
	         */

	    }, {
	        key: 'transparent',
	        set: function set(transparent) {
	            this._transparent = transparent;
	        },
	        get: function get() {
	            return this._transparent;
	        }

	        /**
	         * 设置瓦片边缘颜色过滤 'r g b a'
	         * @property transparentColor
	         * @type {string}
	         */

	    }, {
	        key: 'transparentColor',
	        set: function set(transparentColor) {
	            this._transparentColor = transparentColor;
	        },
	        get: function get() {
	            return this._transparentColor;
	        }

	        /**
	         * 设置缓存id
	         * @property cacheid
	         * @type {String}
	         */

	    }, {
	        key: 'cacheid',
	        set: function set(cacheid) {
	            if (!cacheid) return;
	            if (this._cacheid === cacheid) return;
	            this._cacheid = cacheid;
	        },
	        get: function get() {
	            return this._cacheid;
	        }

	        /**
	         * 设置缓存策略
	         * @property cachePolicy
	         * @type {GV.CachePolicy}
	         */

	    }, {
	        key: 'cachePolicy',
	        set: function set(cachePolicy) {
	            if (cachePolicy instanceof _CachePolicy2.default) {
	                this._cachePolicy = cachePolicy;
	            } else if ((typeof cachePolicy === 'undefined' ? 'undefined' : _typeof(cachePolicy)) === 'object') {
	                this._cachePolicy = new _CachePolicy2.default(cachePolicy);
	            } else {
	                this._cachePolicy = undefined;
	            }
	        },
	        get: function get() {
	            return this._cachePolicy;
	        }
	    }]);

	    return ImageLayer;
	}(_Layer3.default);

	exports.default = ImageLayer;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ImageLayer.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Layer.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2016-03-22 15:14:16
	 * 用途：图层基类
	 */

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	var _CachePolicyOption = __webpack_require__(19);

	var _CachePolicyOption2 = _interopRequireDefault(_CachePolicyOption);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _DataSource = __webpack_require__(22);

	var _DataSource2 = _interopRequireDefault(_DataSource);

	var _Util2 = __webpack_require__(6);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
	    if (key in obj) {
	        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	    } else {
	        obj[key] = value;
	    }return obj;
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Layer = function (_Class) {
	    _inherits(Layer, _Class);

	    function Layer(options, map) {
	        _classCallCheck(this, Layer);

	        var _this = _possibleConstructorReturn(this, (Layer.__proto__ || Object.getPrototypeOf(Layer)).call(this, options));

	        if (map) {
	            _this.setMap(map);
	        }

	        if (!options.source) {
	            // 内部创建SourceData
	            _this._createSourceData(options);
	        }
	        return _this;
	    }

	    /**
	     * 设置图层的名称，唯一标识
	     * @property name
	     * @type {string}
	     */

	    _createClass(Layer, [{
	        key: 'getExtent',

	        /**
	         * 获取图层四角边框的经纬度
	         * @method getExtent
	         * @param fun {Function} 回调函数 
	         */
	        value: function getExtent(fun) {
	            if (!Util.$.isFunction(fun)) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, '', 'fun', 'function'));
	                return;
	            }
	            if (!this._extent) {
	                this._extentCallback = fun;
	            } else {
	                fun(this._extent);
	            }
	        }
	    }, {
	        key: '_backExtent',
	        value: function _backExtent(para) {
	            if (para === 'getExtent failed!') {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_ARRAY_LAYER_EXTENT));
	                this._extent = {
	                    xMin: -180,
	                    xMax: 180,
	                    yMin: -90,
	                    yMax: 90
	                };
	            } else if (para) {
	                this._extent = {
	                    xMin: para.get_extent.xMin,
	                    xMax: para.get_extent.xMax,
	                    yMin: para.get_extent.yMin,
	                    yMax: para.get_extent.yMax
	                };
	            }
	            if (!this._extentCallback) return;
	            this._extentCallback(this._extent);
	            this._extentCallback = null;
	        }
	    }, {
	        key: '_parseJson',
	        value: function _parseJson(options) {
	            var post = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	            if (post === false) {
	                this._post = false;
	            }

	            if (!this._properties) this._properties = Util.__getSetterProperties(this);

	            for (var key in options) {
	                var tempKey = Util.a_aToaA(key);
	                if (this._properties.indexOf(tempKey) < 0) continue;
	                this[tempKey] = options[key]; // 私有化
	            }

	            this._post = true;
	        }
	    }, {
	        key: '_callBack',
	        value: function _callBack(msg) {
	            switch (msg.para1) {
	                case _MessageSet2.default.Layer.listen.updateLayer:
	                    this._parseJson(msg.para2);
	                    break;
	                case _MessageSet2.default.Layer.post.getExtent:
	                    this._backExtent(msg.para2);
	                    break;
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: '_doUpdate',
	        value: function _doUpdate() {
	            this.postMessage(_MessageSet2.default.Layer.post.doUpdateLayer, '');
	        }

	        /**
	         * 传消息给c++
	         */

	    }, {
	        key: '_updateProperty',
	        value: function _updateProperty(key) {
	            if (this._post === true || this._post === undefined) {
	                var value = this[key] === undefined ? '' : this[key];
	                if (value.toJson) value = value.toJson();
	                this.postMessage(_MessageSet2.default.Layer.post.setProperty, _defineProperty({}, key, value));
	                this._doUpdate();
	            }
	        }
	    }, {
	        key: '_toXml',
	        value: function _toXml(child) {
	            var xml = '';

	            //获得图层配置值
	            if (!this._getproperties) this._getproperties = Util.__getSetterProperties(this);
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this._getproperties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var key = _step.value;

	                    if (this['_' + key] === undefined) continue;
	                    xml = xml + Util._propertyToXml(key, this[key]);
	                }

	                //获得数据源属性
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            if (this._sourceData instanceof _DataSource2.default) {
	                xml = xml + this._sourceData.toXml();
	            }

	            //子类附加属性
	            if (child) {
	                xml = xml + child;
	            }

	            return _get(Layer.prototype.__proto__ || Object.getPrototypeOf(Layer.prototype), '_toXml', this).call(this, xml);
	        }
	    }, {
	        key: '_toJson',
	        value: function _toJson(child) {
	            var json = { uuid: this._uuid };

	            //获得图层配置值
	            if (!this._getproperties) this._getproperties = Util.__getGetterProperties(this);
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = this._getproperties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var _key2 = _step2.value;

	                    if (!this['_' + _key2]) continue;
	                    Util._propertyToJson(this, _key2, json);
	                }

	                //获得数据源配置的值
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            if (this._sourceData instanceof _DataSource2.default) {
	                var sourceDataJson = this._sourceData.toJson();
	                for (var key in sourceDataJson) {
	                    json[key] = sourceDataJson[key];
	                }
	            }

	            //子类附加属性
	            if ((typeof child === 'undefined' ? 'undefined' : _typeof(child)) === 'object') {
	                for (var _key in child) {
	                    json[_key] = child[_key];
	                }
	            }

	            return _defineProperty({}, this.tag, json);
	        }
	    }, {
	        key: 'name',
	        set: function set(name) {
	            // console.debug(this.map, super.map);
	            if (typeof name === "string") {
	                if (this.map) {
	                    this._name = Util.rename(name, this.map._layerSet._layers, 'name');
	                    if (this._name !== name) console.warn("\u56FE\u5C42\u540D\u79F0\u91CD\u590D\uFF0C\u5DF2\u4FEE\u6539\u540D\u79F0\u201C" + name + "\u201D\u4E3A\u201C" + this._name + "\u201D\u3002");
	                } else {
	                    this._name = name;
	                }
	            } else {
	                console.warn("\u56FE\u5C42\u540D\u79F0\u7C7B\u578B\u5E94\u4E3A\"string\"\u3002");
	            }

	            this._updateProperty('name');
	        },
	        get: function get() {
	            return this._name;
	        }

	        /**
	         * 图层支持在那种模式下显示
	         * @property supportedMode
	         * @param supportedMode {string}
	         */

	    }, {
	        key: 'supportedMode',
	        set: function set(supportedMode) {
	            if (!supportedMode) return;
	            this._supportedMode = supportedMode;
	        },
	        get: function get() {
	            return this._supportedMode;
	        }
	    }, {
	        key: 'source',
	        set: function set(source) {

	            if (source instanceof _DataSource2.default) {
	                this._sourceData = source;
	            } else if (source.driver) {
	                this._createSourceData(source);
	            }
	        },
	        get: function get() {
	            return this._sourceData;
	        }
	    }]);

	    return Layer;
	}(_Class3.default);

	exports.default = Layer;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Layer.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * 文件：CachePolicyOption.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com
	 * 日期：2017-03-03 21:08:38.
	 * 用途：缓存策略的配置类
	 */
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Option2 = __webpack_require__(20);

	var _Option3 = _interopRequireDefault(_Option2);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module mapOptions
	 * @namespace GV
	 */
	var CachePolicyOption = function (_Option) {
	    _inherits(CachePolicyOption, _Option);

	    /**
	     * @class CachePolicyOption
	     * @constructor new GV.CachePolicyOption(options);
	     * @param options {JSON} 环境变量参数配置
	     * @param options.usage {GV.ENUM.CACHEPOLICY} 缓存模式
	     * @param options.max_age {float} 失效时间单位秒
	     */
	    function CachePolicyOption(options) {
	        _classCallCheck(this, CachePolicyOption);

	        return _possibleConstructorReturn(this, (CachePolicyOption.__proto__ || Object.getPrototypeOf(CachePolicyOption)).call(this, options));
	    }

	    _createClass(CachePolicyOption, [{
	        key: 'toXml',
	        value: function toXml() {
	            var props = _get(CachePolicyOption.prototype.__proto__ || Object.getPrototypeOf(CachePolicyOption.prototype), 'toXml', this).call(this);
	            return props === '' ? '' : '<cache_policy>' + props + '</cache_policy>';
	        }
	    }, {
	        key: 'usage',
	        set: function set(usage) {
	            this._usage = usage;
	        },
	        get: function get() {
	            return this._usage;
	        }
	    }, {
	        key: 'max_age',
	        set: function set(maxage) {
	            this._max_age = maxage;
	        },
	        get: function get() {
	            return this._max_age;
	        }
	    }]);

	    return CachePolicyOption;
	}(_Option3.default);

	exports.default = CachePolicyOption;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "CachePolicyOption.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * 文件：Option.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com
	 * 日期：2017-03-03 21:00:15.
	 * 用途：环境配置基类
	 */

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Option = function (_Class) {
	    _inherits(Option, _Class);

	    function Option(options, parent) {
	        _classCallCheck(this, Option);

	        var _this = _possibleConstructorReturn(this, (Option.__proto__ || Object.getPrototypeOf(Option)).call(this));

	        if (options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
	            _this._parseJson(options);
	        }

	        _this._parent = parent;
	        return _this;
	    }

	    /**
	     * 父对象
	     * @property parent
	     */
	    // get parent() {
	    //     return this._parent;
	    // }

	    _createClass(Option, [{
	        key: '_updateOptionProperty',
	        value: function _updateOptionProperty(option) {
	            if (this._parent) {
	                this._parent.postMessage("do_update_option", option);
	            }
	        }

	        /**
	         * 初始化程序解析传入数据
	         */

	    }, {
	        key: '_parseJson',
	        value: function _parseJson(param) {
	            if (!this._properties) this._properties = Util.__getSetterProperties(this);
	            for (var key in param) {
	                var tempKey = Util.a_aToaA(key);
	                if (this._properties.indexOf(tempKey) < 0) continue;
	                this[tempKey] = param[key];
	            }
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '';
	            if (!this._getproperties) {
	                this._getproperties = Util.__getGetterProperties(this);
	            }
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this._getproperties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var key = _step.value;

	                    if (this['_' + key] !== undefined) {
	                        xml += Util._propertyToXml(key, this[key]);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return xml;
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var json = {};
	            if (!this._getproperties) {
	                this._getproperties = Util.__getGetterProperties(this);
	            }

	            for (var i = 0; i < this._getproperties.length; i++) {
	                var key = this._getproperties[i];
	                if (this['_' + key] !== undefined) {
	                    Util._propertyToJson(this, key, json);
	                }
	            }

	            return json;
	        }
	    }]);

	    return Option;
	}(_Class3.default);

	exports.default = Option;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Option.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：MessageSet.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com
	 * 日期：2017-03-7 20:24:13.
	 * 用途：对象类型对应的发送事件类型和监听事件类型
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var MessageSet = function (_Class) {
	  _inherits(MessageSet, _Class);

	  function MessageSet() {
	    _classCallCheck(this, MessageSet);

	    return _possibleConstructorReturn(this, (MessageSet.__proto__ || Object.getPrototypeOf(MessageSet)).apply(this, arguments));
	  }

	  return MessageSet;
	}(_Class3.default);

	MessageSet.Enviro = {
	  /*
	   *注册插件
	   *para:插件参数
	   */
	  loadPlugin: 'load_plugin'

	};
	MessageSet.Map = {
	  listen: {
	    /*
	     *鼠标移动事件
	     *para:鼠标相对的三维坐标（精度，维度，高度）
	     */
	    mouseMove: 'mouseMove',

	    /*
	     *鼠标点击事件
	     *para:鼠标相对的三维坐标（精度，维度，高度）
	     */
	    mouseClick: 'mouseClick',

	    mouseRightClick: 'mouseRightClick',

	    /*
	     *球体初始化结束返回的数据(toolbox,widget,layerSet,SceneSet,camera的uuid)
	     */
	    finishCreateMap: 'finish_create_map',

	    /**
	     * 获得当前帧的base64图片
	     */
	    getFrameImageBase64: 'get_frame_image_base64',

	    /**
	     * c++鼠标经纬度位置
	     */
	    location: 'location',

	    /**
	     * 获取帧率统计信息
	     */
	    frameStatInfo: 'get_frame_stat_info'
	  },
	  post: {
	    /*
	     *鼠标移动事件开关相对与'mouseMove'事件
	     *para:设置参数为true时开启c++鼠标移动事件发送，为false时关闭c++鼠标移动事件发送
	     */
	    mouseMoveEnable: 'mouseMoveEnable',

	    /*
	     *创建地图
	     *para:地球实体的参数
	     */
	    createMap: 'mapadapter',

	    /*
	     *二三维切换事件
	     *para:切换到二维还是三维，'2D'是二维、'3D'是三维
	     */
	    changeView: 'change_view',

	    /**
	     * 修改地图时间
	     */
	    setCurrentClock: 'set_current_clock',

	    /*
	     *保存gvml文件
	     */
	    saveGvml: 'save_gvml',

	    /**
	     * 保存当前视口下的场景图片
	     * @param imageparam {url:,s:,t} url保存的图片路径，s图片宽度(像素)，t图片高度（像素） 
	     */
	    saveFrameImage: 'save_frame_image',

	    /**
	     * 获得当前帧的base64图片
	     */
	    getFrameImageBase64: 'get_frame_image_base64',

	    /**
	     * 获得当前地图时间
	     */
	    getCurrentClock: 'get_current_clock',

	    /**
	     * 获取帧率统计信息
	     */
	    frameStatInfo: 'get_frame_stat_info'
	  }
	};
	MessageSet.Clock = {
	  post: {
	    /**
	     * 修改地图时间
	     */
	    setCurrentClock: 'set_current_clock',
	    /**
	     * 获得当前地图时间
	     */
	    getCurrentClock: 'get_current_clock',
	    /**
	     * 时间运行开始
	     */
	    startClock: 'startClock',
	    /**
	     * 时间运行暂停
	     */
	    pauseClock: 'pauseClock',
	    /**
	     * 加速时间运行
	     */
	    speedClock: 'speedClock',
	    /**
	     * 重置时间(如在对时间加速1000倍后，可重置为正常运行的时间)
	     */
	    resetClock: 'resetClock'
	  }
	};
	MessageSet.ToolBox = {
	  listen: {
	    /*
	     *更新工具列表
	     *para:返回的是各个插件（名称和uuid）的列表
	     */
	    updateToolBox: 'update_toolbox'
	  },
	  post: {
	    /*
	     *请求更新
	     */
	    doUpdateToolBox: 'do_update_toolbox',

	    /*
	     *选择当前工具
	     *para1当前工具的名称
	     */
	    selectCurrentTool: 'select_current_tool'

	  }
	};
	MessageSet.WidgetBox = {
	  listen: {
	    /*
	     *更新挂件列表
	     *para:返回的是各个挂件（名称和uuid）的列表
	     */
	    updateWidgetBox: 'update_widgetbox'
	  },
	  post: {
	    /*
	     *请求更新
	     */
	    doUpdateWidgetBox: 'do_update_widgetbox',

	    /*
	     *开启挂件
	     *para1挂件名称
	     */
	    usingWidget: 'using_widget',

	    /*
	     *关闭挂件
	     *para1挂件名称
	     */
	    unusingWidget: 'unusing_widget'

	  }
	};
	MessageSet.Camera = {
	  actionFinish: 'action_finish',
	  /**
	   * 经纬坐标转屏幕坐标
	   * 发送{id: ,lon: ,lat: , alt: }
	   * 接收{geo_to_screen:{id:, x: , y: }}
	   */
	  geoToScreen: 'geo_to_screen',

	  /**
	   * 屏幕坐标转经纬度坐标
	   * 发送:{x:, y:, id:} 屏幕坐标与标识
	   * 接收:{lon:,lat:,alt,id} 经纬度坐标与标识
	  */
	  screenToGeo: 'screen_to_geo',

	  /**
	   * 监听相机的变化
	   * 接收:{camera_change:{
	   *              forcus_region:{},
	   *              viewpoint: {},
	   *              tiles:[]}}
	   */
	  updateCamera: 'update_camera',

	  /**
	   * 监听相机按路径漫游结束
	   */
	  flyByPathEnd: 'fly_by_path_end',

	  /*
	   *平移相机
	   *para：{dx: x, dy: y}
	   */
	  pan: 'pan',

	  /*
	   *旋转相机
	   *para：{dx: x, dy: y}
	   */
	  rotate: 'rotate',

	  /*
	   *缩放相机
	   *para：{dy:y}
	   */
	  zoom: 'zoom',

	  /**
	   * 设置默认位置
	   * para: {vp: newHome}
	   */
	  home: 'home',

	  /**
	   * 设置相机最大最小范围
	   * para: {min: min, max: max}
	   */
	  minMaxDistance: 'min_max_distance',

	  /*
	   *飞行到指定位置
	   *para:{vp:vp, time: time}飞行目标位置和飞行时间
	   */
	  flyTo: 'fly_to',

	  /*
	   *按路径漫游
	   *para:{vp:vp, time: time}飞行目标位置和飞行时间
	   */
	  flyByPath: 'fly_by_path',

	  /*
	   *取消按路径漫游
	   */
	  cancelFlyByPath: 'cancel_fly_by_path',

	  /*
	   *暂停按路径漫游
	   */
	  pauseFlyByPath: 'pause_fly_by_path',

	  /*
	   *从新开始按路径漫游
	   */
	  restartFlyByPath: 'restart_fly_by_path',

	  ///////////转为地理坐标与屏幕坐标转换准备的消息
	  /**
	   * 添加地理坐标监听对象
	   */
	  addGeo: 'add_geo',

	  /**
	   * 删除地理坐标监听对象
	   */
	  removeGeo: 'remove_geo',

	  /**
	   * 更新地理坐标信息
	   * 发送 {id: ,lon: , lat: ,alt:}
	   * 接收 {screen:{id: , x: , y:}}
	   */
	  updateGeo: 'update_geo',

	  /**
	   * 添加屏幕坐标监听对象
	   */
	  addScreen: 'add_screen',

	  /**
	   * 删除屏幕坐标监听对象
	   */
	  removeScreen: 'remove_screen',

	  /**
	   * 更新屏幕坐标信息
	   * 发送 {id: ,x: , y: }
	   * 接收 {screen:{id: , lon: , lat: ,alt: }}
	   */
	  updateScreen: 'update_screen',

	  /**
	   * 这只是否为漫游模式
	   * 发送false|true false 为正常模式，true为漫游模式
	   */
	  roaming: 'roaming',

	  /**
	   * 相机绑定跟随对象
	   * 发送：uuid 跟随对象的uuid
	   */
	  bingdingFollowObject: 'bingding_follow_object'

	};
	MessageSet.SceneSet = {
	  /**
	   * 添加场景节点
	   * 发送:<scene>XXX<scene/> 专题场景xml数据
	   * 接收:{para1：add_scene，para2：{uuid:Scene.uuid,success:boolean}，type：SceneSet.uuid}
	  */
	  addScene: 'add_scene',

	  /*
	      *删除场景节点
	      *para:要删除场景节点的uuid
	      */
	  removeScene: 'remove_scene',

	  /*
	      *请求拿到所有的场景节点的uuid和类型
	      *
	      */
	  doUpdataSceneSet: 'doUpdataSceneSet',

	  /*
	      *根据实体节点uuid得到实体节点对应的父节点
	      *para: 实体节点的uuid
	      */
	  doGetScene: 'doGetScene',

	  /**
	   * 所有场景求交
	   * 发送：{id:, x:, y:}
	   * 接受：{pick:{id:, data:}}
	   */
	  pick: 'pick'

	};
	MessageSet.Scene = {

	  /**
	   * 
	   * 添加实体节点
	   * 发送：<node>xxx<node/>实体的xml描述
	   * 接收：{para1：xxx，para2：{uuid:xxx,success:boolean}，type：xx}
	   * 
	   */
	  addNode: 'add_node',

	  /*
	  *删除场景节点
	  *para:要删除场景节点的uuid
	  */
	  removeNode: 'remove_node',

	  /**
	   * 设置专题场景显隐
	   * 发送：{visible:true|false}
	   * 接收：{para1：xxx，para2：true|false，type：xx}
	   */
	  setVisible: 'visible',

	  /**
	   * 所有场景求交
	   * 发送：{id:, x:, y:}
	   * 接受：{pick:{id:, data:}}
	   */
	  pick: 'pick'
	};
	MessageSet.Node = {
	  /**
	   * 设置实体节点属性
	   */
	  updateProperty: 'update_property',

	  /**
	   * 更新c++属性到实体
	   */
	  doUpdateProperty: 'do_update_property',

	  /** 
	    *监听节点地理坐标变化
	    */
	  geoPoint: 'geo_point',

	  /**
	   * 改变顶点属性
	   */
	  changePoints: 'change_points'

	  /**
	   * 设置实体绑定id
	   */
	};
	MessageSet.LayerSet = {
	  listen: {
	    /*
	     *更新图层集合体
	     *para:图层集合体数据[{layer:{uuid:..,type:..}},{layer:{uuid:..,type:..}]
	     */
	    updateLayerSet: 'update_layerset'
	  },
	  post: {
	    /*
	     *请求拿到所有图层的uuid和类型
	     */
	    doUpdateLayerSet: 'do_update_layerset',

	    addLayer: 'add_layer',

	    removeLayer: 'remove_layer',

	    moveLayer: 'move_layer'

	  }
	};
	MessageSet.Layer = {
	  listen: {
	    /*
	     *更新场景集合
	     *para:场景集合（包括场景的uuid和类型）
	     */
	    updateLayer: 'update_layer'
	  },
	  post: {
	    /*
	     *请求拿到所有的场景节点的uuid和类型
	     *
	     */
	    doUpdateLayer: 'do_update_layer',
	    /**
	     * 更新基础图层数据源
	     */
	    setBaseSource: 'update_base_layer',
	    /**
	     * 更新layer的属性
	     * param：{propertyName: propertyValue}
	     */
	    setProperty: 'set_layer_property',

	    /**
	     * 更新卷帘属性
	     */
	    updateColorFilter: 'update_color_filter',

	    /**
	     * 更新颜色过滤器
	     */
	    updateColorFilters: 'update_color_filters',

	    /*
	     *停止更新数据
	     */
	    stopDo: 'stopDo',

	    /**
	     * 更新颜色过滤器
	     */
	    setColorFilters: 'set_color_filters',

	    /**
	     * 更新卷帘颜色缓冲区
	     */
	    updateRollColorFilter: 'update_roll_color_filter',
	    /**
	     * 获取图层范围
	     */
	    getExtent: 'get_extent'

	  }
	};
	MessageSet.SatelliteScene = {
	  addSatellite: 'add_satellite',
	  removeSatellite: 'remove_satellite',
	  updateProperty: 'update_property'
	};
	MessageSet.DynTargetScene = {

	  /**
	   * 推送态势目标时目标是否显示
	   * 发送：bool
	   */
	  initVisible: 'init_visible',

	  /**
	   * 获取当前态势的所有数据信息
	   * 发送：
	   * 接受:[]
	   */
	  getAllTargetsInfo: 'get_all_targets_info',

	  /**
	   * 监听态势创建完成信息 （当init_visible= false时使用）
	   * 接受：？？
	   */
	  createTargetUpdate: 'create_target_update',

	  /**
	   * 添加动目标
	   * 发送：{id:,layername:,attribure:,libid:,codeid:}
	   * 接受：id(创建成功不返回，创建失败返回id)
	   */
	  createTarget: 'create_target',

	  createTargets: 'create_targets',

	  createTargetByDescription: 'create_target_by_description',

	  createDyntarget: 'dyntarget_create',
	  /**
	   * 更新位置属性
	   * 
	   */
	  updateTargetPosition: 'update_position_target',

	  /**
	   * 更新属性
	   */
	  updateTargetProperty: 'update_property_target',

	  /**
	   * 目标显隐
	   * 发送：true|false
	   */
	  setTargetVisible: 'visible_target',

	  /**
	   * 删除target
	   * 发送：id
	   */
	  removeTarget: 'remove_target',

	  /**
	   * 清楚所有目标
	   */
	  clearTarget: 'clear_target',

	  /**
	   * 设置目标图层
	   */
	  setTaragetLayer: 'set_taraget_layer',

	  /**
	   * 获取目标军标码
	   */
	  getTargetSymbolCode: 'get_symbol_code',

	  /**
	   * 获取目标世界坐标
	   */
	  getTargetWorldPos: 'get_target_world_pos',

	  /**
	   * 获取目标屏幕坐标
	   */
	  getTargetScreenPos: 'get_target_screen_pos',

	  /**
	   * 获取目标世界坐标
	   */
	  getTargetGeoPos: 'get_target_geo',

	  /**
	   * 根据item ID获取目标
	   */
	  getTargetByItemId: 'get_attribute_by_uid',

	  /**
	   * 设置目标跟随
	   */
	  setTargetFollow: 'set_taraget_follower',

	  /**
	   * 清除目标跟随
	   */
	  clearTaragetFollower: 'clear_taraget_follower',

	  /**
	   * 获取所有图层名称
	   */
	  getLayersName: 'get_layers_name',

	  /**
	   * 设置图层显隐
	   */
	  setLayerVisible: 'set_layer_visible',

	  /**
	   * 获得图层显隐状态
	   */
	  getLayerVisible: 'get_layer_visible',

	  /**
	   * 删除图层
	   */
	  removeLayer: 'remove_layer',

	  /**
	   * 修改该图层名称
	   */
	  renameLayer: 'rename_layer',

	  /**
	   * 获得图层所有目标
	   */
	  getTargetsFromLayer: 'get_targets_from_layer',

	  /**
	   * 删除所有图层
	   */
	  clearLayers: 'clear_layer',

	  /**
	   * 创建目标连接线
	   */
	  createConnectLine: 'create_connect_line',

	  /**
	   * 删除目标连接线
	   */
	  removeConnetLine: 'remove_connet_line',

	  /**
	   * 设置连接线显隐
	   */
	  setConnectLineVisible: 'set_connect_line_visible',

	  /**
	   * 清除所有线
	   */
	  clearConnetLines: 'clear_connet_lines',

	  /**
	   * 设置预警目标
	   */
	  setTargetWarn: 'set_target_warn',

	  /**
	   * 移除目标预警
	   */
	  removeTargtetWarn: 'remove_targtet_warn',

	  /**
	   * 清除所有预警
	   */
	  clearWarn: 'clear_warn',

	  /**
	   * 设置目标颜色
	   */
	  setTargetColor: 'set_taraget_color'

	};
	MessageSet.PlaceNameScene = {
	  placeUrl: 'place_url'
	};
	MessageSet.MilScene = {
	  milTree: 'get_mil_tree',
	  milCategory: 'get_mil_category'
	};
	MessageSet.WeatherScene = {
	  /**
	   * 加载cap数据
	   */
	  setCurCap: 'set_cur_cap',

	  /**
	   * 加载cref数据
	   */
	  setCurCref: 'set_cur_cref',

	  /**
	   * 加载surface数据
	   */
	  setCurSurface: 'set_cur_surface'
	};
	MessageSet.ElecScene = {
	  /**
	   * 创建雷达 
	   */
	  createRadar: 'create_radar'
	};
	MessageSet.Math = {
	  /**
	   * 根据两个经维度的点得到连个点的长度
	   * 发送：{geo1:{lon:, lat: ,alt:}, geo2:{lon:, lat:, alt:}, id:}
	   * 接收：{distance:{id:, data:}}
	   */
	  distance: 'distance',

	  /**
	   * 面积
	   * 发送: GV.Vertices.toxml
	   * 接收: {area: {id: ,data:}}
	   */
	  area: 'area',

	  /**
	   * 方位角
	   * 发送：{geo1:{lon:, lat: ,alt:}, geo2:{lon:, lat:, alt:}, id:}
	   * 接收：{azimuthalAngle:{id:, data:}}
	   */
	  azimuthalAngle: 'azimuthal_angle'
	};
	exports.default = MessageSet;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "MessageSet.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}(); /**
	      * 项目：gvml
	      * 文件：DataSource.js
	      * 作者：钱晶
	      * 部门：产品研发中心
	      * 邮箱：jqian@mail.ie.ac.cn
	      * 日期：2017-03-20 11:43:49.
	      * 用途：基础图层数据源类
	      */

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	var DataSource = function () {
	    function DataSource(options) {
	        _classCallCheck(this, DataSource);

	        this._parseJson(options);
	    }

	    _createClass(DataSource, [{
	        key: '_parseJson',
	        value: function _parseJson(options) {
	            if (!options && !((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object')) return;

	            if (!this._setproperties) {
	                this._setproperties = Util.__getSetterProperties(this);
	            }
	            for (var key in options) {
	                var tempKey = Util.a_aToaA(key);
	                if (this._setproperties.indexOf(tempKey) < 0) continue;
	                this['' + tempKey] = options[key]; // 私有化
	            }
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '';
	            if (!this._getproperties) {
	                this._getproperties = Util.__getGetterProperties(this);
	            }
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this._getproperties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var key = _step.value;

	                    if (this['_' + key] !== undefined || key === 'driver') {
	                        xml += Util._propertyToXml(key, this[key]);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return xml;
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson(json) {
	            if (!json) json = {};
	            if (!this._getproperties) {
	                this._getproperties = Util.__getGetterProperties(this);
	            }

	            for (var i = 0; i < this._getproperties.length; i++) {
	                var key = this._getproperties[i];
	                if (this['_' + key] !== undefined || key === 'driver') {
	                    //直接从私有变量中回去数据 driver除外
	                    Util._propertyToJson(this, key, json);
	                }
	            }

	            return json;
	        }
	    }]);

	    return DataSource;
	}();

	exports.default = DataSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "DataSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：TagsEnum.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2017-03-31 15:24:14.
	 * 用途：标签枚举类
	 */

	'use strict';

	/**
	 * @module global
	 */
	/**
	 * 标签枚举类
	 * @namespace GV
	 * @class TagEnum
	 */

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _BaseImageLayer$Image;

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	exports.default = (_BaseImageLayer$Image = {
	  /**
	   * @property {String} Layer
	   * @description 图层相关标签
	   * @static
	   * @final
	   * @default image
	   */
	  BaseImageLayer: 'baseimage',
	  ImageLayer: 'image',
	  TerrainLayer: 'elevation',
	  VectorLayer: 'model',
	  NewVectorLayer: 'vector',
	  ColorFilter: 'color_filters',
	  Proxy: 'proxy',
	  CachePolicy: 'cache_policy',

	  /**
	   * @property {String} driver
	   * @description 图层数据源driver
	   */
	  ArcGIS: 'arcgis',
	  GDAL: 'gdal',
	  TMS: 'tms',
	  WMS: 'wms',
	  TWMS: 'twms',
	  WMTS: 'wmts',
	  XYZ: 'xyz',
	  OSG: 'osg',
	  QuadKey: 'quadkey',
	  Debug: 'debug',
	  TileCache: 'tilecache',
	  VPB: 'vpb',
	  WCS: 'wcs',
	  ColorRamp: 'colorramp',
	  RST: 'rst',
	  GRST: 'grst',
	  MBTiles: 'mbtiles',
	  Noise: 'noise',
	  WorldWind: 'worldwind',

	  AGGLite: 'agglite',

	  FeatureGeom: 'feature_geom',
	  OGR: 'ogr',
	  WFS: 'wfs',
	  TFS: 'tfs'

	}, _defineProperty(_BaseImageLayer$Image, 'ArcGIS', 'arcgis'), _defineProperty(_BaseImageLayer$Image, 'GDAL', 'gdal'), _defineProperty(_BaseImageLayer$Image, 'TMS', 'tms'), _defineProperty(_BaseImageLayer$Image, 'WMS', 'wms'), _defineProperty(_BaseImageLayer$Image, 'TWMS', 'twms'), _defineProperty(_BaseImageLayer$Image, 'XYZ', 'xyz'), _defineProperty(_BaseImageLayer$Image, 'OSG', 'osg'), _defineProperty(_BaseImageLayer$Image, 'QuadKey', 'quadkey'), _defineProperty(_BaseImageLayer$Image, 'Debug', 'debug'), _defineProperty(_BaseImageLayer$Image, 'TileCache', 'tilecache'), _defineProperty(_BaseImageLayer$Image, 'VPB', 'vpb'), _defineProperty(_BaseImageLayer$Image, 'WCS', 'wcs'), _defineProperty(_BaseImageLayer$Image, 'ColorRamp', 'colorramp'), _defineProperty(_BaseImageLayer$Image, 'RST', 'rst'), _defineProperty(_BaseImageLayer$Image, 'GRST', 'grst'), _defineProperty(_BaseImageLayer$Image, 'MBTiles', 'mbtiles'), _defineProperty(_BaseImageLayer$Image, 'Noise', 'noise'), _defineProperty(_BaseImageLayer$Image, 'WorldWind', 'worldwind'), _defineProperty(_BaseImageLayer$Image, 'AGGLite', 'agglite'), _defineProperty(_BaseImageLayer$Image, 'FeatureGeom', 'feature_geom'), _defineProperty(_BaseImageLayer$Image, 'OGR', 'ogr'), _defineProperty(_BaseImageLayer$Image, 'WFS', 'wfs'), _defineProperty(_BaseImageLayer$Image, 'SceneSet', 'scenes'), _defineProperty(_BaseImageLayer$Image, 'GraphicScene', 'graphicscene'), _defineProperty(_BaseImageLayer$Image, 'DynTargetScene', 'dyntargetscene'), _defineProperty(_BaseImageLayer$Image, 'WeatherScene', 'weatherscene'), _defineProperty(_BaseImageLayer$Image, 'PlaceNameScene', 'placenamescene'), _defineProperty(_BaseImageLayer$Image, 'ObliqueScene', 'obliquescene'), _defineProperty(_BaseImageLayer$Image, 'Place', 'place'), _defineProperty(_BaseImageLayer$Image, 'Feature', 'feature'), _defineProperty(_BaseImageLayer$Image, 'Model', 'model'), _defineProperty(_BaseImageLayer$Image, 'Polyline', 'polyline'), _defineProperty(_BaseImageLayer$Image, 'Polygon', 'polygon'), _defineProperty(_BaseImageLayer$Image, 'Spline', 'spline'), _defineProperty(_BaseImageLayer$Image, 'Position', 'position'), _defineProperty(_BaseImageLayer$Image, 'Drawable', 'drawable'), _defineProperty(_BaseImageLayer$Image, 'Circle', 'circle'), _defineProperty(_BaseImageLayer$Image, 'Ellipse', 'ellipse'), _defineProperty(_BaseImageLayer$Image, 'Label', 'label'), _defineProperty(_BaseImageLayer$Image, 'Cone', 'cone'), _defineProperty(_BaseImageLayer$Image, 'Sphere', 'sphere'), _defineProperty(_BaseImageLayer$Image, 'ImageOverLay', 'imageoverlay'), _defineProperty(_BaseImageLayer$Image, 'GeoMesh', 'geomesh'), _defineProperty(_BaseImageLayer$Image, 'LocalMesh', 'localmesh'), _defineProperty(_BaseImageLayer$Image, 'PointCloud', 'pointcloud'), _defineProperty(_BaseImageLayer$Image, 'Bubble', 'bubble'), _defineProperty(_BaseImageLayer$Image, 'Ellipsoid', 'ellipsoid'), _defineProperty(_BaseImageLayer$Image, 'Cube', 'cube'), _defineProperty(_BaseImageLayer$Image, 'FieldData', 'fielddata'), _defineProperty(_BaseImageLayer$Image, 'Icon', 'icon'), _defineProperty(_BaseImageLayer$Image, 'JBPoint', 'jbpoint'), _defineProperty(_BaseImageLayer$Image, 'JBLine', 'jbline'), _defineProperty(_BaseImageLayer$Image, 'MilScene', 'milscene'), _defineProperty(_BaseImageLayer$Image, 'MilItem', 'militem'), _defineProperty(_BaseImageLayer$Image, 'SatelliteScene', 'satellitescene'), _defineProperty(_BaseImageLayer$Image, 'satellite', 'satellite'), _defineProperty(_BaseImageLayer$Image, 'FireEffect', 'fireeffect'), _defineProperty(_BaseImageLayer$Image, 'SmokeEffect', 'smokeeffect'), _defineProperty(_BaseImageLayer$Image, 'RainEffect', 'raineffect'), _defineProperty(_BaseImageLayer$Image, 'PointEffect', 'pointeffect'), _defineProperty(_BaseImageLayer$Image, 'ParticaleEffect', 'particale'), _defineProperty(_BaseImageLayer$Image, 'WaveEffect', 'wave'), _defineProperty(_BaseImageLayer$Image, 'ExplosionEffect', 'explosioneffect'), _BaseImageLayer$Image);

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "TagsEnum.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _TileSource2 = __webpack_require__(25);

	var _TileSource3 = _interopRequireDefault(_TileSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：GdalLayerSource.js
	   * 作者：钱晶
	   * 部门：产品研发中心
	   * 邮箱：jqian@mail.ie.ac.cn
	   * 日期：2017-03-20 11:43:49.
	   * 用途：图层数据源类
	   */

	/**
	 * @module DataSource
	 * @main DataSource
	 */
	var GdalLayerSource = function (_TileSource) {
	    _inherits(GdalLayerSource, _TileSource);

	    function GdalLayerSource() {
	        _classCallCheck(this, GdalLayerSource);

	        return _possibleConstructorReturn(this, (GdalLayerSource.__proto__ || Object.getPrototypeOf(GdalLayerSource)).apply(this, arguments));
	    }

	    _createClass(GdalLayerSource, [{
	        key: 'driver',

	        /**
	         * OSG支持的gdal服务数据源
	         *  <pre>其作用主要进行地球影像和地形图层数据源的定义</pre>
	         * @namespace GV
	         * @extends TileSource
	         * @class GdalLayerSource
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.url {string} 文件路径（暂只支持本地路径）
	         * @param options.redIndex {int}  [1,2,3,...maxBand] 红色波段索引
	         * @param options.greenIndex {int}  [1,2,3,...maxBand] 绿色波段索引
	         * @param options.blueIndex {int}  [1,2,3,...maxBand] 蓝色波段索引
	         */

	        /*
	        * 数据驱动driver
	        * @property driver
	        * @type {string}
	        */
	        get: function get() {
	            return _TagsEnum2.default.GDAL;
	        }
	        /**
	         * 文件路径（暂只支持本地路径）
	         * @property url
	         * @type {string}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            if (this._url !== undefined) return;
	            //TODO条件判断
	            this._url = url;
	        },
	        get: function get() {
	            return this._url === undefined ? '' : this._url;
	        }

	        /**
	         * [1,2,3,...maxBand] 红色波段索引
	         * @property redIndex
	         * @type {int}
	         */

	    }, {
	        key: 'redIndex',
	        set: function set(redIndex) {
	            if (this._redIndex !== undefined) return;
	            //TODO条件判断
	            this._redIndex = redIndex;
	        },
	        get: function get() {
	            return this._redIndex === undefined ? '' : this._redIndex;
	        }

	        /**
	         * [1,2,3,...maxBand] 绿色波段索引
	         * @property greenIndex
	         * @type {int}
	         */

	    }, {
	        key: 'greenIndex',
	        set: function set(greenIndex) {
	            if (this._greenIndex !== undefined) return;
	            //TODO条件判断
	            this._greenIndex = greenIndex;
	        },
	        get: function get() {
	            return this._greenIndex === undefined ? '' : this._greenIndex;
	        }

	        /**
	         * [1,2,3,...maxBand] 蓝色波段索引
	         * @property blueIndex
	         * @type {int}
	         */

	    }, {
	        key: 'blueIndex',
	        set: function set(blueIndex) {
	            if (this._blueIndex !== undefined) return;
	            //TODO条件判断
	            this._blueIndex = blueIndex;
	        },
	        get: function get() {
	            return this._blueIndex === undefined ? '' : this._blueIndex;
	        }

	        /*
	         * 支持的文件后缀名
	         * @property extensitions
	         * @type {string}
	         */

	    }, {
	        key: 'extensitions',
	        set: function set(extensitions) {
	            if (this._extensitions !== undefined) return;
	            //TODO条件判断
	            this._extensitions = extensitions;
	        },
	        get: function get() {
	            return this._extensitions === undefined ? '' : this._extensitions;
	        }

	        /*
	         * 不支持的文件后缀名
	         * @property blackExtension
	         * @type {string}
	         */

	    }, {
	        key: 'blackExtension',
	        set: function set(blackExtension) {
	            if (this._blackExtension !== undefined) return;
	            //TODO条件判断
	            this._blackExtension = blackExtension;
	        },
	        get: function get() {
	            return this._blackExtension === undefined ? '' : this._blackExtension;
	        }

	        /*
	         * 用来打开数据库的链接信息
	         * @property connection
	         * @type {string}
	         */

	    }, {
	        key: 'connection',
	        set: function set(connection) {
	            if (this._connection !== undefined) return;
	            //TODO条件判断
	            this._connection = connection;
	        },
	        get: function get() {
	            return this._connection === undefined ? '' : this._connection;
	        }

	        /*
	         * interpolation method to use when resampling source data
	         * @property interpolation
	         * @type {enum}
	         */

	    }, {
	        key: 'interpolation',
	        set: function set(interpolation) {
	            if (this._interpolation !== undefined) return;
	            //TODO条件判断
	            this._interpolation = interpolation;
	        },
	        get: function get() {
	            return this._interpolation === undefined ? '' : this._interpolation;
	        }

	        /*
	         * 数据能够达到的最大层级
	         * @property maxDataLevel
	         * @type {int}
	         */

	    }, {
	        key: 'maxDataLevel',
	        set: function set(maxDataLevel) {
	            if (this._maxDataLevel !== undefined) return;
	            //TODO条件判断
	            this._maxDataLevel = maxDataLevel;
	        },
	        get: function get() {
	            return this._maxDataLevel === undefined ? '' : this._maxDataLevel;
	        }

	        /*
	         * Some GDAL-supported formats support sub-datasets;
	         * use this property to specify such a data source.
	         * @property subdataset
	         * @type {string}
	         */

	    }, {
	        key: 'subdataset',
	        set: function set(subdataset) {
	            if (this._subdataset !== undefined) return;
	            //TODO条件判断
	            this._subdataset = subdataset;
	        },
	        get: function get() {
	            return this._subdataset === undefined ? '' : this._subdataset;
	        }

	        /*
	         * set to true to also sample imagery using the method specified by 'interpolation'
	         * By default imagery is sampled using nearest sampling.
	         * @property interpImagery
	         * @type {string}
	         */

	    }, {
	        key: 'interpImagery',
	        set: function set(interpImagery) {
	            if (this._interpImagery !== undefined) return;
	            //TODO条件判断
	            this._interpImagery = interpImagery;
	        },
	        get: function get() {
	            return this._interpImagery === undefined ? '' : this._interpImagery;
	        }

	        /*
	         * tell the GDAL driver to keep the origin SRS and geotransform of the source data.
	         * @property warpProfile
	         * @type {Profile|string}
	         */

	    }, {
	        key: 'warpProfile',
	        set: function set(warpProfile) {
	            if (this._warpProfile !== undefined) return;
	            //TODO条件判断
	            this._warpProfile = warpProfile;
	        },
	        get: function get() {
	            return this._warpProfile === undefined ? '' : this._warpProfile;
	        }
	    }]);

	    return GdalLayerSource;
	}(_TileSource3.default);

	exports.default = GdalLayerSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "GdalLayerSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _DataSource2 = __webpack_require__(22);

	var _DataSource3 = _interopRequireDefault(_DataSource2);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：TileSource.js
	   * 作者：lvs
	   * 部门：产品研发中心
	   * 邮箱：lvs@geovis.com.cn
	   * 日期：2017-10-24 15:33:49.
	   * 用途：影像及地形图层数据源基类
	   */

	/**
	 * @module DataSource
	 * @main Datasource
	 */
	var TileSource = function (_DataSource) {
	    _inherits(TileSource, _DataSource);

	    function TileSource() {
	        _classCallCheck(this, TileSource);

	        return _possibleConstructorReturn(this, (TileSource.__proto__ || Object.getPrototypeOf(TileSource)).apply(this, arguments));
	    }

	    _createClass(TileSource, [{
	        key: 'tileSize',

	        /**
	         * 影像及地形图层数据源基类
	         *  <pre>其作用主要进行地球影像图层数据源的定义</pre>
	         * @namespace GV
	         * @extends DataSource
	         * @class TileSource
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.tileSize {int} 服务地址
	         * @param options.nodataValue  {float} 设置无效值得标示(-32768)
	         * @param options.minValidValue {float}  设置无效值的下限，小于该值视为无效值(-32000.0)
	         * @param options.maxValidValue {float} 设置无效值的上限，大于该值视为无效值(32000.0)
	         */

	        /**
	        * (256)
	        * @property tileSize
	        * @type {int}
	        */
	        set: function set(tileSize) {
	            if (this._tileSize !== undefined) return;
	            //TODO条件判断
	            this._tileSize = tileSize;
	        },
	        get: function get() {
	            return this._tileSize === undefined ? '' : this._tileSize;
	        }

	        /**
	         * 设置无效值得标示(-32768)
	         * @property nodataValue
	         * @type {float}
	         */

	    }, {
	        key: 'nodataValue',
	        set: function set(nodataValue) {
	            if (this._nodataValue !== undefined) return;
	            //TODO条件判断
	            this._nodataValue = nodataValue;
	        },
	        get: function get() {
	            return this._nodataValue === undefined ? '' : this._nodataValue;
	        }

	        /**
	         * 设置无效值的下限，小于该值视为无效值(-32000.0)
	         * @property minValidValue
	         * @type {float}
	         */

	    }, {
	        key: 'minValidValue',
	        set: function set(minValidValue) {
	            if (this._minValidValue !== undefined) return;
	            //TODO条件判断
	            this._minValidValue = minValidValue;
	        },
	        get: function get() {
	            return this._minValidValue === undefined ? '' : this._minValidValue;
	        }

	        /**
	         * 设置无效值的上限，大于该值视为无效值(32000.0)
	         * @property maxValidValue
	         * @type {float}
	         */

	    }, {
	        key: 'maxValidValue',
	        set: function set(maxValidValue) {
	            if (this._maxValidValue !== undefined) return;
	            //TODO条件判断
	            this._maxValidValue = maxValidValue;
	        },
	        get: function get() {
	            return this._maxValidValue === undefined ? '' : this._maxValidValue;
	        }

	        /*
	         * 
	         * @property nodataMin
	         * @type {float}
	         */

	    }, {
	        key: 'nodataMin',
	        set: function set(nodataMin) {
	            if (this._nodataMin !== undefined) return;
	            //TODO条件判断
	            this._nodataMin = nodataMin;
	        },
	        get: function get() {
	            return this._nodataMin === undefined ? '' : this._nodataMin;
	        }

	        /*
	         * 
	         * @property nodataMax
	         * @type {float}
	         */

	    }, {
	        key: 'nodataMax',
	        set: function set(nodataMax) {
	            if (this._nodataMax !== undefined) return;
	            //TODO条件判断
	            this._nodataMax = nodataMax;
	        },
	        get: function get() {
	            return this._nodataMax === undefined ? '' : this._nodataMax;
	        }

	        /*
	         * 
	         * @property blacklistFilename
	         * @type {float}
	         */

	    }, {
	        key: 'blacklistFilename',
	        set: function set(blacklistFilename) {
	            if (this._blacklistFilename !== undefined) return;
	            //TODO条件判断
	            this._blacklistFilename = blacklistFilename;
	        },
	        get: function get() {
	            return this._blacklistFilename === undefined ? '' : this._blacklistFilename;
	        }

	        /*
	         * 
	         * @property cacheSize
	         * @type {float}
	         */

	    }, {
	        key: 'cacheSize',
	        set: function set(cacheSize) {
	            if (this._cacheSize !== undefined) return;
	            //TODO条件判断
	            this._cacheSize = cacheSize;
	        },
	        get: function get() {
	            return this._cacheSize === undefined ? '' : this._cacheSize;
	        }

	        /*
	         * 
	         * @property bilinearReprojection
	         * @type {float}
	         */

	    }, {
	        key: 'bilinearReprojection',
	        set: function set(bilinearReprojection) {
	            if (this._bilinearReprojection !== undefined) return;
	            //TODO条件判断
	            this._bilinearReprojection = bilinearReprojection;
	        },
	        get: function get() {
	            return this._bilinearReprojection === undefined ? '' : this._bilinearReprojection;
	        }

	        /*
	         * 
	         * @property maxDataLevel
	         * @type {float}
	         */

	    }, {
	        key: 'maxDataLevel',
	        set: function set(maxDataLevel) {
	            if (this._maxDataLevel !== undefined) return;
	            //TODO条件判断
	            this._maxDataLevel = maxDataLevel;
	        },
	        get: function get() {
	            return this._maxDataLevel === undefined ? '' : this._maxDataLevel;
	        }

	        /*
	         * 
	         * @property coverage
	         * @type {boolean}
	         */

	    }, {
	        key: 'coverage',
	        set: function set(coverage) {
	            if (this._coverage !== undefined) return;
	            //TODO条件判断
	            this._coverage = coverage;
	        },
	        get: function get() {
	            return this._coverage === undefined ? '' : this._coverage;
	        }

	        /*
	         * 
	         * @property osgOption
	         * @type {string}
	         */

	    }, {
	        key: 'osgOption',
	        set: function set(osgOption) {
	            if (this._osgOption !== undefined) return;
	            //TODO条件判断
	            this._osgOption = osgOption;
	        },
	        get: function get() {
	            return this._osgOption === undefined ? '' : this._osgOption;
	        }

	        /*
	         * 
	         * @property profile
	         * @type {object}
	         */

	    }, {
	        key: 'profile',
	        set: function set(profile) {
	            if (this._profile !== undefined) return;
	            //TODO条件判断
	            this._profile = profile;
	        },
	        get: function get() {
	            return this._profile === undefined ? '' : this._profile;
	        }
	    }]);

	    return TileSource;
	}(_DataSource3.default);

	exports.default = TileSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "TileSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _TileSource2 = __webpack_require__(25);

	var _TileSource3 = _interopRequireDefault(_TileSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：TileMapServiceSource.js
	   * 作者：钱晶
	   * 部门：产品研发中心
	   * 邮箱：jqian@mail.ie.ac.cn
	   * 日期：2017-03-22 10:51:29.
	   * 用途：图层数据源类
	   */

	/**
	 * @module DataSource
	 * @main DataSource
	 */
	var TileMapServiceSource = function (_TileSource) {
	    _inherits(TileMapServiceSource, _TileSource);

	    function TileMapServiceSource() {
	        _classCallCheck(this, TileMapServiceSource);

	        return _possibleConstructorReturn(this, (TileMapServiceSource.__proto__ || Object.getPrototypeOf(TileMapServiceSource)).apply(this, arguments));
	    }

	    _createClass(TileMapServiceSource, [{
	        key: 'driver',

	        /**
	         * OGC标准tms服务数据源
	         *  <pre>其作用主要进行地球影像图层数据源的定义</pre>
	         * @namespace GV
	         * @extends TileSource
	         * @class TileMapServiceSource
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.url {string} 服务地址
	         */
	        /* 
	         * options.tmsType {string} 天空环境参数
	         * options.format {string} 瓦片格式
	         *  {文件}
	         */

	        /*
	        * 数据驱动driver
	        * @property driver
	        * @type {string}
	        */
	        get: function get() {
	            return _TagsEnum2.default.TMS;
	        }
	        /**
	         * 服务地址
	         * @property url
	         * @type {string}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            if (this._url !== undefined) return;
	            //TODO条件判断
	            this._url = url;
	        },
	        get: function get() {
	            return this._url === undefined ? '' : this._url;
	        }

	        /*
	         * 设置是够将Y翻转，如果翻转设置为'google';
	         * @property tmsType
	         * @type {string}
	         */

	    }, {
	        key: 'tmsType',
	        set: function set(tmsType) {
	            if (this._tmsType !== undefined) return;
	            //TODO条件判断
	            this._tmsType = tmsType;
	        },
	        get: function get() {
	            return this._tmsType === undefined ? '' : this._tmsType;
	        }

	        /*
	         * override the format reported by the service
	         * @property format
	         * @type {string}
	         */

	    }, {
	        key: 'format',
	        set: function set(format) {
	            if (this._format !== undefined) return;
	            //TODO条件判断
	            this._format = format;
	        },
	        get: function get() {
	            return this._format === undefined ? '' : this._format;
	        }
	    }]);

	    return TileMapServiceSource;
	}(_TileSource3.default);

	exports.default = TileMapServiceSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "TileMapServiceSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _TileSource2 = __webpack_require__(25);

	var _TileSource3 = _interopRequireDefault(_TileSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：WebMapServiceSource.js
	   * 作者：钱晶
	   * 部门：产品研发中心
	   * 邮箱：jqian@mail.ie.ac.cn
	   * 日期：2017-03-30 16:26:07.
	   * 用途：图层数据源类
	   */

	/**
	 * @module DataSource
	 * @main DataSource
	 */
	var WebMapServiceSource = function (_TileSource) {
	    _inherits(WebMapServiceSource, _TileSource);

	    function WebMapServiceSource() {
	        _classCallCheck(this, WebMapServiceSource);

	        return _possibleConstructorReturn(this, (WebMapServiceSource.__proto__ || Object.getPrototypeOf(WebMapServiceSource)).apply(this, arguments));
	    }

	    _createClass(WebMapServiceSource, [{
	        key: 'driver',

	        /**
	         * OGC标准wms服务数据源
	         *  <pre>其作用主要进行地球影像和地形图层数据源的定义</pre>
	         * @namespace GV
	         * @extends TileSource
	         * @class WebMapServiceSource
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.url {string} 服务地址
	         * @param options.layers {string} 选择wms所融合图层列表
	         * @param options.format {string} 瓦片格式
	         * @param options.version {string} 版本
	         * @param options.srs {string} tiles瓦片使用的坐标系统
	         * @param options.transparent {boolean} 设置图层无数据地区是否透明
	         */
	        /*
	         * 数据驱动driver
	         * @property driver
	         * @type {string}
	         */
	        get: function get() {
	            return _TagsEnum2.default.WMS;
	        }

	        /**
	         * 服务地址
	         * @property url
	         * @type {string}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            if (this._url !== undefined) return;
	            //TODO条件判断
	            this._url = url;
	        },
	        get: function get() {
	            return this._url === undefined ? '' : this._url;
	        }

	        /**
	         * 服务地址
	         * @property url 默认false
	         * @type {Boolean}
	         */

	    }, {
	        key: 'isGeovis',
	        set: function set(isGeovis) {
	            if (this._isGeovis !== undefined) return;
	            //TODO条件判断
	            this._isGeovis = isGeovis;
	        },
	        get: function get() {
	            return this._isGeovis === undefined ? '' : this._isGeovis;
	        }

	        /**
	         * 选择wms所融合图层列表
	         * @property layers
	         * @type {string}
	         */

	    }, {
	        key: 'layers',
	        set: function set(layers) {
	            if (this._layers !== undefined) return;
	            //TODO条件判断
	            this._layers = layers;
	        },
	        get: function get() {
	            return this._layers === undefined ? '' : this._layers;
	        }

	        /**
	         * 瓦片格式
	         * @property format
	         * @type {string}
	         */

	    }, {
	        key: 'format',
	        set: function set(format) {
	            if (this._format !== undefined) return;
	            //TODO条件判断
	            this._format = format;
	        },
	        get: function get() {
	            return this._format === undefined ? '' : this._format;
	        }

	        /**
	         * 版本
	         * @property version
	         * @type {string}
	         */

	    }, {
	        key: 'version',
	        set: function set(version) {
	            if (this._version !== undefined) return;
	            //TODO条件判断
	            this._version = version;
	        },
	        get: function get() {
	            return this._version === undefined ? '' : this._version;
	        }

	        /**
	         * Tiles瓦片使用的坐标系统
	         * @property srs
	         * @type {string}
	         */

	    }, {
	        key: 'srs',
	        set: function set(srs) {
	            if (this._srs !== undefined) return;
	            //TODO条件判断
	            this._srs = srs;
	        },
	        get: function get() {
	            return this._srs === undefined ? '' : this._srs;
	        }

	        /**
	         * 设置图层无数据地区是否透明
	         * @property transparent
	         * @type {boolean}
	         */

	    }, {
	        key: 'transparent',
	        set: function set(transparent) {
	            if (this._transparent !== undefined) return;
	            //TODO条件判断
	            this._transparent = transparent;
	        },
	        get: function get() {
	            return this._transparent === undefined ? '' : this._transparent;
	        }

	        /*
	         * 
	         * @property capablitiesUrl
	         * @type {string}
	         */

	    }, {
	        key: 'capablitiesUrl',
	        set: function set(capablitiesUrl) {
	            if (this._capablitiesUrl !== undefined) return;
	            //TODO条件判断
	            this._capablitiesUrl = capablitiesUrl;
	        },
	        get: function get() {
	            return this._capablitiesUrl === undefined ? '' : this._capablitiesUrl;
	        }

	        /*
	         * 
	         * @property tileServiceUrl
	         * @type {string}
	         */

	    }, {
	        key: 'tileServiceUrl',
	        set: function set(tileServiceUrl) {
	            if (this._tileServiceUrl !== undefined) return;
	            //TODO条件判断
	            this._tileServiceUrl = tileServiceUrl;
	        },
	        get: function get() {
	            return this._tileServiceUrl === undefined ? '' : this._tileServiceUrl;
	        }

	        /*
	         * 图层渲染的样式
	         * @property style
	         * @type {string}
	         */

	    }, {
	        key: 'style',
	        set: function set(style) {
	            if (this._style !== undefined) return;
	            //TODO条件判断
	            this._style = style;
	        },
	        get: function get() {
	            return this._style === undefined ? '' : this._style;
	        }

	        /*
	         * 
	         * @property wmsFormat
	         * @type {string}
	         */

	    }, {
	        key: 'wmsFormat',
	        set: function set(wmsFormat) {
	            if (this._layers !== undefined) return;
	            //TODO条件判断
	            this._layers = wmsFormat;
	        },
	        get: function get() {
	            return this._layers === undefined ? '' : this._layers;
	        }

	        /*
	         * 
	         * @property elevationUnit
	         * @type {string}
	         */

	    }, {
	        key: 'elevationUnit',
	        set: function set(elevationUnit) {
	            if (this._elevationUnit !== undefined) return;
	            //TODO条件判断
	            this._elevationUnit = elevationUnit;
	        },
	        get: function get() {
	            return this._elevationUnit === undefined ? '' : this._elevationUnit;
	        }

	        /*
	         * 
	         * @property crs
	         * @type {string}
	         */

	    }, {
	        key: 'crs',
	        set: function set(crs) {
	            if (this._crs !== undefined) return;
	            //TODO条件判断
	            this._crs = crs;
	        },
	        get: function get() {
	            return this._crs === undefined ? '' : this._crs;
	        }

	        /*
	         * 
	         * @property secondsPerFrame
	         * @type {string}
	         */

	    }, {
	        key: 'secondsPerFrame',
	        set: function set(secondsPerFrame) {
	            if (this._secondsPerFrame !== undefined) return;
	            //TODO条件判断
	            this._secondsPerFrame = secondsPerFrame;
	        },
	        get: function get() {
	            return this._secondsPerFrame === undefined ? '' : this._secondsPerFrame;
	        }
	    }]);

	    return WebMapServiceSource;
	}(_TileSource3.default);

	exports.default = WebMapServiceSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "WebMapServiceSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _DataSource2 = __webpack_require__(22);

	var _DataSource3 = _interopRequireDefault(_DataSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：XYZLayerSource.js
	   * 作者：钱晶
	   * 部门：产品研发中心
	   * 邮箱：jqian@mail.ie.ac.cn
	   * 日期：2017-03-30 16:33:33.
	   * 用途：图层数据源类
	   */

	/**
	 * @module DataSource
	 * @main Datasource
	 */

	var XYZLayerSource = function (_DataSource) {
	    _inherits(XYZLayerSource, _DataSource);

	    function XYZLayerSource() {
	        _classCallCheck(this, XYZLayerSource);

	        return _possibleConstructorReturn(this, (XYZLayerSource.__proto__ || Object.getPrototypeOf(XYZLayerSource)).apply(this, arguments));
	    }

	    _createClass(XYZLayerSource, [{
	        key: 'driver',

	        /**
	         * xyz服务数据源，支持osm和天地图数据
	         *  <pre>其作用主要进行地球影像图层数据源的定义</pre>
	         * @namespace GV
	         * @extends DataSource
	         * @class XYZLayerSource
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.url {string} 服务地址
	         * @param options.profile {string} 坐标系统 [global-mercator，global-geodetic，spherical-mercator，cube，local ]
	         */
	        /* 
	         * options.invertY {boolean} 是否翻转y轴
	         * options.format {string} 瓦片格式
	         */

	        /**
	        * 数据驱动driver
	        * @property driver
	        * @type {string}
	        */
	        get: function get() {
	            return _TagsEnum2.default.XYZ;
	        }

	        /**
	         * Root URL of the TMS respository
	         * @property url
	         * @type {string}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            if (this._url !== undefined) return;
	            //TODO条件判断
	            this._url = url;
	        },
	        get: function get() {
	            return this._url === undefined ? '' : this._url;
	        }

	        /**
	         * nodata_image 
	         */

	        /**
	         * tiles瓦片使用的坐标系统的概述 [global-mercator，global-geodetic，spherical-mercator，cube，local ]
	         * @property profile
	         * @type {string}
	         */

	    }, {
	        key: 'profile',
	        set: function set(profile) {
	            if (this._profile !== undefined) return;
	            //TODO条件判断
	            this._profile = profile;
	        },
	        get: function get() {
	            return this._profile === undefined ? '' : this._profile;
	        }

	        /**
	         * 设置是否翻转y轴
	         * @property invertY
	         * @type {boolean}
	         */

	    }, {
	        key: 'invertY',
	        set: function set(invertY) {
	            if (this._invertY !== undefined) return;
	            //TODO条件判断
	            this._invertY = invertY;
	        },
	        get: function get() {
	            return this._invertY === undefined ? '' : this._invertY;
	        }

	        /**
	         * override the format reported by the service
	         * @property format
	         * @type {string}
	         */

	    }, {
	        key: 'format',
	        set: function set(format) {
	            if (this._format !== undefined) return;
	            //TODO条件判断
	            this._format = format;
	        },
	        get: function get() {
	            return this._format === undefined ? '' : this._format;
	        }
	    }]);

	    return XYZLayerSource;
	}(_DataSource3.default);

	exports.default = XYZLayerSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "XYZLayerSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _TileSource2 = __webpack_require__(25);

	var _TileSource3 = _interopRequireDefault(_TileSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * ArcGisLayerSource.js
	   * 作者：钱晶
	   * 部门：产品研发中心
	   * 邮箱：jqian@mail.ie.ac.cn
	   * 日期：2017-03-22 10:51:29.
	   * 用途：图层数据源类
	   */

	/**
	 * @module DataSource
	 * @main DataSource
	 */
	var ArcGisLayerSource = function (_TileSource) {
	    _inherits(ArcGisLayerSource, _TileSource);

	    function ArcGisLayerSource() {
	        _classCallCheck(this, ArcGisLayerSource);

	        return _possibleConstructorReturn(this, (ArcGisLayerSource.__proto__ || Object.getPrototypeOf(ArcGisLayerSource)).apply(this, arguments));
	    }

	    _createClass(ArcGisLayerSource, [{
	        key: 'driver',

	        /**
	         * OGC标准ArcGISS服务数据源
	         *  <pre>其作用主要进行地球影像图层数据源的定义</pre>
	         * @namespace GV
	         * @extends TileSource
	         * @class ArcGisLayerSource
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.url {string} 服务地址
	         * @param options.token  {string} ArcGIS开发者的token
	         * @param options.format {string} 数据格式
	         * @param options.layers  {string} 选择arcgis所融合图层列表
	         */
	        /*
	         * 数据驱动driver
	         * @property driver
	         * @type {string}
	         */
	        get: function get() {
	            return _TagsEnum2.default.ArcGIS;
	        }

	        /**
	         * R服务地址
	         * @property url
	         * @type {string}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            if (this._url !== undefined) return;
	            //TODO条件判断
	            this._url = url;
	        },
	        get: function get() {
	            return this._url === undefined ? '' : this._url;
	        }

	        /**
	         * ArcGIS开发者的token
	         * @property token
	         * @type {string}
	         */

	    }, {
	        key: 'token',
	        set: function set(token) {
	            if (this._token !== undefined) return;
	            //TODO条件判断
	            this._token = token;
	        },
	        get: function get() {
	            return this._token === undefined ? '' : this._token;
	        }

	        /**
	         * 数据格式
	         * @property format
	         * @type {string}
	         */

	    }, {
	        key: 'format',
	        set: function set(format) {
	            if (this._format !== undefined) return;
	            //TODO条件判断
	            this._format = format;
	        },
	        get: function get() {
	            return this._format === undefined ? '' : this._format;
	        }

	        /**
	         * 选择arcgis所融合图层列表
	         * @property layers
	         * @type {string}
	         */

	    }, {
	        key: 'layers',
	        set: function set(layers) {
	            if (this._layers !== undefined) return;
	            //TODO条件判断
	            this._layers = layers;
	        },
	        get: function get() {
	            return this._layers === undefined ? '' : this._layers;
	        }
	    }]);

	    return ArcGisLayerSource;
	}(_TileSource3.default);

	exports.default = ArcGisLayerSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ArcGisLayerSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _DataSource2 = __webpack_require__(22);

	var _DataSource3 = _interopRequireDefault(_DataSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：RstLayerSource.js
	   * 作者：钱晶
	   * 部门：产品研发中心
	   * 邮箱：jqian@mail.ie.ac.cn
	   * 日期：2017-03-22 10:51:29.
	   * 用途：图层数据源类
	   */

	/**
	 * @module DataSource
	 * @main Datasource
	 */
	var RstLayerSource = function (_DataSource) {
	    _inherits(RstLayerSource, _DataSource);

	    function RstLayerSource() {
	        _classCallCheck(this, RstLayerSource);

	        return _possibleConstructorReturn(this, (RstLayerSource.__proto__ || Object.getPrototypeOf(RstLayerSource)).apply(this, arguments));
	    }

	    _createClass(RstLayerSource, [{
	        key: 'driver',

	        /**
	         * GRST数据源
	         *  <pre>其作用主要进行地球影像和地形图层数据源的定义</pre>
	         * @namespace GV
	         * @extends DataSource
	         * @class GrstLayerSource
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.url {string} 地形服务地址
	         */
	        /* 
	         * @param options.tmsType {string} tms类型
	         * @param options.format {string} 数据格式
	         */

	        get: function get() {
	            return _TagsEnum2.default.RST;
	        }
	    }, {
	        key: 'url',
	        set: function set(url) {
	            this._url = url;
	        },
	        get: function get() {
	            return this._url;
	        }
	    }, {
	        key: 'tmsType',
	        get: function get() {
	            return this._tmsType;
	        }
	    }, {
	        key: 'format',
	        set: function set(format) {
	            this._format = format;
	        },
	        get: function get() {
	            return this._format;
	        }
	    }]);

	    return RstLayerSource;
	}(_DataSource3.default);

	exports.default = RstLayerSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "RstLayerSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _DataSource2 = __webpack_require__(22);

	var _DataSource3 = _interopRequireDefault(_DataSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：GrstLayerSource.js
	   * 作者：钱晶
	   * 部门：产品研发中心
	   * 邮箱：jqian@mail.ie.ac.cn
	   * 日期：2017-03-22 10:51:29.
	   * 用途：图层数据源类
	   */

	/**
	 * @module DataSource
	 * @main Datasource
	 */
	var GrstLayerSource = function (_DataSource) {
	    _inherits(GrstLayerSource, _DataSource);

	    function GrstLayerSource() {
	        _classCallCheck(this, GrstLayerSource);

	        return _possibleConstructorReturn(this, (GrstLayerSource.__proto__ || Object.getPrototypeOf(GrstLayerSource)).apply(this, arguments));
	    }

	    _createClass(GrstLayerSource, [{
	        key: 'driver',

	        /**
	         * GRST数据源
	         *  <pre>其作用主要进行地球影像和地形图层数据源的定义</pre>
	         * @namespace GV
	         * @extends DataSource
	         * @class GrstLayerSource
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.url {string} 地形服务地址
	         * @param options.tmsType {string} tms类型
	         * @param options.format {string} 数据格式
	         */

	        get: function get() {
	            return _TagsEnum2.default.GRST;
	        }

	        /**
	         * 资源路径
	         * @property url
	         * @type {string}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            this._url = url;
	        },
	        get: function get() {
	            return this._url;
	        }

	        /**
	         * @property tmsType
	         * @type {string}
	         */

	    }, {
	        key: 'tmsType',
	        set: function set(tmsType) {
	            this._tmsType = tmsType;
	        },
	        get: function get() {
	            return this._tmsType;
	        }

	        /**
	         * @property format
	         * @type {string}
	         */

	    }, {
	        key: 'format',
	        set: function set(format) {
	            this._format = format;
	        },
	        get: function get() {
	            return this._format;
	        }
	    }]);

	    return GrstLayerSource;
	}(_DataSource3.default);

	exports.default = GrstLayerSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "GrstLayerSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _TileSource2 = __webpack_require__(25);

	var _TileSource3 = _interopRequireDefault(_TileSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _TerrainLayer = __webpack_require__(33);

	var _TerrainLayer2 = _interopRequireDefault(_TerrainLayer);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：GVML
	   * 文件：ColorRampLayerSource.js
	   * 作者：qianjing
	   * 部门：产品研发部
	   * 邮箱：jqian@mail.ie.ac.cn
	   * 日期：‎2017‎-0‎5‎-16‎ ‏‎17:08:14
	   * 用途：图层数据源类
	   */

	/**
	 * @module DataSource
	 * @main DataSource
	 */
	var ColorRampLayerSource = function (_TileSource) {
	    _inherits(ColorRampLayerSource, _TileSource);

	    function ColorRampLayerSource() {
	        _classCallCheck(this, ColorRampLayerSource);

	        return _possibleConstructorReturn(this, (ColorRampLayerSource.__proto__ || Object.getPrototypeOf(ColorRampLayerSource)).apply(this, arguments));
	    }

	    _createClass(ColorRampLayerSource, [{
	        key: 'driver',

	        /**
	         * ColorRamp数据源
	         *  <pre>其作用主要进行地球影像和地形图层数据源的定义</pre>
	         * @namespace GV
	         * @extends TileSource
	         * @class ColorRampLayerSource
	         * @constructor
	         * @param  {object} elevation 参数详情如下：<br>
	         * elevation.url {string} 地形服务地址
	         * @param options.elevation  {GV.TerrainLayer} Clr文件路径
	         * @param options.ramp  {string} Clr文件路径
	         */

	        /*
	        * 数据驱动driver
	        * @property driver
	        * @type {string}
	        */
	        get: function get() {
	            return _TagsEnum2.default.ColorRamp;
	        }

	        /**
	        * GV.TerrainLayer
	        * @property elevation
	        * @type {GV.TerrainLayer}
	        */

	    }, {
	        key: 'elevation',
	        set: function set(elevation) {
	            if (!elevation) return;

	            if (elevation instanceof _TerrainLayer2.default) {
	                this._elevation = elevation;
	            } else {
	                this._elevation = new _TerrainLayer2.default(elevation);
	            }
	        },
	        get: function get() {
	            return this._elevation;
	        }

	        /**
	        * clr文件路径
	        * @property ramp
	        * @type {string}
	        */

	    }, {
	        key: 'ramp',
	        set: function set(ramp) {
	            if (this._ramp !== undefined) return;
	            this._ramp = ramp;
	        },
	        get: function get() {
	            return this._ramp === undefined ? '' : this._ramp;
	        }
	    }]);

	    return ColorRampLayerSource;
	}(_TileSource3.default);

	exports.default = ColorRampLayerSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ColorRampLayerSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Layer2 = __webpack_require__(18);

	var _Layer3 = _interopRequireDefault(_Layer2);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _GdalLayerSource = __webpack_require__(24);

	var _GdalLayerSource2 = _interopRequireDefault(_GdalLayerSource);

	var _TileMapServiceSource = __webpack_require__(26);

	var _TileMapServiceSource2 = _interopRequireDefault(_TileMapServiceSource);

	var _WebMapServiceSource = __webpack_require__(27);

	var _WebMapServiceSource2 = _interopRequireDefault(_WebMapServiceSource);

	var _XYZLayerSource = __webpack_require__(28);

	var _XYZLayerSource2 = _interopRequireDefault(_XYZLayerSource);

	var _ArcGisLayerSource = __webpack_require__(29);

	var _ArcGisLayerSource2 = _interopRequireDefault(_ArcGisLayerSource);

	var _RstLayerSource = __webpack_require__(30);

	var _RstLayerSource2 = _interopRequireDefault(_RstLayerSource);

	var _GrstLayerSource = __webpack_require__(31);

	var _GrstLayerSource2 = _interopRequireDefault(_GrstLayerSource);

	var _ColorRampLayerSource = __webpack_require__(32);

	var _ColorRampLayerSource2 = _interopRequireDefault(_ColorRampLayerSource);

	var _GeneralLayerSource = __webpack_require__(34);

	var _GeneralLayerSource2 = _interopRequireDefault(_GeneralLayerSource);

	var _CachePolicy = __webpack_require__(36);

	var _CachePolicy2 = _interopRequireDefault(_CachePolicy);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：TerrainLayer.js
	   * 作者：巩志远
	   * 部门：产品研发中心
	   * 邮箱：gongzy@geovis.com
	   * 日期：2017-03-09 09:25:16.
	   * 用途：高程图层实体类
	   */

	/**
	 * @module layer
	 * @main layer
	 */
	var TerrainLayer = function (_Layer) {
	    _inherits(TerrainLayer, _Layer);

	    /**
	     * 地形图层类
	     *  <pre>其作用主要进行地球地形图层的定义</pre>
	     * @namespace GV
	     * @extends Layer
	     * @class TerrainLayer
	     * @constructor
	     * @param  {undefined} null 不提供构造函数，添加新的地形图层详见 <code>GeoCanvas.addTerrainLayer()</code> 方法
	     */
	    function TerrainLayer() {
	        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        var map = arguments[1];

	        _classCallCheck(this, TerrainLayer);

	        return _possibleConstructorReturn(this, (TerrainLayer.__proto__ || Object.getPrototypeOf(TerrainLayer)).call(this, options, map));
	    }

	    _createClass(TerrainLayer, [{
	        key: '_createSourceData',
	        value: function _createSourceData(options) {
	            switch (options.driver) {
	                case _TagsEnum2.default.GDAL:
	                    this._sourceData = new _GdalLayerSource2.default(options);
	                    break;
	                case _TagsEnum2.default.TMS:
	                    this._sourceData = new _TileMapServiceSource2.default(options);
	                    break;
	                case _TagsEnum2.default.WMS:
	                    this._sourceData = new _WebMapServiceSource2.default(options);
	                    break;
	                case _TagsEnum2.default.ArcGIS:
	                    this._sourceData = new _ArcGisLayerSource2.default(options);
	                    break;
	                case _TagsEnum2.default.XYZ:
	                    this._sourceData = new _XYZLayerSource2.default(options);
	                    break;
	                case _TagsEnum2.default.GRST:
	                    this._sourceData = new _GrstLayerSource2.default(options);
	                    break;
	                case _TagsEnum2.default.RST:
	                    this._sourceData = new _RstLayerSource2.default(options);
	                    break;
	                case _TagsEnum2.default.ColorRamp:
	                    this._sourceData = new _ColorRampLayerSource2.default(options);
	                    break;
	                default:
	                    this._sourceData = new _GeneralLayerSource2.default(options);
	            }
	        }

	        /**
	         * 设置细节的最低能见度。最小为0
	         * 值越大则需要把视角拖得越高才能看见高程
	         * @property minLevel
	         * @type {int}
	         */

	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            return this._toXml();
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            return this._toJson();
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.TerrainLayer;
	        }
	    }, {
	        key: 'minLevel',
	        set: function set(minLevel) {
	            this._minLevel = minLevel;
	        },
	        get: function get() {
	            return this._minLevel;
	        }

	        /**
	         * 设置细节的最大能见度
	         * @property maxLevel
	         * @type {int}
	         */

	    }, {
	        key: 'maxLevel',
	        set: function set(maxLevel) {
	            this._maxLevel = maxLevel;
	        }

	        /**
	         * 设置绘制瓦片的最小分辨率
	         * @property minResolution
	         * @type {double}
	         */

	    }, {
	        key: 'minResolution',
	        set: function set(resolution) {
	            this._minResolution = resolution;
	        }

	        /**
	         * 设置绘制瓦片的最大分辨率
	         * @property maxResolution
	         * @type {double}
	         */

	    }, {
	        key: 'maxResolution',
	        set: function set(resolution) {
	            this._maxResolution = resolution;
	        }

	        /**
	         * 设置显示在该层的高度值是相对于偏移量的，而不是真正的地形高度。
	         * @property offset
	         * @type {boolean}
	         */

	    }, {
	        key: 'offset',
	        set: function set(isOffset) {
	            this._offset = isOffset;
	        }

	        /**
	         * 设置没有数据时采取的策略，默认是插值，“msl”将没有值的地方设置为海平面值
	         * @property nodataPolicy
	         * @type {string}
	         */

	    }, {
	        key: 'nodataPolicy',
	        set: function set(nodataPolicy) {
	            this._nodataPolicy = nodataPolicy;
	        }

	        /**
	         * 设置无效值的标识
	         * @property nodataValue
	         * @type {double}
	         */

	    }, {
	        key: 'nodataValue',
	        set: function set(nodataValue) {
	            this._nodataValue = nodataValue;
	        }

	        /**
	         * 设置无效值的下限,小于该值视为无效值
	         * @property minValidValue
	         * @type {double}
	         */

	    }, {
	        key: 'minValidValue',
	        set: function set(minValidValue) {
	            this._minValidValue = minValidValue;
	        }

	        /**
	         * 设置无效值的上限,大于该值视为无效值
	         * @property maxValidValue
	         * @type {double}
	         */

	    }, {
	        key: 'maxValidValue',
	        set: function set(maxValidValue) {
	            this._maxValidValue = maxValidValue;
	        }

	        /**
	         * 设置图层是否可用
	         * @property enabled
	         * @type {boolean}
	         */

	    }, {
	        key: 'enabled',
	        set: function set(enable) {
	            this._enabled = enable;
	        },
	        get: function get() {
	            return this._enabled;
	        }

	        /**
	         * 设置缓存id
	         * @property cacheid
	         * @type {String}
	         */

	    }, {
	        key: 'cacheid',
	        set: function set(cacheid) {
	            if (!cacheid) return;
	            if (this._cacheid === cacheid) return;
	            this._cacheid = cacheid;
	        },
	        get: function get() {
	            return this._cacheid;
	        }

	        /**
	         * 设置缓存策略
	         * @property cachePolicy
	         * @type {GV.CachePolicy}
	         */

	    }, {
	        key: 'cachePolicy',
	        set: function set(cachePolicy) {
	            if (cachePolicy instanceof _CachePolicy2.default) {
	                this._cachePolicy = cachePolicy;
	            } else if ((typeof cachePolicy === 'undefined' ? 'undefined' : _typeof(cachePolicy)) === 'object') {
	                this._cachePolicy = new _CachePolicy2.default(cachePolicy);
	            } else {
	                this._cachePolicy = undefined;
	            }
	        },
	        get: function get() {
	            return this._cachePolicy;
	        }
	    }]);

	    return TerrainLayer;
	}(_Layer3.default);

	exports.default = TerrainLayer;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "TerrainLayer.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _DataSource2 = __webpack_require__(22);

	var _DataSource3 = _interopRequireDefault(_DataSource2);

	var _Exception = __webpack_require__(35);

	var _Exception2 = _interopRequireDefault(_Exception);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：GeneralLayerSource.js
	   * 作者：钱晶
	   * 部门：产品研发中心
	   * 邮箱：jqian@mail.ie.ac.cn
	   * 日期：2017-04-07 10:28:31.
	   * 用途：通用图层数据源类
	   */

	/**
	 * @module DataSource
	 * @main DataSource
	 */
	var GeneralLayerSource = function (_DataSource) {
	    _inherits(GeneralLayerSource, _DataSource);

	    /**
	    * 通用数据源
	    *  <pre>其作用可以自己设置参数的数据源</pre>
	    * @namespace GV
	    * @extends DataSource
	    * @class GeneralLayerSource
	    * @constructor
	    * @param  {object} options
	    */
	    function GeneralLayerSource(options) {
	        _classCallCheck(this, GeneralLayerSource);

	        var _this = _possibleConstructorReturn(this, (GeneralLayerSource.__proto__ || Object.getPrototypeOf(GeneralLayerSource)).call(this));

	        _this._parseOptions(options);
	        return _this;
	    }

	    _createClass(GeneralLayerSource, [{
	        key: '_parseOptions',
	        value: function _parseOptions(options) {
	            if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') return;
	            this._options = options;
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '';
	            for (var key in this._options) {
	                if (this._options[key] !== undefined) {
	                    xml += Util._propertyToXml(key, this._options[key]);
	                }
	            }
	            return xml;
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            return this._options;
	        }
	    }]);

	    return GeneralLayerSource;
	}(_DataSource3.default);

	exports.default = GeneralLayerSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "GeneralLayerSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Exception.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com
	 * 日期：2017-02-22 09:16:18.
	 * 用途：异常基类
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	var Exception = function () {
	    function Exception(message) {
	        _classCallCheck(this, Exception);

	        for (var _len = arguments.length, type = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	            type[_key - 1] = arguments[_key];
	        }

	        if (type.length > 0) {
	            this.type = type.shift();
	        }

	        this.showMessage(message, type);
	    }

	    _createClass(Exception, [{
	        key: 'formatMessage',
	        value: function formatMessage(value, phvList) {
	            var arr = [];
	            var j = void 0;
	            var index = void 0;
	            var i = 0;
	            while (i < value.length) {
	                if (value.charAt(i) === '{') {
	                    j = value.indexOf('}', i + 1);
	                    if (j === -1) {
	                        i++;
	                    } else {
	                        index = parseInt(value.substring(i + 1, j));
	                        if (!isNaN(index) && index >= 0) {
	                            var s = value.substring(0, i);
	                            if (s !== '') {
	                                arr.push(s);
	                            }
	                            arr.push(index);
	                            i = 0;
	                            value = value.substring(j + 1);
	                        } else {
	                            i = j + 1;
	                        }
	                    }
	                } else {
	                    i++;
	                }
	            }
	            if (value !== '') {
	                arr.push(value);
	            }
	            value = arr;

	            if (value.length === 0) {
	                return '';
	            }
	            if (value.length === 1 && typeof value[0] === 'string') {
	                return value[0];
	            }

	            var str = '';
	            for (i = 0, j = value.length; i < j; i++) {
	                if (typeof value[i] === 'string') {
	                    str += value[i];
	                } else if (phvList && value[i] < phvList.length) {
	                    str += phvList[value[i]];
	                }
	            }

	            return str;
	        }

	        /**
	         * 输出消息
	         * @param message {string} 消息体
	         */

	    }, {
	        key: 'showMessage',
	        value: function showMessage(message, type) {
	            var infoType = message.type;
	            message = this.formatMessage(message[_ExceptionMessage2.default.show_language], type);
	            switch (infoType) {
	                case 'error':
	                    console.error(this.type + ':' + message);
	                    break;
	                case 'warn':
	                    console.warn(this.type + ':' + message);
	                    break;
	                case 'info':
	                    console.info(this.type + ':' + message);
	                    break;
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: 'type',
	        set: function set(value) {
	            this._type = value || 'Exception';
	        },
	        get: function get() {
	            return this._type;
	        }
	    }]);

	    return Exception;
	}();

	exports.default = Exception;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Exception.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}(); /**
	      * 项目：GVML
	      * 文件：CachePolicy.js
	      * 作者：qianjing
	      * 部门：产品研发部
	      * 邮箱：jqian@mail.ie.ac.cn
	      * 日期：‎2017‎-‎5‎-‎8‎ ‏‎17:47:52
	      * 用途：缓存策略类
	      */

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _CACHEPOLICY = __webpack_require__(37);

	var _CACHEPOLICY2 = _interopRequireDefault(_CACHEPOLICY);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _Exception = __webpack_require__(35);

	var _Exception2 = _interopRequireDefault(_Exception);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
	    if (key in obj) {
	        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	    } else {
	        obj[key] = value;
	    }return obj;
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	/**
	 * @module layer
	 * @main layer
	 */
	var CachePolicy = function () {

	    /**
	     * 缓存策略类
	     *  <pre>其作用主要进行图层数据源获取所需的缓存策略</pre>
	     * @namespace GV
	     * @class CachePolicy
	     * @constructor
	     * @param  {GV.CACHE_POLICY} usage 缓存策略类行
	     * @param  {number} maxage 缓存时间限制
	     */
	    function CachePolicy(param) {
	        _classCallCheck(this, CachePolicy);

	        this._parseJson(param);
	    }

	    /**
	     * 初始化程序解析传入数据
	     */

	    _createClass(CachePolicy, [{
	        key: '_parseJson',
	        value: function _parseJson(params) {
	            if (!this._properties) {
	                this._properties = Util.__getSetterProperties(this);
	            }
	            for (var key in params) {
	                var tempKey = Util.a_aToaA(key);
	                if (this._properties.indexOf(tempKey) < 0) continue;
	                this[tempKey] = params[key]; // 私有化
	            }
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '';

	            if (!this._properties) this._properties = Util.__getSetterProperties(this);
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this._properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var key = _step.value;

	                    if (!this['_' + key]) continue;
	                    xml = xml + Util._propertyToXml(key, this[key]);
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            if (xml === '') return '';
	            return '<' + this.tag + '>' + xml + '</' + this.tag + '>';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var json = {};

	            if (!this._properties) this._properties = Util.__getSetterProperties(this);
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = this._properties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var key = _step2.value;

	                    if (!this['_' + key]) continue;
	                    Util._propertyToJson(this, key, json);
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            return _defineProperty({}, this.tag, json);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.CachePolicy;
	        }

	        /**
	         * 缓存策略类型
	         * @chainable
	         * @property usage
	         * @param {GV.CACHEPOLICY} usage 详细请参照{GV.CACHEPOLICY枚举类型}
	         * @description <br>
	         * <pre>
	         *      
	         * </pre>
	         */

	    }, {
	        key: 'usage',
	        set: function set(usage) {
	            switch (usage) {
	                case _CACHEPOLICY2.default.READ_WRITE:
	                case _CACHEPOLICY2.default.CACHE_ONLY:
	                case _CACHEPOLICY2.default.NO_CACHE:
	                    this._usage = usage;break;
	                default:
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CUSTOM, 'CachePllicy', 'usage枚举值为："read_write","cache_only","no_cache"'));
	                    break;
	            }
	        },
	        get: function get() {
	            return this._usage;
	        }

	        /**
	         *
	         * @chainable
	         * @property maxAge
	         * @param {double} maxAge
	         * @description <br>
	         * <pre>
	         *      
	         * </pre>
	         */

	    }, {
	        key: 'maxAge',
	        set: function set(maxage) {
	            this._maxAge = maxage;
	        },
	        get: function get() {
	            return this._maxAge === undefined ? 2147483647 : this._maxAge;
	        }

	        /**
	         * 
	         * @chainable
	         * @property minTime
	         * @param {double} minTime
	         * @description <br>
	         * <pre>
	         *      
	         * </pre>
	         */

	    }, {
	        key: 'minTime',
	        set: function set(minTime) {
	            this._minTime = minTime;
	        },
	        get: function get() {
	            return this._minTime === undefined ? 2147483647 : this._minTime;
	        }
	    }]);

	    return CachePolicy;
	}();

	exports.default = CachePolicy;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "CachePolicy.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gv5_gvml
	 * 文件：Interpolation.js
	 * 作者：钱晶
	 * 部门：产品研发中心
	 * 邮箱：jqian@mail.ie.ac.cn
	 * 日期：2017‎-‎6‎-‎27 0‏‎9:49:44
	 * 用途：Cache策略type类型
	 */

	'use strict';

	/**
	 * Cache策略type类型
	 * @module global
	 * @submodule global-enum
	 * @namespace GV
	 * @class CACHE_POLICY
	 */

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  /**
	   * 缓存可读写
	   * @property {GV.CACHE_POLICY} READ_WRITE
	   * @final
	   * @static
	   */
	  READ_WRITE: 'read_write',
	  /**
	   * 只读缓存
	   * @property {GV.CACHE_POLICY} CACHE_ONLY
	   * @final
	   * @static
	   */
	  CACHE_ONLY: 'cache_only',
	  /**
	   * 不缓存
	   * @property {GV.CACHE_POLICY} NO_CACHE
	   * @final
	   * @static
	   */
	  NO_CACHE: 'no_cache'
	};

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "CACHEPOLICY.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _TileSource2 = __webpack_require__(25);

	var _TileSource3 = _interopRequireDefault(_TileSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：TileWebMapServiceSource.js
	   * 作者：lvs
	   * 部门：产品研发中心
	   * 邮箱：lvs@geovis.com.cn
	   * 日期：2017-10-24 15:33:49.
	   * 用途：基础图层数据源类
	   */

	/**
	 * @module DataSource
	 * @main DataSource
	 */
	var WebMapTileServiceSource = function (_TileSource) {
	    _inherits(WebMapTileServiceSource, _TileSource);

	    function WebMapTileServiceSource() {
	        _classCallCheck(this, WebMapTileServiceSource);

	        return _possibleConstructorReturn(this, (WebMapTileServiceSource.__proto__ || Object.getPrototypeOf(WebMapTileServiceSource)).apply(this, arguments));
	    }

	    _createClass(WebMapTileServiceSource, [{
	        key: 'driver',

	        /**
	         * OGC标准twms服务数据源
	         *  <pre>其作用主要进行地球影像和地形图层数据源的定义</pre>
	         * @namespace GV
	         * @extends TileSource
	         * @class TileWebMapServiceSource
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.url {string} 服务地址
	         * @param options.layers {string} 选择wms所融合图层列表
	         * @param options.format {string} 瓦片格式
	         * @param options.name {string} 名称
	         * @param options.srs {string} tiles瓦片使用的坐标系统
	         * @param options.tileSize {boolean} 设置图层无数据地区是否透明
	         */

	        /*
	        * 数据驱动driver
	        * @property driver
	        * @type {string}
	        */
	        get: function get() {
	            return _TagsEnum2.default.WMTS;
	        }

	        /**
	         * 服务地址
	         * @property url
	         * @type {string}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            if (this._url !== undefined) return;
	            //TODO条件判断
	            this._url = url;
	        },
	        get: function get() {
	            return this._url === undefined ? '' : this._url;
	        }

	        /**
	         * 图层名称
	         * @property name
	         * @type {string}
	         */

	    }, {
	        key: 'name',
	        set: function set(name) {
	            if (this._name !== undefined) return;
	            //TODO条件判断
	            this._name = name;
	        },
	        get: function get() {
	            return this._name === undefined ? '' : this._name;
	        }

	        /**
	         * 选择wms所融合图层列表
	         * @property layers
	         * @type {string}
	         */

	    }, {
	        key: 'layers',
	        set: function set(layers) {
	            if (this._layers !== undefined) return;
	            //TODO条件判断
	            this._layers = layers;
	        },
	        get: function get() {
	            return this._layers === undefined ? '' : this._layers;
	        }

	        /**
	         * 瓦片格式
	         * @property format
	         * @type {string}
	         */

	    }, {
	        key: 'format',
	        set: function set(format) {
	            if (this._format !== undefined) return;
	            //TODO条件判断
	            this._format = format;
	        },
	        get: function get() {
	            return this._format === undefined ? '' : this._format;
	        }

	        /**
	         * Tiles瓦片使用的坐标系统
	         * @property srs
	         * @type {string}
	         */

	    }, {
	        key: 'srs',
	        set: function set(srs) {
	            if (this._srs !== undefined) return;
	            //TODO条件判断
	            this._srs = srs;
	        },
	        get: function get() {
	            return this._srs === undefined ? '' : this._srs;
	        }
	    }, {
	        key: 'matrixset',
	        set: function set(value) {
	            if (this._matrixset !== undefined) return;
	            //TODO条件判断
	            this._matrixset = value;
	        },
	        get: function get() {
	            return this._matrixset === undefined ? '' : this._matrixset;
	        }
	    }]);

	    return WebMapTileServiceSource;
	}(_TileSource3.default);

	exports.default = WebMapTileServiceSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "WebMapTileServiceSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _DataSource2 = __webpack_require__(22);

	var _DataSource3 = _interopRequireDefault(_DataSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Styles = __webpack_require__(40);

	var _Styles2 = _interopRequireDefault(_Styles);

	var _Layout = __webpack_require__(41);

	var _Layout2 = _interopRequireDefault(_Layout);

	var _OgrModelSource = __webpack_require__(42);

	var _OgrModelSource2 = _interopRequireDefault(_OgrModelSource);

	var _TileFeatureServiceSource = __webpack_require__(43);

	var _TileFeatureServiceSource2 = _interopRequireDefault(_TileFeatureServiceSource);

	var _WebFeatureServiceSource = __webpack_require__(44);

	var _WebFeatureServiceSource2 = _interopRequireDefault(_WebFeatureServiceSource);

	var _TileMapServiceSource = __webpack_require__(26);

	var _TileMapServiceSource2 = _interopRequireDefault(_TileMapServiceSource);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：AggLiteLayerSource.js
	   * 作者：lvs
	   * 部门：产品研发中心
	   * 邮箱：lvs@geovis.com.cn
	   * 日期：2017-10-25 10:51:29.
	   * 用途：图层相关数据源类
	   */

	/**
	 * @module DataSource
	 * @main DataSource
	 */
	var AggLiteLayerSource = function (_DataSource) {
	    _inherits(AggLiteLayerSource, _DataSource);

	    function AggLiteLayerSource() {
	        _classCallCheck(this, AggLiteLayerSource);

	        return _possibleConstructorReturn(this, (AggLiteLayerSource.__proto__ || Object.getPrototypeOf(AggLiteLayerSource)).apply(this, arguments));
	    }

	    _createClass(AggLiteLayerSource, [{
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '';
	            if (!this._getproperties) {
	                this._getproperties = Util.__getGetterProperties(this);
	            }
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this._getproperties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var key = _step.value;

	                    if (this['_' + key] !== undefined || key === 'driver') {
	                        if (key === 'features') {
	                            xml += '<' + key + '>' + this[key].toXml() + '</' + key + '>';
	                        } else {
	                            xml += Util._propertyToXml(key, this[key]);
	                        }
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return xml;
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson(json) {
	            if (!json) json = {};
	            if (!this._getproperties) {
	                this._getproperties = Util.__getGetterProperties(this);
	            }

	            for (var i = 0; i < this._getproperties.length; i++) {
	                var key = this._getproperties[i];
	                if (this['_' + key] !== undefined || key === 'driver') {
	                    //直接从私有变量中回去数据 driver除外
	                    if (key === 'features') {
	                        json[key] = this[key].toJson();
	                    } else {
	                        Util._propertyToJson(this, key, json);
	                    }
	                }
	            }

	            return json;
	        }
	    }, {
	        key: 'driver',

	        /**
	         * AGGLite图层相关数据源类
	         *  <pre>其作用主要进行地球影像图层数据源的定义</pre>
	         * @namespace GV
	         * @extends DataSource
	         * @class AggLiteLayerSource
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.features {Object} 
	         * @param options.styles {Object} 样式
	         */
	        /*
	         * 数据驱动driver
	         * @property driver
	         * @type {string}
	         */
	        get: function get() {
	            return _TagsEnum2.default.AGGLite;
	        }

	        /**
	         *  
	         * @property features
	         * @type {object}
	         */

	    }, {
	        key: 'features',
	        set: function set(features) {
	            if (this._features !== undefined) return;
	            if (!(features instanceof _DataSource3.default)) {
	                switch (features.driver) {
	                    case 'ogr':
	                        this._features = new _OgrModelSource2.default(features);
	                        break;
	                    case 'tfs':
	                        this._features = new _TileFeatureServiceSource2.default(features);
	                        break;
	                    case 'wfs':
	                        this._features = new _WebFeatureServiceSource2.default(features);
	                        break;
	                    case 'tms':
	                        this._features = new _TileMapServiceSource2.default(features);
	                        break;
	                    default:
	                }
	            } else {
	                if (!features.constructor) return;
	                if (features instanceof _OgrModelSource2.default || features instanceof _TileFeatureServiceSource2.default || features instanceof _WebFeatureServiceSource2.default || features instanceof _TileMapServiceSource2.default) {
	                    this._features = features;
	                }
	            }
	        },
	        get: function get() {
	            return this._features === undefined ? '' : this._features;
	        }

	        /**
	         * 样式
	         * @property styles
	         * @type {object}
	         */

	    }, {
	        key: 'styles',
	        set: function set(styles) {
	            if (this._styles !== undefined) return;
	            if ((typeof styles === 'undefined' ? 'undefined' : _typeof(styles)) !== 'object') return;
	            if (styles instanceof _Styles2.default) {
	                this._styles = styles;
	            } else {
	                this._styles = new _Styles2.default(styles);
	            }
	        },
	        get: function get() {
	            return this._styles === undefined ? '' : this._styles;
	        }
	    }]);

	    return AggLiteLayerSource;
	}(_DataSource3.default);

	exports.default = AggLiteLayerSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "AggLiteLayerSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}(); /**
	      * 项目：GVML
	      * 文件：Styles.js
	      * 作者：钱晶
	      * 部门：产品研发中心
	      * 邮箱：jqian@mail.ie.ac.cn
	      * 日期：2017-03-30 18:22:56.
	      * 用途：实体样式综合类
	      */

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _defineProperty(obj, key, value) {
	    if (key in obj) {
	        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	    } else {
	        obj[key] = value;
	    }return obj;
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	'use strict';

	var Styles = function () {
	    function Styles(options) {
	        _classCallCheck(this, Styles);

	        this._parseJson(options);
	    }

	    /**
	     * 解析styls
	     */

	    _createClass(Styles, [{
	        key: '_parseJson',
	        value: function _parseJson(options) {

	            if (!this._setproperties) {
	                this._setproperties = Util.__getSetterProperties(this);
	            }
	            for (var key in options) {
	                if (this._setproperties.indexOf(key) < 0) continue;
	                this[key] = options[key]; // 私有化
	            }
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var innerXML = '';
	            if (!this._getproperties) this._getproperties = Util.__getGetterProperties(this);

	            for (var i = 0; i < this._getproperties.length; i++) {
	                var prikey = this._getproperties[i];
	                if (this['_' + prikey] !== undefined) {
	                    if (prikey === 'style') {
	                        innerXML += Util.stylesToXml(this.style);
	                    } else if (prikey === 'script' && typeof this[prikey] === 'string') {
	                        innerXML += Util.scriptToXml(this.script);
	                    } else {
	                        innerXML += Util._propertyToXml(prikey, this[prikey]);
	                    }
	                }
	            }

	            return '<' + this.tag + '>' + innerXML + '</' + this.tag + '>';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var obj = {};
	            if (!this._getproperties) this._getproperties = Util.__getGetterProperties(this);

	            for (var i = 0; i < this._getproperties.length; i++) {
	                var prikey = this._getproperties[i];
	                if (this['_' + prikey] !== undefined) {
	                    obj[prikey] = this[prikey]; //数据是可以被外部修改的
	                }
	            }

	            return _defineProperty({}, this.tag, obj);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return 'styles';
	        }

	        /**
	         * 样式组
	         * @property style {obj}
	         */

	    }, {
	        key: 'style',
	        set: function set(style) {
	            if (!style) return;
	            if (typeof style === 'string') {
	                this._style = Util.xmlToStyles(style);
	            } else {
	                this._style = style;
	            }
	        },
	        get: function get() {
	            return this._style;
	        }

	        /**
	         * @property library {obj}
	         * @param obj {obj}
	         * @param obj.name {string}
	         * @param obj.skin {string}
	         * @param obj.marker {string}
	         * @param obj.model {string}
	         * @param obj.icon {string}
	         */

	    }, {
	        key: 'library',
	        set: function set(library) {
	            if (!library) return;
	            this._library = library;
	        },
	        get: function get() {
	            return this._library;
	        }

	        /**
	         * @property script
	         * @param url  {string}
	         * @param value {string}
	         * @param name {string}
	         * @param language {string}
	         * @param profile {string}
	         */

	    }, {
	        key: 'script',
	        set: function set(script) {
	            if (!script) return;
	            this._script = script;
	        },
	        get: function get() {
	            return this._script;
	        }

	        /**
	          * @property selectors
	          * @param obj {obj}
	          * @param obj.name {string}
	          * @param obj.style {string}
	          * @param obj.class {string}
	          * @param obj.style_expr {string}
	          * @param obj.class_expr {string}
	          * @param obj.query {obj}
	            * @param obj.query.expr {string}
	          * @param obj.query.where {string}
	          * @param obj.query.sql {string}
	          * @param obj.query.expression {string}
	            * @param obj.query.orderby {string}
	          * @param obj.query.extent {obj}
	          * @param obj.query.extent.xmin {string}
	          * @param obj.query.extent.ymin {string}
	          * @param obj.query.extent.xmax {string}
	          * @param obj.query.extent.ymax {string}
	        */

	    }, {
	        key: 'selector',
	        set: function set(selectors) {
	            if (!selectors) return;
	            this._selector = selectors;
	        },
	        get: function get() {
	            return this._selector;
	        }
	    }]);

	    return Styles;
	}();

	exports.default = Styles;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Styles.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Layout.js
	 * 作者：钱晶
	 * 部门：产品研发中心
	 * 邮箱：jqian@mail.ie.ac.cn
	 * 日期：2017-04-09 10:42:40.
	 * 用途：实体布局类
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	var Layout = function () {
	    function Layout(options) {
	        _classCallCheck(this, Layout);

	        if (options) {
	            this._layout = options;
	        } else {
	            this._layout = undefined;
	        }
	        for (var key in options) {
	            this['_' + key] = options[key];
	        }
	    }

	    _createClass(Layout, [{
	        key: 'toProps',

	        /**
	         * Json转String
	         * @return {String}
	         */

	        value: function toProps() {
	            var xml = '';
	            for (var prikey in this) {
	                var key = prikey.substr(1);
	                if (this[key]) {
	                    xml += ' ' + key + '=\'' + this[key] + '\'';
	                }
	            }
	            return xml;
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            if (this._layout) {
	                var layoutXml = '';
	                if (this._layout.level) {
	                    var levels = this._layout.level;
	                    if (!(levels instanceof Array)) levels = [levels];
	                    for (var i in levels) {
	                        layoutXml += '<level';
	                        if (levels[i].name) layoutXml += ' name=\'' + levels[i].name + '\'';
	                        if (levels[i].style) layoutXml += ' style=\'' + levels[i].style + '\'';
	                        if (levels[i].min_range) layoutXml += ' min_range=\'' + levels[i].min_range + '\'';
	                        if (levels[i].max_range) layoutXml += ' max_range=\'' + levels[i].max_range + '\'';
	                        layoutXml += '/>';
	                    }
	                }
	                if (!this._getproperties) {
	                    this._getproperties = Util.__getGetterProperties(this);
	                }
	                for (var key in this._getproperties) {
	                    if (this['_' + key] !== undefined) {
	                        layoutXml += Util._propertyToXml(key, this[key]);
	                    }
	                }
	                return '<layout' + this.toProps() + '>' + layoutXml + '</layout>';
	            }
	            return '';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var json = {};
	            for (var prikey in this) {
	                var key = prikey.substr(1);
	                if (this[key]) json[key] = this[key];
	            }
	            if (this._layout) {
	                var levels = this._layout.level;
	                if (levels.length === 0) {
	                    json.level = {};
	                    if (levels[0].name) json.level.name = levels[0].name;
	                    if (levels[0].style) json.level.style = levels[0].style;
	                    if (levels[0].min_range) json.level.min_range = levels[0].min_range;
	                    if (levels[0].max_range) json.level.max_range = levels[0].max_range;
	                } else if (levels.length > 0) {
	                    json.level = [];
	                    var _iteratorNormalCompletion = true;
	                    var _didIteratorError = false;
	                    var _iteratorError = undefined;

	                    try {
	                        for (var _iterator = levels[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                            var l = _step.value;

	                            var level = {};
	                            if (l.name) level.name = l.name;
	                            if (l.style) level.style = l.style;
	                            if (l.min_range) level.min_range = l.min_range;
	                            if (l.max_range) level.max_range = l.max_range;
	                            json.level.push(level);
	                        }
	                    } catch (err) {
	                        _didIteratorError = true;
	                        _iteratorError = err;
	                    } finally {
	                        try {
	                            if (!_iteratorNormalCompletion && _iterator.return) {
	                                _iterator.return();
	                            }
	                        } finally {
	                            if (_didIteratorError) {
	                                throw _iteratorError;
	                            }
	                        }
	                    }
	                }
	            }
	            return json.level ? { layout: json } : undefined;
	        }
	    }, {
	        key: 'tile_size',
	        get: function get() {
	            return this._tile_size;
	        }
	    }, {
	        key: 'crop_features',
	        get: function get() {
	            return this._crop_features;
	        }
	    }, {
	        key: 'tile_size_factor',
	        get: function get() {
	            return this._tile_size_factor;
	        }
	    }]);

	    return Layout;
	}();

	exports.default = Layout;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Layout.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _DataSource2 = __webpack_require__(22);

	var _DataSource3 = _interopRequireDefault(_DataSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：OgrModelSource.js
	   * 作者：钱晶
	   * 部门：产品研发中心
	   * 邮箱：jqian@mail.ie.ac.cn
	   * 日期：2017-04-08 17:09:51.
	   * 用途：OGR矢量图层数据源类
	   */

	/**
	 * @module DataSource
	 * @main Datasource
	 */
	var OgrModelSource = function (_DataSource) {
	    _inherits(OgrModelSource, _DataSource);

	    function OgrModelSource() {
	        _classCallCheck(this, OgrModelSource);

	        return _possibleConstructorReturn(this, (OgrModelSource.__proto__ || Object.getPrototypeOf(OgrModelSource)).apply(this, arguments));
	    }

	    _createClass(OgrModelSource, [{
	        key: 'driver',

	        /**
	         * ogr服务数据源
	         *  <pre>其作用主要进行地球矢量图层数据源的定义</pre>
	         * @namespace GV
	         * @extends DataSource
	         * @class OgrModelSource
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.url {string} 文件路径（暂只支持本地路径）
	         * @param options.ogrDriver {string} ogr驱动，默认等于 “ESRI Shapefile”
	         * @param options.buildSpatialIndex {boolean} 设置为true来为特征数据构建空间索引，这将大大加快对较大数据集的访问速度
	         * @param options.geometry {string} 指定内联` OGC WKT格式`几何体，代替url或connection
	         * @param options.name {string} 数据源名称
	         * @param options.geoInterpolation {string} 地理插值方法
	         * @param options.filters {string}  
	         */

	        /*
	         * 数据驱动driver
	         * @property driver
	         * @type {string}
	         */
	        get: function get() {
	            return _TagsEnum2.default.OGR;
	        }
	        /**
	         * 文件路径（暂只支持本地路径）
	         * <pre>
	         * shapefile文件格式不适合网络传输，原因在于shapefile文件格式的特性，它是由几个文件构成的，至少有四个文件，缺一不可，读取这种格式是需要几个文件相互解析，属性表文件的读取也不是一次性的，打开它就需要先下载到本地。
	         * 因此自从这种格式被创建出来，据我所知还没看到哪个GIS软件把它部署到网络上使用的。
	         * 适合网络部署的矢量数据格式有tfs和wfs.
	         * </pre>
	         *  url
	         * @type {string}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            if (this._url !== undefined) return;
	            this._url = url;
	        },
	        get: function get() {
	            return this._url === undefined ? '' : this._url;
	        }

	        /*
	         * 
	         * @property connection
	         * @type {string}
	         */

	    }, {
	        key: 'connection',
	        set: function set(connection) {
	            if (this._connection !== undefined) return;
	            this._connection = connection;
	        },
	        get: function get() {
	            return this._connection === undefined ? '' : this._connection;
	        }

	        /**
	         * ogr驱动，默认等于 “ESRI Shapefile”
	         * @property ogrDriver
	         * @type {string}
	         */

	    }, {
	        key: 'ogrDriver',
	        set: function set(ogrDriver) {
	            if (this._ogrDriver !== undefined) return;
	            this._ogrDriver = ogrDriver;
	        },
	        get: function get() {
	            return this._ogrDriver === undefined ? '' : this._ogrDriver;
	        }

	        /**
	         * 设置为true来为特征数据构建空间索引，这将大大加快对较大数据集的访问速度
	         * @property buildSpatialIndex
	         * @type {string}
	         */

	    }, {
	        key: 'buildSpatialIndex',
	        set: function set(buildSpatialIndex) {
	            if (this._buildSpatialIndex !== undefined) return;
	            this._buildSpatialIndex = buildSpatialIndex;
	        },
	        get: function get() {
	            return this._buildSpatialIndex === undefined ? '' : this._buildSpatialIndex;
	        }

	        /*
	         * 
	         * @property forceRebuildSpatial
	         * @type {string}
	         */

	    }, {
	        key: 'forceRebuildSpatial',
	        set: function set(forceRebuildSpatial) {
	            if (this._forceRebuildSpatial !== undefined) return;
	            this._forceRebuildSpatial = forceRebuildSpatial;
	        },
	        get: function get() {
	            return this._forceRebuildSpatial === undefined ? '' : this._forceRebuildSpatial;
	        }

	        /**
	         * 指定内联` OGC WKT格式`几何体，代替url或connection
	         * @property geometry
	         * @type {string}
	         */

	    }, {
	        key: 'geometry',
	        set: function set(geometry) {
	            if (this._geometry !== undefined) return;
	            this._geometry = geometry;
	        },
	        get: function get() {
	            return this._geometry === undefined ? '' : this._geometry;
	        }

	        /*
	         * 
	         * @property geometryUrl
	         * @type {string}
	         */

	    }, {
	        key: 'geometryUrl',
	        set: function set(geometryUrl) {
	            if (this._geometryUrl !== undefined) return;
	            this._geometryUrl = geometryUrl;
	        },
	        get: function get() {
	            return this._geometryUrl === undefined ? '' : this._geometryUrl;
	        }

	        /*
	         * 
	         * @property layer
	         * @type {string}
	         */

	    }, {
	        key: 'layer',
	        set: function set(layer) {
	            if (this._layer !== undefined) return;
	            this._layer = layer;
	        },
	        get: function get() {
	            return this._layer === undefined ? '' : this._layer;
	        }

	        /**
	         * 数据源名称
	         * @property name
	         * @type {string}
	         */

	    }, {
	        key: 'name',
	        set: function set(name) {
	            if (this._name !== undefined) return;
	            this._name = name;
	        },
	        get: function get() {
	            return this._name === undefined ? '' : this._name;
	        }

	        /*
	         * 
	         * @property openWrite
	         * @type {string}
	         */

	    }, {
	        key: 'openWrite',
	        set: function set(openWrite) {
	            if (this._openWrite !== undefined) return;
	            this._openWrite = openWrite;
	        },
	        get: function get() {
	            return this._openWrite === undefined ? '' : this._openWrite;
	        }

	        /*
	         * 
	         * @property profile
	         * @type {string}
	         */

	    }, {
	        key: 'profile',
	        set: function set(profile) {
	            if (this._profile !== undefined) return;
	            this._profile = profile;
	        },
	        get: function get() {
	            return this._profile === undefined ? '' : this._profile;
	        }

	        /*
	         * 
	         * @property cachePolicy
	         * @type {string}
	         */

	    }, {
	        key: 'cachePolicy',
	        set: function set(cachePolicy) {
	            if (this._cachePolicy !== undefined) return;
	            this._cachePolicy = cachePolicy;
	        },
	        get: function get() {
	            return this._cachePolicy === undefined ? '' : this._cachePolicy;
	        }

	        /**
	         * 地理插值方法
	         * @property geoInterpolation
	         * @type {string}
	         */

	    }, {
	        key: 'geoInterpolation',
	        set: function set(geoInterpolation) {
	            if (this._geoInterpolation !== undefined) return;
	            this._geoInterpolation = geoInterpolation;
	        },
	        get: function get() {
	            return this._geoInterpolation === undefined ? '' : this._geoInterpolation;
	        }

	        /*
	         * 
	         * @property fidAttribute
	         * @type {string}
	         */

	    }, {
	        key: 'fidAttribute',
	        set: function set(fidAttribute) {
	            if (this._fidAttribute !== undefined) return;
	            this._fidAttribute = fidAttribute;
	        },
	        get: function get() {
	            return this._fidAttribute === undefined ? '' : this._fidAttribute;
	        }

	        /**
	         * 
	         * @property filters
	         * @type {string}
	         */

	    }, {
	        key: 'filters',
	        set: function set(filters) {
	            if (this._filters !== undefined) return;
	            this._filters = filters;
	        },
	        get: function get() {
	            return this._filters === undefined ? '' : this._filters;
	        }
	    }]);

	    return OgrModelSource;
	}(_DataSource3.default);

	exports.default = OgrModelSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "OgrModelSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _DataSource2 = __webpack_require__(22);

	var _DataSource3 = _interopRequireDefault(_DataSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：TileFeatureServiceSource.js
	   * 作者：钱晶
	   * 部门：产品研发中心
	   * 邮箱：jqian@mail.ie.ac.cn
	   * 日期：2017-04-08 17:09:51.
	   * 用途：TFS矢量图层数据源类
	   */

	/**
	 * @module DataSource
	 * @main Datasource
	 */
	var TileFeatureServiceSource = function (_DataSource) {
	    _inherits(TileFeatureServiceSource, _DataSource);

	    function TileFeatureServiceSource() {
	        _classCallCheck(this, TileFeatureServiceSource);

	        return _possibleConstructorReturn(this, (TileFeatureServiceSource.__proto__ || Object.getPrototypeOf(TileFeatureServiceSource)).apply(this, arguments));
	    }

	    _createClass(TileFeatureServiceSource, [{
	        key: 'driver',

	        /**
	         * OGC标准tfs服务数据源
	         *  <pre>其作用主要进行地球矢量图层数据源的定义</pre>
	         * @namespace GV
	         * @extends DataSource
	         * @class TileFeatureServiceSource
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.url {string} 服务地址
	         * @param options.format {string}  瓦片格式
	         * @param options.invertY {boolean}
	         * @param options.minLevel {int} 设置细节的最低能见度，最小为0，值越大则需要把视角拖得越高才可看见高程(0)
	         * @param options.maxLevel {int} 设置细节的最大可见度(23)
	         * @param options.name {string} 数据源名称
	         * @param options.geoInterpolation {string} 地理插值方法
	         * @param options.filters {string}    
	         */
	        /*
	        * 数据驱动driver
	        * @property driver
	        * @type {string}
	        */
	        get: function get() {
	            return _TagsEnum2.default.TFS;
	        }
	        /**
	         * 服务地址
	         * @property url
	         * @type {string}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            if (this._url !== undefined) return;
	            //TODO条件判断
	            this._url = url;
	        },
	        get: function get() {
	            return this._url === undefined ? '' : this._url;
	        }

	        /**
	         * 瓦片格式
	         * @property format
	         * @type {string}
	         */

	    }, {
	        key: 'format',
	        set: function set(format) {
	            if (this._format !== undefined) return;
	            //TODO条件判断
	            this._format = format;
	        },
	        get: function get() {
	            return this._format === undefined ? '' : this._format;
	        }

	        /**
	         * 
	         * @property invertY
	         * @type {string}
	         */

	    }, {
	        key: 'invertY',
	        set: function set(invertY) {
	            if (this._invertY !== undefined) return;
	            //TODO条件判断
	            this._invertY = invertY;
	        },
	        get: function get() {
	            return this._invertY === undefined ? '' : this._invertY;
	        }

	        /**
	         * 设置细节的最低能见度，最小为0，值越大则需要把视角拖得越高才可看见高程(0)
	         * @property minLevel
	         * @type {string}
	         */

	    }, {
	        key: 'minLevel',
	        set: function set(minLevel) {
	            if (this._minLevel !== undefined) return;
	            //TODO条件判断
	            this._minLevel = minLevel;
	        },
	        get: function get() {
	            return this._minLevel === undefined ? '' : this._minLevel;
	        }

	        /**
	         * 设置细节的最大可见度(23)
	         * @property maxLevel
	         * @type {string}
	         */

	    }, {
	        key: 'maxLevel',
	        set: function set(maxLevel) {
	            if (this._maxLevel !== undefined) return;
	            //TODO条件判断
	            this._maxLevel = maxLevel;
	        },
	        get: function get() {
	            return this._maxLevel === undefined ? '' : this._maxLevel;
	        }

	        /**
	         * 数据源名称
	         * @property name
	         * @type {string}
	         */

	    }, {
	        key: 'name',
	        set: function set(name) {
	            if (this._name !== undefined) return;
	            //TODO条件判断
	            this._name = name;
	        },
	        get: function get() {
	            return this._name === undefined ? '' : this._name;
	        }

	        /*
	         * 
	         * @property openWrite
	         * @type {string}
	         */

	    }, {
	        key: 'openWrite',
	        set: function set(openWrite) {
	            if (this._openWrite !== undefined) return;
	            //TODO条件判断
	            this._openWrite = openWrite;
	        },
	        get: function get() {
	            return this._openWrite === undefined ? '' : this._openWrite;
	        }

	        /*
	         * 
	         * @property profile
	         * @type {string}
	         */

	    }, {
	        key: 'profile',
	        set: function set(profile) {
	            if (this._profile !== undefined) return;
	            //TODO条件判断
	            this._profile = profile;
	        },
	        get: function get() {
	            return this._profile === undefined ? '' : this._profile;
	        }

	        /*
	         * 
	         * @property cachePolicy
	         * @type {string}
	         */

	    }, {
	        key: 'cachePolicy',
	        set: function set(cachePolicy) {
	            if (this._cachePolicy !== undefined) return;
	            //TODO条件判断
	            this._cachePolicy = cachePolicy;
	        },
	        get: function get() {
	            return this._cachePolicy === undefined ? '' : this._cachePolicy;
	        }

	        /**
	         * 地理插值方法
	         * @property geoInterpolation
	         * @type {string}
	         */

	    }, {
	        key: 'geoInterpolation',
	        set: function set(geoInterpolation) {
	            if (this._geoInterpolation !== undefined) return;
	            //TODO条件判断
	            this._geoInterpolation = geoInterpolation;
	        },
	        get: function get() {
	            return this._geoInterpolation === undefined ? '' : this._geoInterpolation;
	        }

	        /*
	         * 
	         * @property fidAttribute
	         * @type {string}
	         */

	    }, {
	        key: 'fidAttribute',
	        set: function set(fidAttribute) {
	            if (this._fidAttribute !== undefined) return;
	            //TODO条件判断
	            this._fidAttribute = fidAttribute;
	        },
	        get: function get() {
	            return this._fidAttribute === undefined ? '' : this._fidAttribute;
	        }

	        /**
	         * 
	         * @property filters
	         * @type {string}
	         */

	    }, {
	        key: 'filters',
	        set: function set(filters) {
	            if (this._filters !== undefined) return;
	            //TODO条件判断
	            this._filters = filters;
	        },
	        get: function get() {
	            return this._filters === undefined ? '' : this._filters;
	        }
	    }]);

	    return TileFeatureServiceSource;
	}(_DataSource3.default);

	exports.default = TileFeatureServiceSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "TileFeatureServiceSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _DataSource2 = __webpack_require__(22);

	var _DataSource3 = _interopRequireDefault(_DataSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：WebFeatureServiceSource.js
	   * 作者：钱晶
	   * 部门：产品研发中心
	   * 邮箱：jqian@mail.ie.ac.cn
	   * 日期：2017-04-08 17:09:51.
	   * 用途：OGR矢量图层数据源类
	   */

	/**
	 * @module DataSource
	 * @main Datasource
	 */

	var WebFeatureServiceSource = function (_DataSource) {
	    _inherits(WebFeatureServiceSource, _DataSource);

	    function WebFeatureServiceSource() {
	        _classCallCheck(this, WebFeatureServiceSource);

	        return _possibleConstructorReturn(this, (WebFeatureServiceSource.__proto__ || Object.getPrototypeOf(WebFeatureServiceSource)).apply(this, arguments));
	    }

	    _createClass(WebFeatureServiceSource, [{
	        key: 'driver',

	        /**
	         * OGC标准wfs服务数据源
	         *  <pre>其作用主要进行地球矢量图层数据源的定义</pre>
	         * @namespace GV
	         * @extends DataSource
	         * @class WebFeatureServiceSource
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.url {string} 文件路径
	         * @param options.name {string} 数据源名称
	         * @param options.geoInterpolation {string} 地理插值方法
	         * @param options.filters {string}  
	         */
	        /*
	        * 数据驱动driver
	        * @property driver
	        * @type {string}
	        */
	        get: function get() {
	            return _TagsEnum2.default.WFS;
	        }
	        /**
	         * 文件路径
	         * @property url
	         * @type {string}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            if (this._url !== undefined) return;
	            //TODO条件判断
	            this._url = url;
	        },
	        get: function get() {
	            return this._url === undefined ? '' : this._url;
	        }

	        /*
	         * 
	         * @property geometryProfile
	         * @type {string}
	         */

	    }, {
	        key: 'geometryProfile',
	        set: function set(geometryProfile) {
	            if (this._geometryProfile !== undefined) return;
	            //TODO条件判断
	            this._geometryProfile = geometryProfile;
	        },
	        get: function get() {
	            return this._geometryProfile === undefined ? '' : this._geometryProfile;
	        }

	        /*
	         * 
	         * @property typename
	         * @type {string}
	         */

	    }, {
	        key: 'typename',
	        set: function set(typename) {
	            if (this._typename !== undefined) return;
	            //TODO条件判断
	            this._typename = typename;
	        },
	        get: function get() {
	            return this._url === undefined ? '' : this._typename;
	        }

	        /*
	         * 
	         * @property outputformat
	         * @type {string}
	         */

	    }, {
	        key: 'outputformat',
	        set: function set(outputformat) {
	            if (this._outputformat !== undefined) return;
	            //TODO条件判断
	            this._outputformat = outputformat;
	        },
	        get: function get() {
	            return this._outputformat === undefined ? '' : this._outputformat;
	        }

	        /*
	         * 
	         * @property maxfeatures
	         * @type {string}
	         */

	    }, {
	        key: 'maxfeatures',
	        set: function set(maxfeatures) {
	            if (this._maxfeatures !== undefined) return;
	            //TODO条件判断
	            this._maxfeatures = maxfeatures;
	        },
	        get: function get() {
	            return this._maxfeatures === undefined ? '' : this._maxfeatures;
	        }

	        /*
	         * 
	         * @property disableTiling
	         * @type {string}
	         */

	    }, {
	        key: 'disableTiling',
	        set: function set(disableTiling) {
	            if (this._disableTiling !== undefined) return;
	            //TODO条件判断
	            this._disableTiling = disableTiling;
	        },
	        get: function get() {
	            return this._disableTiling === undefined ? '' : this._disableTiling;
	        }

	        /*
	         * 
	         * @property requestBuffer
	         * @type {string}
	         */

	    }, {
	        key: 'requestBuffer',
	        set: function set(requestBuffer) {
	            if (this._requestBuffer !== undefined) return;
	            //TODO条件判断
	            this._requestBuffer = requestBuffer;
	        },
	        get: function get() {
	            return this._requestBuffer === undefined ? '' : this._requestBuffer;
	        }

	        /**
	         * 数据源名称
	         * @property name
	         * @type {string}
	         */

	    }, {
	        key: 'name',
	        set: function set(name) {
	            if (this._name !== undefined) return;
	            //TODO条件判断
	            this._name = name;
	        },
	        get: function get() {
	            return this._name === undefined ? '' : this._name;
	        }

	        /*
	         * 
	         * @property openWrite
	         * @type {string}
	         */

	    }, {
	        key: 'openWrite',
	        set: function set(openWrite) {
	            if (this._openWrite !== undefined) return;
	            //TODO条件判断
	            this._openWrite = openWrite;
	        },
	        get: function get() {
	            return this._openWrite === undefined ? '' : this._openWrite;
	        }

	        /*
	         * 
	         * @property profile
	         * @type {string}
	         */

	    }, {
	        key: 'profile',
	        set: function set(profile) {
	            if (this._profile !== undefined) return;
	            //TODO条件判断
	            this._profile = profile;
	        },
	        get: function get() {
	            return this._profile === undefined ? '' : this._profile;
	        }

	        /*
	         * 
	         * @property cachePolicy
	         * @type {string}
	         */

	    }, {
	        key: 'cachePolicy',
	        set: function set(cachePolicy) {
	            if (this._cachePolicy !== undefined) return;
	            //TODO条件判断
	            this._cachePolicy = cachePolicy;
	        },
	        get: function get() {
	            return this._cachePolicy === undefined ? '' : this._cachePolicy;
	        }

	        /**
	         * 地理插值方法
	         * @property geoInterpolation
	         * @type {string}
	         */

	    }, {
	        key: 'geoInterpolation',
	        set: function set(geoInterpolation) {
	            if (this._geoInterpolation !== undefined) return;
	            //TODO条件判断
	            this._geoInterpolation = geoInterpolation;
	        },
	        get: function get() {
	            return this._geoInterpolation === undefined ? '' : this._geoInterpolation;
	        }

	        /*
	         * 
	         * @property fidAttribute
	         * @type {string}
	         */

	    }, {
	        key: 'fidAttribute',
	        set: function set(fidAttribute) {
	            if (this._fidAttribute !== undefined) return;
	            //TODO条件判断
	            this._fidAttribute = fidAttribute;
	        },
	        get: function get() {
	            return this._fidAttribute === undefined ? '' : this._fidAttribute;
	        }

	        /**
	         * 
	         * @property filters
	         * @type {string}
	         */

	    }, {
	        key: 'filters',
	        set: function set(filters) {
	            if (this._filters !== undefined) return;
	            //TODO条件判断
	            this._filters = filters;
	        },
	        get: function get() {
	            return this._filters === undefined ? '' : this._filters;
	        }
	    }]);

	    return WebFeatureServiceSource;
	}(_DataSource3.default);

	exports.default = WebFeatureServiceSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "WebFeatureServiceSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：ColorFilter.js
	 * 作者：钱晶
	 * 部门：产品研发中心
	 * 邮箱：jqian@mail.ie.ac.cn
	 * 日期：2016-04-26 20:55:54
	 * 用途：颜色过滤类
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _ENUM = __webpack_require__(14);

	var _ENUM2 = _interopRequireDefault(_ENUM);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
	    if (key in obj) {
	        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	    } else {
	        obj[key] = value;
	    }return obj;
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	/**
	 * @module layer
	 * @main layer
	 */
	var ColorFilter = function () {
	    /**
	     * 颜色过滤类
	     *      <pre>其作用主要进行影像图层颜色的过滤</pre>
	     * @namespace GV
	     * @class ColorFilter
	     * @constructor
	     * @param {object} 颜色缓冲区
	     */
	    function ColorFilter(params, parent) {
	        _classCallCheck(this, ColorFilter);

	        this._parseJson(params);
	        this.parent = parent;
	    }

	    _createClass(ColorFilter, [{
	        key: '_parseJson',

	        /**
	         * 初始化程序解析传入数据
	         */
	        value: function _parseJson(params, post) {
	            if (post === false) {
	                this._post = false;
	            }

	            if (!this._properties) {
	                this._properties = Util.__getSetterProperties(this);
	            }
	            for (var key in params) {
	                var tempKey = Util.a_aToaA(key);
	                if (this._properties.indexOf(tempKey) < 0) continue;
	                this[tempKey] = params[key]; // 私有化
	            }

	            this._post = true;
	        }

	        /**
	         * rollFilter卷帘过滤器
	         * @property rollFilter
	         * @param {double} min_percent_horizon (0.0~1.0)
	         * @param {double} max_percent_horizon (0.0~1.0)
	         * @param {double} max_percent_vertical (0.0~1.0)
	         * @param {double} min_percent_vertical (0.0~1.0)
	         * @param {Boolean} opposite 
	         */

	    }, {
	        key: 'setRollType',

	        /**
	         * 设置卷帘类型
	         * @method setRollType
	         * @param {GV.ROLL_TYPE} rollType 卷帘类型(参考枚举类型ENUM.ROLL_TYPE)
	         */
	        value: function setRollType(rollType) {
	            if (rollType === this._rollType) return;
	            this._rollType = rollType;
	        }

	        /**
	         * 获取卷帘类型
	         * @method getRollType
	         * @param {GV.ROLL_TYPE} rollType 卷帘类型(参考枚举类型ENUM.ROLL_TYPE)(!!!!注意只有调用过setRollType方法时该属性才有效)
	         */

	    }, {
	        key: 'getRollType',
	        value: function getRollType() {
	            return this._rollType;
	        }

	        /**
	         * 设置卷帘大小只有设置了setRollType方法时才有效
	         * @method setRollSize
	         * @param {double} rollSize 取值范围(0.0 ~ 1.0)
	         */

	    }, {
	        key: 'setRollSize',
	        value: function setRollSize(rollSize) {
	            if (rollSize === this._rollSize) return;
	            this._rollSize = rollSize;

	            this._parseRollType();
	        }

	        /**
	         * 获得卷帘大小只有设置了setRollType方法时才有效
	         * @method getRollSize
	         * @param {double} rollSize 取值范围(0.0 ~ 1.0)
	         */

	    }, {
	        key: 'getRollSize',
	        value: function getRollSize() {
	            return this._rollSize;
	        }

	        /**
	         * 解析卷帘功能
	         * 卷帘支持
	         */

	    }, {
	        key: '_parseRollType',
	        value: function _parseRollType() {

	            if (this._rollType === _ENUM2.default.ROLL_TYPE.NONE || !this._rollType) {
	                this._rollFilter = undefined;
	                this._rollSize = 0;
	                return;
	            }
	            var roll = {};
	            roll.min_percent_horizon = 0;
	            roll.min_percent_vertical = 0;
	            roll.max_percent_horizon = 0;
	            roll.max_percent_vertical = 0;
	            roll.opposite = true;

	            switch (this._rollType) {
	                case 'LEFT_TO_RIGHT':
	                    roll.min_percent_horizon = this._rollSize;
	                    this.rollFilter = roll;
	                    return;
	                case 'RIGHT_TO_LEFT':
	                    roll.max_percent_horizon = this._rollSize;
	                    this.rollFilter = roll;
	                    return;
	                case 'TOP_TO_BOTTOM':
	                    roll.min_percent_vertical = this._rollSize;
	                    this.rollFilter = roll;
	                    return;
	                case 'BOTTOM_TO_TOP':
	                    roll.max_percent_vertical = this._rollSize;
	                    this.rollFilter = roll;
	                    return;
	                case 'RECT_OUTSIDE_TO_CENTER':
	                    roll.min_percent_horizon = this._rollSize;
	                    roll.max_percent_horizon = this._rollSize;
	                    roll.max_percent_vertical = this._rollSize;
	                    roll.min_percent_vertical = this._rollSize;
	                    this.rollFilter = roll;
	                    return;
	                case 'RECT_CENTER_TO_OUTSIDE':
	                    roll.min_percent_horizon = this._rollSize;
	                    roll.max_percent_horizon = this._rollSize;
	                    roll.max_percent_vertical = this._rollSize;
	                    roll.min_percent_vertical = this._rollSize;
	                    roll.opposite = false;
	                    this.rollFilter = roll;
	                    return;
	            }
	            // this.rollFilter = roll;
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '';

	            if (!this._properties) this._properties = Util.__getSetterProperties(this);
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this._properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var key = _step.value;

	                    if (!this['_' + key]) continue;
	                    xml = xml + Util._propertyToXml(key, this[key]);
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            if (xml === '') return '';
	            return '<' + _TagsEnum2.default.ColorFilter + '>' + xml + '</' + _TagsEnum2.default.ColorFilter + '>';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var json = {};

	            if (!this._properties) this._properties = Util.__getSetterProperties(this);
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = this._properties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var key = _step2.value;

	                    if (!this['_' + key]) continue;
	                    Util._propertyToJson(this, key, json);
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            return _defineProperty({}, _TagsEnum2.default.ColorFilter, json);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.ColorFilter;
	        }
	    }, {
	        key: 'parent',
	        set: function set(parent) {
	            if (parent === this._parent) return;
	            this._parent = parent;
	        },
	        get: function get() {
	            return this._parent;
	        }
	    }, {
	        key: 'rollFilter',
	        set: function set(roll) {
	            this._rollFilter = roll;
	            if (this.parent && this._post) this.parent._updateColorFilter('roll_filter', this.rollFilter);
	        },
	        get: function get() {
	            return this._rollFilter;
	        }

	        /**
	         * BrightnessContrastFilter颜色过滤器
	         * @property brightnessContrastFilter
	         * @param {double} b Brightness通道(亮度)
	         * @param {double} c Contrast通道(对比度)
	         * @description <br>
	         * <pre>
	         * 该滤镜调整图像的亮度和对比度
	         * b和c是传入的百分比的值。
	         * 例如， c=1.2将对比度增加20%
	         * </pre>
	         */

	    }, {
	        key: 'brightnessContrastFilter',
	        set: function set(brightnessContrast) {
	            this._brightnessContrastFilter = brightnessContrast;
	            if (this.parent) this.parent.ColorFilters = this;
	            if (this.parent && this._post) this.parent._updateColorFilter('brightness_contrast_filter', this._brightnessContrastFilter);
	        },
	        get: function get() {
	            return this._brightnessContrastFilter;
	        }

	        /**
	         * chromaKey颜色过滤器
	         * @property chromaKeyFilter
	         * @param {double} r RED通道
	         * @param {double} g GREEN通道
	         * @param {double} b BLUE通道
	         * @param {double} distance 与指定颜色的接近度
	         * @description <br>
	         * <pre>
	         *      此过滤器匹配颜色值以使片段变得透明，提供一种“绿屏”效果
	         *      例: {r:1, g:0, b:0, distance:0.1}
	         *          找到红色的像素并将其变透明，idstance设置接近红色的颜色值得接近程度，并设为透明。
	         * </pre>
	         */

	    }, {
	        key: 'chromaKeyFilter',
	        set: function set(chromaKey) {
	            this._chromaKeyFilter = chromaKey;
	            if (this.parent) this.parent.ColorFilters = this;
	            if (this.parent && this._post) this.parent._updateColorFilter('chroma_key_filter', this._chromaKeyFilter);
	        },
	        get: function get() {
	            return this._chromaKeyFilter;
	        }

	        /**
	         * cmykFilter颜色过滤器
	         * @property cmykFilter
	         * @param {double} c 青色通道
	         * @param {double} m 品红通道
	         * @param {double} y 黄色通道
	         * @param {double} k 黑色通道
	         * @description <br>
	         * <pre>
	         *      该滤镜可以抵消cmyk（青色，品红色，黄色，黑色）的颜色
	         *      例: {y:-0.1}
	         *       在这里我们将片段的“黄度”降低0.1。有效范围是[-1..1]对于每个c，m，y，k
	         * </pre>
	         */

	    }, {
	        key: 'cmykFilter',
	        set: function set(cmyk) {
	            this._cmykFilter = cmyk;
	            if (this.parent) this.parent.ColorFilters = this;
	            if (this.parent && this._post) this.parent._updateColorFilter('cmyk_filter', this._cmykFilter);
	        },
	        get: function get() {
	            return this._cmykFilter;
	        }

	        /**
	         * gammaFilter颜色过滤器
	         * @property gammaFilter
	         * @param {double} r
	         * @param {double} g
	         * @param {double} b
	         * @param {double} rgb
	         * @description <br>
	         * <pre>
	         * 该滤镜执行伽马校正。您可以指定一个伽玛每个值r，g或者b，也可以调整它们放在一起
	         * {rgb:1.3}
	         * </pre>
	         */

	    }, {
	        key: 'gammaFilter',
	        set: function set(gamma) {
	            this._gammaFilter = gamma;
	            if (this.parent) this.parent.ColorFilters = this;
	            if (this.parent && this._post) this.parent._updateColorFilter('gamma_filter', this._gammaFilter);
	        },
	        get: function get() {
	            return this._gammaFilter;
	        }

	        /**
	         * glslFilter颜色过滤器
	         * @property glslFilter
	         * @param {string} 
	         * @description <br>
	         * <pre>
	         * glsl过滤器可以嵌入自定义glsl代码，以便您可以以任何您喜欢的方式调整 颜色值。只需编写一个对rgbA 颜色变量进行操作的glsl代码块：inout vec4 color
	         * 'color.rgb *= pow(color.rgb, 1.0/vec3(1.3));'
	         * </pre>
	         */

	    }, {
	        key: 'glslFilter',
	        set: function set(glsl) {
	            this._glslFilter = glsl;
	            if (this.parent) this.parent.ColorFilters = this;
	            if (this.parent && this._post) this.parent._updateColorFilter('glsl_filter', this._glslFilter);
	        },
	        get: function get() {
	            return this._glslFilter;
	        }

	        /**
	         * rgbFilter颜色过滤器
	         * @property rgbFilter
	         * @param {double} r RED通道
	         * @param {double} g GREEN通道
	         * @param {double} b BLUE通道
	         * @description <br>
	         * <pre>
	         *      rgb过滤器可以嵌入自定义rgb代码，以便可以以任何方式调整颜色值。
	         * </pre>
	         */

	    }, {
	        key: 'rgbFilter',
	        set: function set(rgb) {
	            this._rgbFilter = rgb;
	            if (this.parent) this.parent.ColorFilters = this;
	            if (this.parent && this._post) this.parent._updateColorFilter('rgb_filter', this._rgbFilter);
	        },
	        get: function get() {
	            return this._rgbFilter;
	        }

	        /**
	         * 通过hsl方式创建颜色过滤器
	         * @chainable
	         * @method hslFilter
	         * @param {double} h Hue通道(色调)
	         * @param {double} s Saturation通道(饱和度)
	         * @param {double} l lightness通道(亮度)
	         * @description <br>
	         * <pre>
	         *      
	         * </pre>
	         */

	    }, {
	        key: 'hslFilter',
	        set: function set(hsl) {
	            this._hslFilter = hsl;
	            if (this.parent) this.parent.ColorFilters = this;
	            if (this.parent && this._post) this.parent._updateColorFilter('hsl_filter', this._hslFilter);
	        },
	        get: function get() {
	            return this._hslFilter;
	        }
	    }]);

	    return ColorFilter;
	}();

	exports.default = ColorFilter;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ColorFilter.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Layer2 = __webpack_require__(18);

	var _Layer3 = _interopRequireDefault(_Layer2);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _FeatureGeomModelOptions = __webpack_require__(47);

	var _FeatureGeomModelOptions2 = _interopRequireDefault(_FeatureGeomModelOptions);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：VectorLayer.js
	   * 作者：巩志远
	   * 部门：产品研发中心
	   * 邮箱：gongzy@geovis.com
	   * 日期：‎2017‎-0‎4‎-19‎ 10:05:35
	   * 用途：矢量图层类
	   */

	/**
	 * @module layer
	 * @main layer
	 */
	var VectorLayer = function (_Layer) {
	    _inherits(VectorLayer, _Layer);

	    /**
	     * 矢量图层类(免费版该属性无效)
	     *  <pre>其作用主要进行地球矢量图层的定义</pre>
	     * @namespace GV
	     * @extends Layer
	     * @class VectorLayer
	     * @constructor
	     * @param  {undefined} null 不提供构造函数，添加新的矢量图层详见 <code>GeoCanvas.addVectorLayer()</code> 方法
	     */
	    function VectorLayer() {
	        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        var map = arguments[1];

	        _classCallCheck(this, VectorLayer);

	        return _possibleConstructorReturn(this, (VectorLayer.__proto__ || Object.getPrototypeOf(VectorLayer)).call(this, options, map));
	    }

	    _createClass(VectorLayer, [{
	        key: '_createSourceData',

	        /**
	         * 创建Provider
	         * @param options {Object}
	         */
	        value: function _createSourceData(options) {
	            //暂时最外层只支持一种数据源所以不用选择
	            this._sourceData = new _FeatureGeomModelOptions2.default(options);
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            return this._toXml();
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            return this._toJson();
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.VectorLayer;
	        }

	        /**
	         * 设置是否可用
	         * @property enabled
	         * @type {Boolean}
	        */

	    }, {
	        key: 'enabled',
	        set: function set(enabled) {
	            this._enabled = enabled;
	        },
	        get: function get() {
	            return this._enabled;
	        }

	        /**
	         * 设置是否可见
	         * @property visible
	         * @type {Boolean}
	         */

	    }, {
	        key: 'visible',
	        set: function set(visible) {
	            this._visible = visible;
	            this._updateProperty('visible');
	        },
	        get: function get() {
	            return this._visible;
	        }

	        /**
	         * 设置图层透明度, 取值范围 0-1
	         * @property opacity
	         * @type {double}
	         */

	    }, {
	        key: 'opacity',
	        set: function set(opacity) {
	            if (opacity < 0 || opacity > 1) {
	                this._opacity = 1;
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, 'VectorLayer', 'opacity', '0~1', 'none', '1'));
	            } else {
	                this._opacity = opacity;
	                this._updateProperty('opacity');
	            }
	        },
	        get: function get() {
	            return this._opacity;
	        }

	        /**
	         * 设置缓存id
	         * @property cacheid
	         * @type {String}
	         */

	    }, {
	        key: 'cacheid',
	        set: function set(cacheid) {
	            if (!cacheid) return;
	            if (this._cacheid === cacheid) return;
	            this._cacheid = cacheid;
	        },
	        get: function get() {
	            return this._cacheid;
	        }
	    }]);

	    return VectorLayer;
	}(_Layer3.default);

	exports.default = VectorLayer;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "VectorLayer.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _DataSource2 = __webpack_require__(22);

	var _DataSource3 = _interopRequireDefault(_DataSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Styles = __webpack_require__(40);

	var _Styles2 = _interopRequireDefault(_Styles);

	var _Layout = __webpack_require__(41);

	var _Layout2 = _interopRequireDefault(_Layout);

	var _OgrModelSource = __webpack_require__(42);

	var _OgrModelSource2 = _interopRequireDefault(_OgrModelSource);

	var _TileFeatureServiceSource = __webpack_require__(43);

	var _TileFeatureServiceSource2 = _interopRequireDefault(_TileFeatureServiceSource);

	var _WebFeatureServiceSource = __webpack_require__(44);

	var _WebFeatureServiceSource2 = _interopRequireDefault(_WebFeatureServiceSource);

	var _TileMapServiceSource = __webpack_require__(26);

	var _TileMapServiceSource2 = _interopRequireDefault(_TileMapServiceSource);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：FeatureGeomModelOptions.js
	   * 作者：lvs
	   * 部门：产品研发中心
	   * 邮箱：lvs@geovis.com.cn
	   * 日期：2017-10-25 10:51:29.
	   * 用途：矢量图层相关数据源类
	   */

	/**
	 * @module DataSource
	 * @main DataSource
	 */
	var FeatureGeomModelOptions = function (_DataSource) {
	    _inherits(FeatureGeomModelOptions, _DataSource);

	    function FeatureGeomModelOptions() {
	        _classCallCheck(this, FeatureGeomModelOptions);

	        return _possibleConstructorReturn(this, (FeatureGeomModelOptions.__proto__ || Object.getPrototypeOf(FeatureGeomModelOptions)).apply(this, arguments));
	    }

	    _createClass(FeatureGeomModelOptions, [{
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '';
	            if (!this._getproperties) {
	                this._getproperties = Util.__getGetterProperties(this);
	            }
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this._getproperties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var key = _step.value;

	                    if (this['_' + key] !== undefined || key === 'driver') {
	                        if (key === 'features') {
	                            xml += '<' + key + '>' + this[key].toXml() + '</' + key + '>';
	                        } else {
	                            xml += Util._propertyToXml(key, this[key]);
	                        }
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return xml;
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson(json) {
	            if (!json) json = {};
	            if (!this._getproperties) {
	                this._getproperties = Util.__getGetterProperties(this);
	            }

	            for (var i = 0; i < this._getproperties.length; i++) {
	                var key = this._getproperties[i];
	                if (this['_' + key] !== undefined || key === 'driver') {
	                    //直接从私有变量中回去数据 driver除外
	                    if (key === 'features') {
	                        json[key] = this[key].toJson();
	                    } else {
	                        Util._propertyToJson(this, key, json);
	                    }
	                }
	            }

	            return json;
	        }
	    }, {
	        key: 'driver',

	        /**
	         * 矢量图层相关数据源类
	         *  <pre>其作用主要进行地球影像图层数据源的定义</pre>
	         * @namespace GV
	         * @extends DataSource
	         * @class FeatureGeomModelOptions
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.features {Object} 
	         * @param options.styles {Object} 样式
	         * @param options.layout {Object} 
	         * @param options.cachePolicy {Object} 缓存策略 
	         * @param options.featureIndexing {Object} 
	         * @param options.cachePolicy {Object}  
	         * @param options.instancing {boolean}  
	         */
	        /* 
	         * options.renderOrder {int} 
	         * options.renderBin  {string}
	         * options.depthTestEnabled  {boolean}
	         */
	        /*
	        * 数据驱动driver
	        * @property driver
	        * @type {string}
	        */
	        get: function get() {
	            return _TagsEnum2.default.FeatureGeom;
	        }
	        /*
	         *  
	         * @property minRange
	         * @type {float}
	         */

	    }, {
	        key: 'minRange',
	        set: function set(minRange) {
	            if (this._minRange !== undefined) return;
	            //TODO条件判断
	            this._minRange = minRange;
	        },
	        get: function get() {
	            return this._minRange === undefined ? '' : this._minRange;
	        }

	        /*
	         *  
	         * @property maxRange
	         * @type {float}
	         */

	    }, {
	        key: 'maxRange',
	        set: function set(maxRange) {
	            if (this._maxRange !== undefined) return;
	            //TODO条件判断
	            this._maxRange = maxRange;
	        },
	        get: function get() {
	            return this._maxRange === undefined ? '' : this._maxRange;
	        }

	        /*
	         *  
	         * @property renderOrder
	         * @type {int}
	         */

	    }, {
	        key: 'renderOrder',
	        set: function set(renderOrder) {
	            if (this._renderOrder !== undefined) return;
	            //TODO条件判断
	            this._renderOrder = renderOrder;
	        },
	        get: function get() {
	            return this._renderOrder === undefined ? '' : this._renderOrder;
	        }

	        /*
	         *  
	         * @property renderBin
	         * @type {string}
	         */

	    }, {
	        key: 'renderBin',
	        set: function set(renderBin) {
	            if (this._renderBin !== undefined) return;
	            //TODO条件判断
	            this._renderBin = renderBin;
	        },
	        get: function get() {
	            return this._renderBin === undefined ? '' : this._renderBin;
	        }

	        /*
	         *  
	         * @property depthTestEnabled
	         * @type {boolean}
	         */

	    }, {
	        key: 'depthTestEnabled',
	        set: function set(depthTestEnabled) {
	            if (this._depthTestEnabled !== undefined) return;
	            //TODO条件判断
	            this._depthTestEnabled = depthTestEnabled;
	        },
	        get: function get() {
	            return this._depthTestEnabled === undefined ? '' : this._depthTestEnabled;
	        }

	        /**
	         *  
	         * @property features
	         * @type {object}
	         */

	    }, {
	        key: 'features',
	        set: function set(features) {
	            if (this._features !== undefined) return;
	            if (!(features instanceof _DataSource3.default)) {
	                switch (features.driver) {
	                    case 'ogr':
	                        this._features = new _OgrModelSource2.default(features);
	                        break;
	                    case 'tfs':
	                        this._features = new _TileFeatureServiceSource2.default(features);
	                        break;
	                    case 'wfs':
	                        this._features = new _WebFeatureServiceSource2.default(features);
	                        break;
	                    case 'tms':
	                        this._features = new _TileMapServiceSource2.default(features);
	                        break;
	                    default:
	                }
	            } else {
	                if (!features.constructor) return;
	                if (features instanceof _OgrModelSource2.default || features instanceof _TileFeatureServiceSource2.default || features instanceof _WebFeatureServiceSource2.default || features instanceof _TileMapServiceSource2.default) {
	                    this._features = features;
	                }
	            }
	        },
	        get: function get() {
	            return this._features === undefined ? '' : this._features;
	        }

	        /*
	         *  
	         * @property featureSource
	         * @type {object}
	         */

	    }, {
	        key: 'featureSource',
	        set: function set(featureSource) {
	            if (this._featureSource !== undefined) return;
	            //TODO条件判断
	            this._featureSource = featureSource;
	        },
	        get: function get() {
	            return this._featureSource === undefined ? '' : this._featureSource;
	        }

	        /**
	         * 样式
	         * @property styles
	         * @type {object}
	         */

	    }, {
	        key: 'styles',
	        set: function set(styles) {
	            if (this._styles !== undefined) return;
	            if ((typeof styles === 'undefined' ? 'undefined' : _typeof(styles)) !== 'object') return;
	            if (styles instanceof _Styles2.default) {
	                this._styles = styles;
	            } else {
	                this._styles = new _Styles2.default(styles);
	            }
	        },
	        get: function get() {
	            return this._styles === undefined ? '' : this._styles;
	        }

	        /**
	         *  
	         * @property layout
	         * @type {object}
	         */

	    }, {
	        key: 'layout',
	        set: function set(layout) {
	            if (this._layout !== undefined) return;
	            if ((typeof layout === 'undefined' ? 'undefined' : _typeof(layout)) !== 'object') return;
	            if (layout instanceof _Layout2.default) {
	                this._layout = layout;
	            } else {
	                this._layout = new _Layout2.default(layout);
	            }
	        },
	        get: function get() {
	            return this._layout === undefined ? '' : this._layout;
	        }

	        /*
	         *  
	         * @property paging
	         * @type {object}
	         */

	    }, {
	        key: 'paging',
	        set: function set(paging) {
	            if (this._paging !== undefined) return;
	            //TODO条件判断
	            this._paging = paging;
	        },
	        get: function get() {
	            return this._paging === undefined ? '' : this._paging;
	        }

	        /*
	         *  
	         * @property cachePolicy
	         * @type {object}
	         */

	    }, {
	        key: 'cachePolicy',
	        set: function set(cachePolicy) {
	            if (this._cachePolicy !== undefined) return;
	            //TODO条件判断
	            this._cachePolicy = cachePolicy;
	        },
	        get: function get() {
	            return this._cachePolicy === undefined ? '' : this._cachePolicy;
	        }

	        /*
	         *  
	         * @property fading
	         * @type {object}
	         */

	    }, {
	        key: 'fading',
	        set: function set(fading) {
	            if (this._fading !== undefined) return;
	            //TODO条件判断
	            this._fading = fading;
	        },
	        get: function get() {
	            return this._fading === undefined ? '' : this._fading;
	        }

	        /*
	         *  
	         * @property featureName
	         * @type {object}
	         */

	    }, {
	        key: 'featureName',
	        set: function set(featureName) {
	            if (this._featureName !== undefined) return;
	            //TODO条件判断
	            this._featureName = featureName;
	        },
	        get: function get() {
	            return this._featureName === undefined ? '' : this._featureName;
	        }

	        /*
	         *  
	         * @property featureIndexing
	         * @type {object}
	         */

	    }, {
	        key: 'featureIndexing',
	        set: function set(featureIndexing) {
	            if (this._featureIndexing !== undefined) return;
	            //TODO条件判断
	            this._featureIndexing = featureIndexing;
	        },
	        get: function get() {
	            return this._featureIndexing === undefined ? '' : this._featureIndexing;
	        }

	        /*
	         *  
	         * @property lighting
	         * @type {object}
	         */

	    }, {
	        key: 'lighting',
	        set: function set(lighting) {
	            if (this._lighting !== undefined) return;
	            //TODO条件判断
	            this._lighting = lighting;
	        },
	        get: function get() {
	            return this._lighting === undefined ? '' : this._lighting;
	        }

	        /*
	         *  
	         * @property maxGranularity
	         * @type {object}
	         */

	    }, {
	        key: 'maxGranularity',
	        set: function set(maxGranularity) {
	            if (this._maxGranularity !== undefined) return;
	            //TODO条件判断
	            this._maxGranularity = maxGranularity;
	        },
	        get: function get() {
	            return this._maxGranularity === undefined ? '' : this._maxGranularity;
	        }

	        /*
	        *  
	        * @property clusterCulling
	        * @type {object}
	        */

	    }, {
	        key: 'clusterCulling',
	        set: function set(clusterCulling) {
	            if (this._clusterCulling !== undefined) return;
	            //TODO条件判断
	            this._clusterCulling = clusterCulling;
	        },
	        get: function get() {
	            return this._clusterCulling === undefined ? '' : this._clusterCulling;
	        }

	        /*
	         *  
	         * @property backfaceCulling
	         * @type {object}
	         */

	    }, {
	        key: 'backfaceCulling',
	        set: function set(backfaceCulling) {
	            if (this._backfaceCulling !== undefined) return;
	            //TODO条件判断
	            this._backfaceCulling = backfaceCulling;
	        },
	        get: function get() {
	            return this._backfaceCulling === undefined ? '' : this._backfaceCulling;
	        }

	        /*
	         *  
	         * @property alphaBlending
	         * @type {object}
	         */

	    }, {
	        key: 'alphaBlending',
	        set: function set(alphaBlending) {
	            if (this._alphaBlending !== undefined) return;
	            //TODO条件判断
	            this._alphaBlending = alphaBlending;
	        },
	        get: function get() {
	            return this._alphaBlending === undefined ? '' : this._alphaBlending;
	        }

	        /*
	         *  
	         * @property sessionWideResourceCache
	         * @type {boolean}
	         */

	    }, {
	        key: 'sessionWideResourceCache',
	        set: function set(sessionWideResourceCache) {
	            if (this._sessionWideResourceCache !== undefined) return;
	            //TODO条件判断
	            this._sessionWideResourceCache = sessionWideResourceCache;
	        },
	        get: function get() {
	            return this._sessionWideResourceCache === undefined ? '' : this._sessionWideResourceCache;
	        }

	        /**
	         *  
	         * @property instancing
	         * @type {boolean}
	         */

	    }, {
	        key: 'instancing',
	        set: function set(instancing) {
	            if (this._instancing !== undefined) return;
	            //TODO条件判断
	            this._instancing = instancing;
	        },
	        get: function get() {
	            return this._instancing === undefined ? '' : this._instancing;
	        }
	    }]);

	    return FeatureGeomModelOptions;
	}(_DataSource3.default);

	exports.default = FeatureGeomModelOptions;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "FeatureGeomModelOptions.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	var _CTool = __webpack_require__(49);

	var _CTool2 = _interopRequireDefault(_CTool);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _Config = __webpack_require__(52);

	var _Config2 = _interopRequireDefault(_Config);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：ToolBox.js
	   * 作者：董波
	   * 部门：产品研发中心
	   * 邮箱：dongb@geovis.com
	   * 日期：2017-03-03 21:39:39.
	   * 用途：c++对应工具管理类
	   */

	var ToolBox = function (_Class) {
	    _inherits(ToolBox, _Class);

	    function ToolBox(map, params) {
	        _classCallCheck(this, ToolBox);

	        var _this = _possibleConstructorReturn(this, (ToolBox.__proto__ || Object.getPrototypeOf(ToolBox)).call(this, params));

	        _this.setMap(map);
	        _this._tools = new Map();
	        return _this;
	    }

	    _createClass(ToolBox, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            switch (msg.para1) {
	                case _MessageSet2.default.ToolBox.listen.updateToolBox:
	                    console.log('getCToolBox');
	                    console.log(msg.para2);
	                    this._registAll(msg.para2);
	                    break;
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: 'getByName',
	        value: function getByName(name) {
	            return this._tools.get(name);
	        }
	    }, {
	        key: '_registAll',
	        value: function _registAll() {
	            var _this2 = this;

	            var param = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	            // console.debug(param, '_registAll');
	            if (!_Config2.default.Register) return;
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = param[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var value = _step.value;

	                    var tmpTool = value.tool;
	                    if (tmpTool.name in _Config2.default.Register) {
	                        (function () {
	                            var toolObject = new _CTool2.default(tmpTool, _this2);
	                            toolObject.setMap(_this2.map);
	                            var commands = _Config2.default.Register[tmpTool.name].commands;
	                            var _iteratorNormalCompletion2 = true;
	                            var _didIteratorError2 = false;
	                            var _iteratorError2 = undefined;

	                            try {
	                                for (var _iterator2 = commands.post[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                                    var post = _step2.value;

	                                    toolObject[post] = function () {
	                                        for (var _len = arguments.length, arg = Array(_len), _key = 0; _key < _len; _key++) {
	                                            arg[_key] = arguments[_key];
	                                        }

	                                        toolObject.postMessage.call(arg);
	                                    };
	                                }
	                            } catch (err) {
	                                _didIteratorError2 = true;
	                                _iteratorError2 = err;
	                            } finally {
	                                try {
	                                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                                        _iterator2.return();
	                                    }
	                                } finally {
	                                    if (_didIteratorError2) {
	                                        throw _iteratorError2;
	                                    }
	                                }
	                            }

	                            toolObject['listeners'] = commands.listen;
	                            var name = _Config2.default.Register[tmpTool.name].name;
	                            _this2._tools.set(name, toolObject);
	                        })();
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            console.log('finish CToolBox');
	            console.log(this._tools);
	        }
	    }, {
	        key: '_updataToolBox',
	        value: function _updataToolBox(msg) {
	            var tools = JSON.parse(msg);

	            this._tools.clear();

	            for (var i = 0; i < tools.length; i++) {
	                var tool = tools[i].tool;
	                this._tools.set(tool.name, tool.uuid);
	            }
	        }
	    }, {
	        key: 'select',
	        value: function select(name) {
	            this.postMessage(_MessageSet2.default.ToolBox.post.selectCurrentTool, name);
	        }
	    }, {
	        key: 'clear',
	        value: function clear() {
	            this.postMessage(_MessageSet2.default.ToolBox.post.selectCurrentTool, '');
	        }
	    }]);

	    return ToolBox;
	}(_Class3.default);

	exports.default = ToolBox;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ToolBox.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _CPlugin2 = __webpack_require__(50);

	var _CPlugin3 = _interopRequireDefault(_CPlugin2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：GVML
	   * 文件：CTool.js
	   * 作者：董波
	   * 部门：产品研发中心
	   * 邮箱：dongb@geovis.com
	   * 日期：2017-03-29 10:27:13.
	   * 用途：c++ 内置的 ToolBox里的 dll 工具
	   */

	var CTool = function (_CPlugin) {
	  _inherits(CTool, _CPlugin);

	  function CTool() {
	    _classCallCheck(this, CTool);

	    return _possibleConstructorReturn(this, (CTool.__proto__ || Object.getPrototypeOf(CTool)).apply(this, arguments));
	  }

	  _createClass(CTool, [{
	    key: 'select',

	    /**
	     * 设为当前工具
	     * @method select
	     */
	    value: function select() {
	      this.parent.select(this.name);
	      return this;
	    }
	  }]);

	  return CTool;
	}(_CPlugin3.default);

	exports.default = CTool;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "CTool.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：CPlugin.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2017-04-05 16:30:14.
	 * 用途：类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	var _Event = __webpack_require__(51);

	var _Event2 = _interopRequireDefault(_Event);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var CPlugin = function (_Class) {
	    _inherits(CPlugin, _Class);

	    function CPlugin() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        var parent = arguments[1];

	        _classCallCheck(this, CPlugin);

	        var _this = _possibleConstructorReturn(this, (CPlugin.__proto__ || Object.getPrototypeOf(CPlugin)).call(this, params));

	        _this.setProps(params);
	        _this.parent = parent;
	        _this._event = new _Event2.default();
	        _this._isOpen = false;
	        return _this;
	    }

	    _createClass(CPlugin, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            this._event.fire(msg.para1, msg.para2);
	        }

	        /**
	         * 注册消息监听事件
	         * @method on
	         * @param type 消息类型
	         * @param fun 注册回调函数 
	         */

	    }, {
	        key: 'on',
	        value: function on(type, fun) {
	            this._event.on(type, fun, this);
	        }

	        /**
	         * 反注册消息监听事件
	         * @method off
	         * @param type 消息类型
	         * @param fun 注册回调函数 
	         */

	    }, {
	        key: 'off',
	        value: function off(type, fun) {
	            this._event.off(type, fun, this);
	        }
	    }, {
	        key: 'isOpen',
	        value: function isOpen() {
	            return this._isOpen;
	        }
	    }]);

	    return CPlugin;
	}(_Class3.default);

	exports.default = CPlugin;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "CPlugin.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：Event.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2016-03-22 20:42:08
	 * 用途：类
	 */

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 事件类
	 * @module core
	 * @namespace GV
	 * @class Event
	 */
	var Event = function (_Class) {
	    _inherits(Event, _Class);

	    function Event() {
	        _classCallCheck(this, Event);

	        return _possibleConstructorReturn(this, (Event.__proto__ || Object.getPrototypeOf(Event)).apply(this, arguments));
	    }

	    _createClass(Event, [{
	        key: 'on',

	        /**
	         * 添加对象的事件监听方法
	         * @method on
	         * @chainable
	         * @param types {string | json} 事件名称或者json,例如:<br/>1.'click' <br/> 2.{click:onClick,mouseMove:onMouseMove}
	         * @param fn {Function} 回调方法
	         * @param context {Object} 上下文
	         * @return {Object} 返回使用对象
	         * @example
	         *      gvml.on('mouse-click',function(event){
	         *      });
	         * @example
	         *      gvml.on('mouse-click',function(event){
	         *      })
	         */
	        value: function on(types, fn, context) {
	            // 类型可以是一个Map集合;
	            if (Util.isJson(types)) {
	                for (var type in types) {
	                    this._on(type, types[type], fn);
	                }
	            } else {
	                this._on(types, fn, context);
	            }
	            return this;
	        }

	        /**
	         * 添加监听真正入口
	         * @param type {string} 方法名称
	         * @param fn {Function} 回调方法
	         * @param context {Object} 上下文
	         * @private 私有
	         */

	    }, {
	        key: '_on',
	        value: function _on(type, fn, context) {
	            this._events = this._events || {};
	            // 获取注册的监听
	            var typeListeners = this._events[type];
	            // 容错 及初始化
	            if (!typeListeners) {
	                typeListeners = [];
	                this._events[type] = typeListeners;
	            }
	            if (context === this) {
	                // 释放部分内存
	                context = undefined;
	            }
	            var newListener = { fn: fn, ctx: context };
	            var listeners = typeListeners;
	            // 检查回调函数是否已经存在
	            for (var i = 0, len = listeners.length; i < len; i++) {
	                if (listeners[i].fn === fn && listeners[i].ctx === context) {
	                    return;
	                }
	            }
	            listeners.push(newListener);
	        }

	        /**
	         * 移除对象的事件监听方法
	         * @method off
	         * @param types {string/map} 事件名称或者Map,例如: 'click' 或者 {click:onClick,mouseMove:onMouseMove}
	         * @param fn {Function} 回调方法
	         * @param context {Object} 上下文
	         * @return {Object} 返回使用对象
	         */

	    }, {
	        key: 'off',
	        value: function off(types, fn, context) {
	            if (!types) {
	                // 没有参数的时候移除所有方法
	                delete this._events;
	            } else if ((typeof types === 'undefined' ? 'undefined' : _typeof(types)) === 'object') {
	                for (var type in types) {
	                    this._off(type, types[type], fn);
	                }
	            } else {
	                this._off(types, fn, context);
	            }
	            return this;
	        }

	        /**
	         * 移除监听真正入口
	         * @param type {string} 方法名称
	         * @param fn {Function} 回调方法
	         * @param context {Object} 上下文
	         * @private 私有
	         */

	    }, {
	        key: '_off',
	        value: function _off(type, fn, context) {
	            // 没有监听维护时返回
	            if (!this._events) {
	                return;
	            }
	            // 获取监听类型集合
	            var listeners = this._events[type];
	            // 不存在时返回
	            if (!listeners) {
	                return;
	            }
	            // 如果回调不为空
	            if (fn) {
	                // 遍历
	                for (var i = 0, len = listeners.length; i < len; i++) {
	                    listeners[i].fn = Util.falseFn;
	                }
	                delete this._events[type];
	                return;
	            }
	            if (context === this) {
	                context = undefined;
	            }
	            // 找到回调方法并移除
	            for (var _i = 0, _len = listeners.length; _i < _len; _i++) {
	                var l = listeners[_i];
	                if (l.ctx === context && l.fn === fn) {
	                    l.fn = Util.falseFn;
	                    if (this._firingCount) {
	                        this._events[type] = listeners = listeners.slice();
	                    }
	                    listeners.splice(_i, 1);
	                    return;
	                }
	            }
	        }

	        /**
	         * 激活对象的某个监听事件,可以附件数据,并可以传递给父对象
	         * @method fire
	         * @param type {string} 事件名称
	         * @param data {Object} 数据
	         * @return {Object} 返回使用对象
	         */

	    }, {
	        key: 'fire',
	        value: function fire(type, data) {
	            if (!this.listens(type)) {
	                return this;
	            }
	            if (this._events) {
	                var listeners = this._events[type];
	                if (listeners) {
	                    this._firingCount = this._firingCount + 1 || 1;
	                    for (var i = 0, len = listeners.length; i < len; i++) {
	                        var l = listeners[i];
	                        l.fn.call(l.ctx || this, data);
	                    }
	                    this._firingCount--;
	                }
	            }
	            return this;
	        }

	        /**
	         * 查询是否有指定类型的监听器
	         * @param type {string} 事件类型
	         * @param propagate {boolean} 是否向上传递
	         */

	    }, {
	        key: 'listens',
	        value: function listens(type) {
	            var listeners = this._events && this._events[type];
	            if (listeners && listeners.length > 0) {
	                return true;
	            }
	            return false;
	        }
	    }]);

	    return Event;
	}(_Class3.default);

	exports.default = Event;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Event.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	var getRootLocation = function getRootLocation() {
	    var this_host = window.location.origin;
	    var location = '';
	    var dirs = window.location.pathname.split('/');
	    for (var i = 0; i < dirs.length; i++) {
	        // 以html等网页结尾的路径
	        if (i === dirs.length - 1 && /.(html|jsp|asp|php|htm|js)$/g.test(dirs[i]) === true) {
	            location += '/';
	        } else if (dirs[i] !== null && dirs[i] !== '') {
	            location += '/' + dirs[i];
	        }
	    }
	    // console.debug(this_host + location);
	    return this_host + location;
	}; /**
	    * 项目：gvml
	    * 文件：Config.js
	    * 作者：钱晶
	    * 部门：产品研发中心
	    * 邮箱：jqian@mail.ie.ac.cn
	    * 日期：2017-03-05 19:37:20.
	    * 用途：配置类
	    */

	var getEarthLocation = function getEarthLocation() {
	    var scripts = document.scripts;
	    var location = void 0;
	    for (var i in scripts) {
	        if (scripts[i].src) {
	            // console.debug("-----", scripts[i], scripts[i]['data-main']);
	            if (scripts[i].getAttribute('data-main') === 'geovis') {
	                // script 包含[data-main]属性
	                location = Util.getLocation(scripts[i].src);
	                return location;
	            } else if (/GVML(-|.)([0-9]+.)*(min.){0,1}js$/.test(scripts[i].src) === true) {
	                // 以GVML(-版本.)(min).js结尾

	                location = Util.getLocation(scripts[i].src);
	                // console.debug(location, location.dir);
	                return location;
	            } else if (/scripts.bundle(-|.)([0-9]+.)*(min.){0,1}js$/.test(scripts[i].src) === true) {
	                //临时添加为angla框架使用

	                location = Util.getLocation(scripts[i].src);
	                // console.debug(location, location.dir);
	                var tempLocation = {};
	                tempLocation.dir = location.dir + 'assets/dist/';
	                tempLocation.filename = location.filename;
	                return tempLocation;
	            } else if (/karma_bundle.js/.test(scripts[i].src) === true) {
	                location = Util.getLocation(scripts[i].src);
	                return location;
	            }
	        }
	    }
	    return location;
	};

	var getEarthConfig = function getEarthConfig() {
	    var scripts = document.scripts;
	    for (var i in scripts) {
	        if (scripts[i].src) {
	            if (scripts[i].getAttribute('data-main') === 'geovis') {
	                // script 包含[data-main]属性
	                return {
	                    dllConfig: scripts[i].getAttribute('needDLLPlugin'),
	                    centerConfig: scripts[i].getAttribute('needCenter')
	                };
	            } else if (/GVML(-|.)([0-9]+.)*(min.){0,1}js$/.test(scripts[i].src) === true) {
	                // 以GVML(-版本.)(min).js结尾
	                return {
	                    dllConfig: scripts[i].getAttribute('needDLLPlugin'),
	                    centerConfig: scripts[i].getAttribute('needCenter')
	                };
	            }
	        }
	    }
	    return { dllConfig: undefined, centerConfig: undefined };
	};
	var earthConfig = getEarthConfig();
	var Config = void 0;
	var Center = void 0;
	if (earthConfig.dllConfig !== 'false' && earthConfig.dllConfig !== false) {
	    var config_url = earthConfig.dllConfig ? earthConfig.dllConfig : (getEarthLocation() ? getEarthLocation().dir : 'http://127.0.0.1:3000/dist/') + 'gvml.config.json';
	    Config = Util.jsonSyncPromise(config_url).responseJSON;
	}
	if (earthConfig.centerConfig !== 'false' && earthConfig.centerConfig !== false) {
	    var center_url = earthConfig.centerConfig ? earthConfig.centerConfig : (getEarthLocation() ? getEarthLocation().dir : 'http://127.0.0.1:3000/dist/') + 'center.config.json';
	    Center = Util.jsonSyncPromise(center_url).responseJSON;
	}

	var CenterConfig = void 0;
	var CenterBase = void 0;
	if (Center) {
	    CenterConfig = {};
	    CenterBase = {};
	    for (var cen in Center) {
	        CenterConfig[cen] = {};
	        CenterBase[cen] = {};
	        CenterBase[cen].protocol = Center[cen].protocol ? Center[cen].protocol : window.location.protocol;
	        CenterBase[cen].host = Center[cen].host ? Center[cen].host : window.location.host;
	        CenterBase[cen].port = Center[cen].port ? Center[cen].port : window.location.port;
	        for (var p in Center[cen].api) {
	            CenterConfig[cen][p] = CenterBase[cen].protocol + '//' + CenterBase[cen].host + ('' + (CenterBase[cen].port === '' ? '' : ':' + CenterBase[cen].port) + Center[cen].api[p].value);
	        }
	    }
	}

	exports.default = {
	    WindowLocation: getRootLocation(),
	    EarthLibLocation: getEarthLocation(),
	    Register: Config ? Config.Register : undefined,
	    DllPluginUrl: Config ? Config.DllPluginUrl : undefined,
	    needCenter: earthConfig.centerConfig,
	    Center: CenterConfig,
	    CenterBase: CenterBase
	};

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Config.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	var _CWidget = __webpack_require__(54);

	var _CWidget2 = _interopRequireDefault(_CWidget);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _Config = __webpack_require__(52);

	var _Config2 = _interopRequireDefault(_Config);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：ToolBox.js
	   * 作者：董波
	   * 部门：产品研发中心
	   * 邮箱：dongb@geovis.com
	   * 日期：2017-03-03 21:39:39.
	   * 用途：c++对应工具管理类
	   */

	var WidgetBox = function (_Class) {
	    _inherits(WidgetBox, _Class);

	    function WidgetBox(map, params) {
	        _classCallCheck(this, WidgetBox);

	        var _this = _possibleConstructorReturn(this, (WidgetBox.__proto__ || Object.getPrototypeOf(WidgetBox)).call(this, params));

	        _this.setMap(map);
	        _this._widgets = new Map();
	        return _this;
	    }

	    _createClass(WidgetBox, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            switch (msg.para1) {
	                case _MessageSet2.default.WidgetBox.listen.updateWidgetBox:
	                    console.log('getCWidgetBox');
	                    console.log(msg.para2);
	                    this._registAll(msg.para2);
	                    break;
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: 'getByName',
	        value: function getByName(name) {
	            return this._widgets.get(name);
	        }
	    }, {
	        key: '_registAll',
	        value: function _registAll() {
	            var param = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	            // console.debug(param, '_registAll');
	            if (!_Config2.default.Register) return;
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = param[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var value = _step.value;

	                    var tmpWidget = value.widget;
	                    if (tmpWidget.name in _Config2.default.Register) {
	                        var widgetObject = new _CWidget2.default(tmpWidget, this);
	                        widgetObject.setMap(this.map);
	                        var commands = _Config2.default.Register[tmpWidget.name].commands;
	                        widgetObject['post'] = commands.post;
	                        widgetObject['listeners'] = commands.listen;
	                        var name = _Config2.default.Register[tmpWidget.name].name;
	                        this._widgets.set(name, widgetObject);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            console.log('finish CWidgetBox');
	            console.log(this._widgets);
	        }
	    }, {
	        key: 'open',
	        value: function open(name) {
	            this.postMessage(_MessageSet2.default.WidgetBox.post.usingWidget, name);
	        }
	    }, {
	        key: 'close',
	        value: function close(name) {
	            this.postMessage(_MessageSet2.default.WidgetBox.post.unusingWidget, name);
	        }
	    }, {
	        key: '_updataToolBox',
	        value: function _updataToolBox(msg) {
	            var widgets = JSON.parse(msg);

	            this._widgets.clear();

	            for (var i = 0; i < widgets.length; i++) {
	                var widget = widgets[i].tool;
	                this._widgets.set(widget.name, widget.uuid);
	            }
	        }
	    }]);

	    return WidgetBox;
	}(_Class3.default);

	exports.default = WidgetBox;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "WidgetBox.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _CPlugin2 = __webpack_require__(50);

	var _CPlugin3 = _interopRequireDefault(_CPlugin2);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：GVML
	   * 文件：CPlugin.js
	   * 作者：董波
	   * 部门：产品研发中心
	   * 邮箱：dongb@geovis.com
	   * 日期：2017-03-28 20:24:13.
	   * 用途：对象类型对应的发送事件类型和监听事件类型
	   */

	var CWidget = function (_CPlugin) {
	    _inherits(CWidget, _CPlugin);

	    function CWidget() {
	        _classCallCheck(this, CWidget);

	        return _possibleConstructorReturn(this, (CWidget.__proto__ || Object.getPrototypeOf(CWidget)).apply(this, arguments));
	    }

	    _createClass(CWidget, [{
	        key: 'open',

	        /**
	         * 开启挂件
	         * @method open
	         */
	        value: function open() {
	            this.parent.open(this.name);
	            this._isOpen = true;
	            return this;
	        }

	        /**
	         * 关闭挂件
	         * @method close
	         */

	    }, {
	        key: 'close',
	        value: function close() {
	            this.parent.close(this.name);
	            this._isOpen = false;
	        }
	    }]);

	    return CWidget;
	}(_CPlugin3.default);

	exports.default = CWidget;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "CWidget.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：MessageManager.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2016-03-22 14:49:21
	 * 用途：canvas到c++的消息通讯类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Event = __webpack_require__(51);

	var _Event2 = _interopRequireDefault(_Event);

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _MessagePipeline = __webpack_require__(56);

	var _MessagePipeline2 = _interopRequireDefault(_MessagePipeline);

	var _MessageListener = __webpack_require__(57);

	var _MessageListener2 = _interopRequireDefault(_MessageListener);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var MessageManager = function (_Class) {
	    _inherits(MessageManager, _Class);

	    function MessageManager(pluginDom) {
	        _classCallCheck(this, MessageManager);

	        var _this = _possibleConstructorReturn(this, (MessageManager.__proto__ || Object.getPrototypeOf(MessageManager)).call(this));

	        _this.messagePlugin = pluginDom;
	        _this._events = new _Event2.default();
	        _this._messageListener = new _MessageListener2.default();
	        _this.messagePlugin.addEventListener('message', function (msg) {
	            if (msg.data) {
	                try {
	                    msg.data.para2 = JSON.parse(msg.data.para2);
	                } catch (e) {
	                    msg.data.para2 = msg.data.para2;
	                }
	                _this._pluginCallBack(msg.data);
	            }
	        });
	        return _this;
	    }

	    _createClass(MessageManager, [{
	        key: '_pluginCallBack',
	        value: function _pluginCallBack(data) {
	            this._events.fire(data.type, data);
	        }

	        /**
	         * 绑定事件回调
	         * @param type {String} 事件类型
	         * @param callback {Function} 回调方法
	         * @param context 作用域
	         */

	    }, {
	        key: 'bindCallback',
	        value: function bindCallback(type, callback, context) {
	            this._events.on(type, callback, context || this);
	        }

	        /**
	         * 向实体传送消息
	         * @param messageType {string} 消息类型
	         * @param id {String} 对象id
	         * @param para1 {Object} 消息参数
	         * @param para2 {Object} 消息参数
	         */

	    }, {
	        key: 'postMessage',
	        value: function postMessage(id, messageType) {
	            var _this2 = this;

	            var para1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
	            var para2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

	            if (Util.isJson(para1)) {
	                para1 = JSON.stringify(para1);
	            }
	            if (Util.isJson(para2)) {
	                para2 = JSON.stringify(para2);
	            }
	            if (Util.$.isFunction(this.messagePlugin.postMessage)) {
	                console.debug({
	                    object: id,
	                    command: messageType,
	                    para1: para1.toString(),
	                    para2: para2.toString()
	                });

	                this.messagePlugin.postMessage({
	                    object: id,
	                    command: messageType,
	                    para1: para1.toString(),
	                    para2: para2.toString()
	                });

	                //监听消息变化
	                setTimeout(function () {
	                    _this2._messageListener._callBack(messageType);
	                }, 100);

	                if (this._listenerCallback && this._listenerCallback[messageType]) this._listenerCallback[messageType]({
	                    object: id,
	                    command: messageType,
	                    para1: para1.toString(),
	                    para2: para2.toString()
	                });
	            } else {
	                //如果不是c++插件,则启用原生webgl 
	                _MessagePipeline2.default.doMessage(id, messageType, para1, para2, this);
	            }
	        }
	    }, {
	        key: 'messageListener',
	        get: function get() {
	            return this._messageListener;
	        }
	    }]);

	    return MessageManager;
	}(_Class3.default);

	exports.default = MessageManager;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "MessageManager.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gv5_gvml
	 * 文件：MessagePipe.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2017-05-25 13:49:40.
	 * 用途：类
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	var viewer = void 0;
	var pinBuilder;

	var MessagePipeline = function () {
	    function MessagePipeline() {
	        _classCallCheck(this, MessagePipeline);
	    }

	    _createClass(MessagePipeline, null, [{
	        key: 'doMessage',
	        value: function doMessage(id, command, para1, para2, messageManager) {
	            var callBackData = {
	                type: id,
	                para1: command
	            };
	            switch (command) {
	                case '':
	                    pinBuilder = new Cesium.PinBuilder();
	                    para1 = Util.xmlToJson(Util.strToXml(para1));
	                    //创建地球
	                    var plugin = Util.$(messageManager.messagePlugin);
	                    plugin.hide();
	                    viewer = new Cesium.Viewer(plugin.parent()[0], {
	                        animation: false,
	                        baseLayerPicker: false,
	                        geocoder: false,
	                        imageryProvider: Cesium.createTileMapServiceImageryProvider({
	                            url: Cesium.buildModuleUrl('Assets/Textures/NaturalEarthII')
	                        }),
	                        timeline: false,
	                        homeButton: false,
	                        infoBox: false,
	                        navigationHelpButton: false
	                    });
	                    viewer.scene.globe.enableLighting = true;
	                    viewer.bottomContainer.remove();

	                    callBackData.type = 'map';
	                    callBackData.para1 = _MessageSet2.default.Map.listen.finishCreateMap;
	                    callBackData.para2 = {
	                        map: {
	                            camera: Util.createGuid(),
	                            layerset: Util.createGuid(),
	                            sceneset: Util.createGuid(),
	                            toolbox: Util.createGuid(),
	                            widgetbox: Util.createGuid()
	                        }
	                    };
	                    viewer.resize();
	                    break;
	                case _MessageSet2.default.Enviro.loadPlugin:
	                    callBackData.type = 'map';
	                    callBackData.para2 = true;
	                    break;
	                case _MessageSet2.default.SceneSet.addScene:
	                    callBackData.para2 = {
	                        scene: {
	                            success: true
	                        }
	                    };
	                    break;
	                case _MessageSet2.default.Scene.addNode:
	                    this.addNode(para1 = Util.xmlToJson(Util.strToXml(para1)));
	                    callBackData.para2 = {
	                        node: {
	                            success: true
	                        }
	                    };
	                    break;
	                default:
	                    break;
	            }
	            setTimeout(function () {
	                messageManager._pluginCallBack(callBackData);
	            }, 0);
	        }
	    }, {
	        key: 'addNode',
	        value: function addNode(nodeJson) {
	            for (var key in nodeJson) {
	                switch (key) {
	                    case _TagsEnum2.default.Place:
	                        viewer.entities.add({
	                            position: Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),
	                            billboard: {
	                                image: pinBuilder.fromUrl('res/CesiumUnminified/Assets/Textures/maki/grocery.png', Cesium.Color.GREEN, 48),
	                                horizontalOrigin: Cesium.HorizontalOrigin.RIGHT,
	                                verticalOrigin: Cesium.VerticalOrigin.BOTTOM
	                            },
	                            label: {
	                                text: 'ceshi'
	                            }
	                        });
	                        break;
	                }
	            }
	        }
	    }]);

	    return MessagePipeline;
	}();

	exports.default = MessagePipeline;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "MessagePipeline.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}(); /**
	      * 项目：work_dir
	      * 文件：MessageManager.js
	      * 作者：董波
	      * 部门：产品研发中心
	      * 邮箱：dongb@geovis.com.cn
	      * 日期：2018-2-3 10:49:21
	      * 用途：监听消息的消息的对象
	      */

	var _Event = __webpack_require__(51);

	var _Event2 = _interopRequireDefault(_Event);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	var MessageManager = function () {
	    function MessageManager() {
	        _classCallCheck(this, MessageManager);

	        this._event = new _Event2.default();
	    }

	    _createClass(MessageManager, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            this._event.fire(msg);
	            var type = void 0;
	            switch (msg) {
	                case _MessageSet2.default.SceneSet.addScene:
	                case _MessageSet2.default.SceneSet.removeScene:
	                case _MessageSet2.default.Scene.addNode:
	                case _MessageSet2.default.Scene.removeNode:
	                    type = 'sceneUpdate';
	                    break;
	                case _MessageSet2.default.LayerSet.post.addLayer:
	                case _MessageSet2.default.LayerSet.post.removeLayer:
	                    type = 'layerUpdate';
	                    break;
	                default:
	                    return;
	            }
	            this._event.fire(type, msg);
	        }

	        /**
	         * 注册消息监听事件
	         * @method on
	         * @param type 消息类型
	         * @param fun 注册回调函数 
	         */

	    }, {
	        key: 'on',
	        value: function on(type, fun) {
	            this._event.on(type, fun, this);
	        }

	        /**
	         * 反注册消息监听事件
	         * @method off
	         * @param type 消息类型
	         * @param fun 注册回调函数 
	         */

	    }, {
	        key: 'off',
	        value: function off(type, fun) {
	            this._event.off(type, fun, this);
	        }
	    }]);

	    return MessageManager;
	}();

	exports.default = MessageManager;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "MessageListener.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：scene.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2016-03-25 15:08:31
	 * 用途：场景管理类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _slicedToArray = function () {
	    function sliceIterator(arr, i) {
	        var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
	            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	                _arr.push(_s.value);if (i && _arr.length === i) break;
	            }
	        } catch (err) {
	            _d = true;_e = err;
	        } finally {
	            try {
	                if (!_n && _i["return"]) _i["return"]();
	            } finally {
	                if (_d) throw _e;
	            }
	        }return _arr;
	    }return function (arr, i) {
	        if (Array.isArray(arr)) {
	            return arr;
	        } else if (Symbol.iterator in Object(arr)) {
	            return sliceIterator(arr, i);
	        } else {
	            throw new TypeError("Invalid attempt to destructure non-iterable instance");
	        }
	    };
	}();

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _GraphicScene = __webpack_require__(59);

	var _GraphicScene2 = _interopRequireDefault(_GraphicScene);

	var _DynTargetScene = __webpack_require__(98);

	var _DynTargetScene2 = _interopRequireDefault(_DynTargetScene);

	var _MilScene = __webpack_require__(99);

	var _MilScene2 = _interopRequireDefault(_MilScene);

	var _PlaceNameScene = __webpack_require__(101);

	var _PlaceNameScene2 = _interopRequireDefault(_PlaceNameScene);

	var _ObliqueScene = __webpack_require__(102);

	var _ObliqueScene2 = _interopRequireDefault(_ObliqueScene);

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _MilItem = __webpack_require__(100);

	var _MilItem2 = _interopRequireDefault(_MilItem);

	var _Node = __webpack_require__(61);

	var _Node2 = _interopRequireDefault(_Node);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var SceneSet = function (_Class) {
	    _inherits(SceneSet, _Class);

	    function SceneSet(map, paramJson) {
	        _classCallCheck(this, SceneSet);

	        var _this = _possibleConstructorReturn(this, (SceneSet.__proto__ || Object.getPrototypeOf(SceneSet)).call(this, { uuid: paramJson.uuid }));

	        _this._paramJson = paramJson;
	        _this._init(map);
	        return _this;
	    }

	    _createClass(SceneSet, [{
	        key: '_init',

	        /**
	         * 初始化方法,用来进行参数的初始
	         * @private
	         */
	        value: function _init(map) {
	            this._scenes = new Map();
	            this._parseScenes(this._paramJson);
	            this.setMap(map);
	            this._addAllScene();
	        }
	    }, {
	        key: '_parseScenes',
	        value: function _parseScenes(json) {
	            if (!json) return [];
	            var tempScenes = [];
	            var paramJson = json;
	            for (var key in paramJson) {
	                if (!(paramJson[key] instanceof Array)) {
	                    paramJson[key] = [paramJson[key]];
	                }
	                switch (key) {
	                    case _TagsEnum2.default.GraphicScene:
	                        var _iteratorNormalCompletion = true;
	                        var _didIteratorError = false;
	                        var _iteratorError = undefined;

	                        try {
	                            for (var _iterator = paramJson[key][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                                var s = _step.value;

	                                var scene = new _GraphicScene2.default(s);
	                                this._scenes.set(s.uuid, scene);
	                                this.add(scene);
	                                tempScenes.push(scene);
	                            }
	                        } catch (err) {
	                            _didIteratorError = true;
	                            _iteratorError = err;
	                        } finally {
	                            try {
	                                if (!_iteratorNormalCompletion && _iterator.return) {
	                                    _iterator.return();
	                                }
	                            } finally {
	                                if (_didIteratorError) {
	                                    throw _iteratorError;
	                                }
	                            }
	                        }

	                        break;
	                    case _TagsEnum2.default.DynTargetScene:
	                        var _iteratorNormalCompletion2 = true;
	                        var _didIteratorError2 = false;
	                        var _iteratorError2 = undefined;

	                        try {
	                            for (var _iterator2 = paramJson[key][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                                var _s = _step2.value;

	                                var _scene2 = new _DynTargetScene2.default(_s);
	                                this._scenes.set(_s.uuid, _scene2);
	                                this.add(_scene2);
	                                tempScenes.push(_scene2);
	                            }
	                        } catch (err) {
	                            _didIteratorError2 = true;
	                            _iteratorError2 = err;
	                        } finally {
	                            try {
	                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                                    _iterator2.return();
	                                }
	                            } finally {
	                                if (_didIteratorError2) {
	                                    throw _iteratorError2;
	                                }
	                            }
	                        }

	                        break;
	                    case _TagsEnum2.default.MilScene:
	                        var _iteratorNormalCompletion3 = true;
	                        var _didIteratorError3 = false;
	                        var _iteratorError3 = undefined;

	                        try {
	                            for (var _iterator3 = paramJson[key][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                                var _s2 = _step3.value;

	                                var _scene3 = new _MilScene2.default(_s2);
	                                this._scenes.set(_s2.uuid, _scene3);
	                                this.add(_scene3);
	                                tempScenes.push(_scene3);
	                            }
	                        } catch (err) {
	                            _didIteratorError3 = true;
	                            _iteratorError3 = err;
	                        } finally {
	                            try {
	                                if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                                    _iterator3.return();
	                                }
	                            } finally {
	                                if (_didIteratorError3) {
	                                    throw _iteratorError3;
	                                }
	                            }
	                        }

	                        break;
	                    case _TagsEnum2.default.PlaceNameScene:
	                        var _iteratorNormalCompletion4 = true;
	                        var _didIteratorError4 = false;
	                        var _iteratorError4 = undefined;

	                        try {
	                            for (var _iterator4 = paramJson[key][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                                var _s3 = _step4.value;

	                                var _scene4 = new _PlaceNameScene2.default(_s3);
	                                this._scenes.set(_s3.uuid, _scene4);
	                                this.add(_scene4);
	                                tempScenes.push(_scene4);
	                            }
	                        } catch (err) {
	                            _didIteratorError4 = true;
	                            _iteratorError4 = err;
	                        } finally {
	                            try {
	                                if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                                    _iterator4.return();
	                                }
	                            } finally {
	                                if (_didIteratorError4) {
	                                    throw _iteratorError4;
	                                }
	                            }
	                        }

	                        break;
	                    case _TagsEnum2.default.ObliqueScene:
	                        var _iteratorNormalCompletion5 = true;
	                        var _didIteratorError5 = false;
	                        var _iteratorError5 = undefined;

	                        try {
	                            for (var _iterator5 = paramJson[key][Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	                                var _s4 = _step5.value;

	                                var _scene5 = new _ObliqueScene2.default(_s4);
	                                this._scenes.set(_s4.uuid, _scene5);
	                                this.add(_scene5);
	                                tempScenes.push(_scene5);
	                            }
	                        } catch (err) {
	                            _didIteratorError5 = true;
	                            _iteratorError5 = err;
	                        } finally {
	                            try {
	                                if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                                    _iterator5.return();
	                                }
	                            } finally {
	                                if (_didIteratorError5) {
	                                    throw _iteratorError5;
	                                }
	                            }
	                        }

	                        break;
	                    default:
	                        break;
	                }
	            }
	            return tempScenes;
	        }
	    }, {
	        key: '_addAllScene',
	        value: function _addAllScene() {
	            var _this2 = this;

	            this._scenes.forEach(function (scene) {
	                _this2.add(scene);
	            });
	        }
	    }, {
	        key: '_callBack',
	        value: function _callBack(msg) {
	            switch (msg.para1) {
	                case _MessageSet2.default.SceneSet.addScene:
	                    this._addSceneBack(msg.para2.scene);
	                    break;
	                case _MessageSet2.default.SceneSet.pick:
	                    this._pick(msg.para2);
	            }
	        }

	        /**
	         * 接受pick结果
	         */

	    }, {
	        key: '_pick',
	        value: function _pick(result) {
	            if (result === undefined || this._pickCallbacks === undefined || this._pickCallbacks.size === 0) return;
	            result = result.pick;
	            var tempPick = this._pickCallbacks.get(result.id);
	            if (tempPick === undefined) return;

	            this._pickCallbacks.delete(result.id);

	            if (result.elementid === undefined || result.elementid === '') {
	                tempPick.fun();
	            }

	            //不同的接口使用不同的返回参数
	            switch (tempPick.type) {
	                case 'pick':
	                    var tempNode = this.getNodeById(result.elementid);
	                    tempNode = tempNode !== undefined ? tempNode : result.elementid;
	                    tempPick.fun(tempNode);
	                    break;

	                case 'pickElement':
	                    tempPick.fun({ elementId: result.elementid, parentId: result.parentid });
	                    break;
	                default:
	                    break;
	            }
	        }

	        /**
	         * 设置编辑节点
	         * @param edit {GV.Node}
	         */

	    }, {
	        key: 'setEditNode',
	        value: function setEditNode(edit) {
	            if (!edit || !(edit instanceof _Node2.default) || !this.getNodeById(edit.id)) return;

	            this._edit = edit;
	        }

	        /**
	         * 设置编辑节点
	         * @param edits {Array<GV.Node>}
	         */

	    }, {
	        key: 'setEditNodes',
	        value: function setEditNodes(edits) {
	            if (!edits || !(edits instanceof Array)) return;
	            this._edits = [];
	            var _iteratorNormalCompletion6 = true;
	            var _didIteratorError6 = false;
	            var _iteratorError6 = undefined;

	            try {
	                for (var _iterator6 = edits[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	                    var edit = _step6.value;

	                    if (edit && edit instanceof _Node2.default && this.getNodeById(edit.id)) {
	                        this._edits.push(edit);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError6 = true;
	                _iteratorError6 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
	                        _iterator6.return();
	                    }
	                } finally {
	                    if (_didIteratorError6) {
	                        throw _iteratorError6;
	                    }
	                }
	            }
	        }

	        /**
	         * 监听编辑节点变化
	         * 
	         */

	        /**
	         *获得当前编辑节点
	         *@return GV.Node 
	         */

	    }, {
	        key: 'getEditNode',
	        value: function getEditNode() {
	            if (!this._edit) return undefined;
	            if (!this.getNodeById(this._edit.id)) {
	                this._edit = undefined;
	            }

	            return this._edit;
	        }

	        /**
	         *获得当前编辑节点集合
	         *@return Array<GV.Node> 
	         */

	    }, {
	        key: 'getEditNodes',
	        value: function getEditNodes() {
	            var tempEdits = this._edits;
	            this._edits = [];
	            var _iteratorNormalCompletion7 = true;
	            var _didIteratorError7 = false;
	            var _iteratorError7 = undefined;

	            try {
	                for (var _iterator7 = tempEdits[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
	                    var edit = _step7.value;

	                    if (this.getNodeById(edit.id)) {
	                        this._edits.push(edit);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError7 = true;
	                _iteratorError7 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
	                        _iterator7.return();
	                    }
	                } finally {
	                    if (_didIteratorError7) {
	                        throw _iteratorError7;
	                    }
	                }
	            }

	            return this._edits;
	        }

	        /**
	         * 设置编辑场景
	         * @param GV.Scene
	         */

	    }, {
	        key: 'setEditScene',
	        value: function setEditScene(editScene) {
	            if (!this.map) return;
	            if (!this._scenes.get(editScene.id)) return;

	            if (editScene instanceof _GraphicScene2.default) {
	                this._editGraphicScene = editScene;
	            } else if (editScene instanceof _MilScene2.default) {
	                this._editMilScene = editScene;
	            } else if (editScene instanceof _DynTargetScene2.default) {
	                this._editDynTargetScene = editScene;
	            }
	        }

	        /**
	         * 获取编辑场景
	         * @return GV.Scene
	         */

	    }, {
	        key: 'getEditScene',
	        value: function getEditScene(type) {
	            if (!this.map) return;
	            var editScene = void 0;
	            switch (type) {
	                case 'GraphicScene':
	                    if (!this._editGraphicScene || !this._scenes.get(this._editGraphicScene.id)) {
	                        this._editGraphicScene = undefined;
	                    }
	                    editScene = this._editGraphicScene;
	                    break;

	                case 'MilScene':
	                    if (!this._editMilScene || !this._scenes.get(this._editMilScene.id)) {
	                        this._editMilScene = undefined;
	                    }
	                    editScene = this._editMilScene;
	                    break;

	                case 'DynTargetScene':
	                    if (!this._editDynTargetScene || !this._scenes.get(this._editDynTargetScene.id)) {
	                        this._editMilScene = undefined;
	                    }
	                    editScene = this._editDynTargetScene;
	                    break;
	                default:
	                    if (!this._editGraphicScene || !this._scenes.get(this._editGraphicScene.id)) {
	                        this._editMilScene = undefined;
	                    }
	                    editScene = this._editGraphicScene;
	            }

	            return editScene;
	        }

	        /**
	         * 场景求交
	         * @param fun {Function} 返回求交结果的回调函数 fun的参数{GV.Node | id}
	         */

	    }, {
	        key: 'pick',
	        value: function pick(fun) {
	            if (!this._pickCallbacks) this._pickCallbacks = new Map();
	            var id = Util.createGuid();
	            this._pickCallbacks.set(id, { fun: fun, type: 'pick' });
	            this.postMessage(_MessageSet2.default.SceneSet.pick, { id: id });
	            return true;
	        }

	        /**
	         * 场景求交
	         * @param fun {Function} 返回求交结果的回调函数 fun的参数{parentId,elementId}
	         */

	    }, {
	        key: 'pickElement',
	        value: function pickElement(fun) {
	            if (!this._pickCallbacks) this._pickCallbacks = new Map();
	            var id = Util.createGuid();
	            this._pickCallbacks.set(id, { fun: fun, type: 'pickElement' });
	            this.postMessage(_MessageSet2.default.SceneSet.pick, { id: id });
	            return true;
	        }
	    }, {
	        key: '_addSceneBack',
	        value: function _addSceneBack(sceneMsg) {
	            if (!sceneMsg.success) {
	                this._remove(sceneMsg.uuid, false);
	            }
	        }

	        /**
	         * 添加一个新场景
	         * @param scene {Scene} 场景对象
	         */

	    }, {
	        key: 'add',
	        value: function add(scene) {
	            this._scenes.set(scene.id, scene);
	            if (!this.map) return;
	            this.postMessage(_MessageSet2.default.SceneSet.addScene, scene.toXml());
	            scene.setMap(this.map);
	        }

	        /**
	         * 移除一个场景
	         * @param scene  {Scene || string} 场景对象或者场景id
	         */

	    }, {
	        key: 'remove',
	        value: function remove(scene) {
	            this._remove(scene);
	        }
	    }, {
	        key: '_remove',
	        value: function _remove(scene) {
	            var isSend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	            scene = this._getScene(scene);
	            if (!scene) return;
	            scene.setMap();
	            scene.clear(false);
	            var sceneId = scene.id;

	            this._scenes.delete(sceneId);
	            if (isSend) {
	                this.postMessage(_MessageSet2.default.SceneSet.removeScene, sceneId);
	            }
	        }

	        /**
	         * 获取场景的id
	         * @param scene {Scene || string} 场景对象或者场景id
	         * @return {Object} 场景对象
	         * @private
	         */

	    }, {
	        key: '_getScene',
	        value: function _getScene(scene) {
	            var sceneObj = void 0;
	            if (Util.isString(scene)) {
	                sceneObj = this._scenes.get(scene);
	            } else {
	                sceneObj = scene;
	            }

	            return sceneObj;
	        }

	        /**
	         * 清除所有场景
	         */

	    }, {
	        key: 'clear',
	        value: function clear() {
	            var that = this;
	            this._scenes.forEach(function (value) {
	                that.remove(value);
	            });
	            this._scenes.clear();
	        }

	        /**
	         * 场景的个数
	         * @return {int} 个数
	         */

	    }, {
	        key: 'count',
	        value: function count() {
	            return this._scenes.size;
	        }

	        /**
	         * 根据名称得到场景
	         * @param name {String}
	         * @return scene 专题场景
	         * @private
	         */

	    }, {
	        key: 'getSceneByName',
	        value: function getSceneByName(name) {
	            var scene = void 0;
	            this._scenes.forEach(function (value, key) {
	                if (value.name === name) {
	                    scene = value;
	                }
	            });

	            return scene;
	        }

	        /**
	         * 根据名称删除场景
	         * @param scene  {Scene || string} 场景name
	         */

	    }, {
	        key: 'removeSceneByName',
	        value: function removeSceneByName(name) {
	            var _scene = this.getSceneByName(name);
	            if (_scene) this._remove(_scene);
	        }
	    }, {
	        key: 'getSceneById',
	        value: function getSceneById(id) {
	            return this._scenes.get(id);
	        }
	    }, {
	        key: 'getSceneByIndex',
	        value: function getSceneByIndex(index) {
	            index = parseInt(index);
	            if (isNaN(index) || index < 0 || index > this.count()) return;

	            var tempCount = 0;
	            var _iteratorNormalCompletion8 = true;
	            var _didIteratorError8 = false;
	            var _iteratorError8 = undefined;

	            try {
	                for (var _iterator8 = this._scenes[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
	                    var scene = _step8.value;

	                    if (tempCount === index) return scene[1];
	                    tempCount++;
	                }
	            } catch (err) {
	                _didIteratorError8 = true;
	                _iteratorError8 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
	                        _iterator8.return();
	                    }
	                } finally {
	                    if (_didIteratorError8) {
	                        throw _iteratorError8;
	                    }
	                }
	            }

	            return;
	        }

	        /**
	         * 根据名称删除场景
	         * @param scene  {Scene || string} 场景name
	         */

	    }, {
	        key: 'removeSceneByIndex',
	        value: function removeSceneByIndex(index) {
	            var _scene = this.getSceneByIndex(index);
	            if (_scene) this._remove(_scene);
	        }

	        /**
	         * 根据ID获取node节点
	         * @param {string} id
	         * @return GV.Node
	         */

	    }, {
	        key: 'getNodeById',
	        value: function getNodeById(id) {
	            var node = void 0;
	            var _iteratorNormalCompletion9 = true;
	            var _didIteratorError9 = false;
	            var _iteratorError9 = undefined;

	            try {
	                for (var _iterator9 = this._scenes[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
	                    var _step9$value = _slicedToArray(_step9.value, 2),
	                        key = _step9$value[0],
	                        value = _step9$value[1];

	                    node = value.getNodeById(id);
	                    if (node) {
	                        break;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError9 = true;
	                _iteratorError9 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion9 && _iterator9.return) {
	                        _iterator9.return();
	                    }
	                } finally {
	                    if (_didIteratorError9) {
	                        throw _iteratorError9;
	                    }
	                }
	            }

	            return node;
	        }

	        /**
	         * 根据名称获取node节点
	         * @param {string} name
	         * @return GV.Node
	         */

	    }, {
	        key: 'getNodeByName',
	        value: function getNodeByName(name) {
	            var node = void 0;
	            var _iteratorNormalCompletion10 = true;
	            var _didIteratorError10 = false;
	            var _iteratorError10 = undefined;

	            try {
	                for (var _iterator10 = this._scenes[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
	                    var _step10$value = _slicedToArray(_step10.value, 2),
	                        key = _step10$value[0],
	                        value = _step10$value[1];

	                    node = value.getNodeByName(name);
	                    if (node) {
	                        break;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError10 = true;
	                _iteratorError10 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion10 && _iterator10.return) {
	                        _iterator10.return();
	                    }
	                } finally {
	                    if (_didIteratorError10) {
	                        throw _iteratorError10;
	                    }
	                }
	            }

	            return node;
	        }

	        /**
	         * 从xml数据中读取专题场景
	         * @method addSceneFromXml
	         * @param xml {String} xml字符串
	         */

	    }, {
	        key: 'addSceneFromXml',
	        value: function addSceneFromXml(xml) {}
	        //TODO暂时未实现


	        /**
	         * 根据json数据读取专题场景
	         * @method addScenefromJson
	         * @param json {String} json字符串
	         * @return {Array} 添加的scenes的数组
	         */

	    }, {
	        key: 'addSceneFromJson',
	        value: function addSceneFromJson(json) {
	            return this._parseScenes(json);
	        }

	        /**
	         * 导出json数据
	         */

	    }, {
	        key: 'scenesToJson',
	        value: function scenesToJson(scenes) {
	            if (!(scenes instanceof Array)) {
	                return this._sceneToJson(this._scenes);
	            } else {
	                return this._sceneToJson(scenes);
	            }
	        }

	        /**
	         * 导出场景数组
	         */

	    }, {
	        key: '_sceneToJson',
	        value: function _sceneToJson(scenes) {
	            var obj = {};
	            if (!(scenes instanceof Array) && !(scenes instanceof Map)) return obj;

	            scenes.forEach(function (scene) {
	                var tempObj = scene.toJson();

	                var key = void 0;
	                for (key in tempObj) {}

	                if (obj[key]) {
	                    if (!(obj[key] instanceof Array)) {
	                        var temp = obj[key];
	                        obj[key] = [];
	                        obj[key].push(temp);
	                    }

	                    obj[key].push(tempObj[key]);
	                } else {
	                    obj[key] = tempObj[key];
	                }
	            });
	            return obj;
	        }

	        /**
	         * 导出场景树
	         */

	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            return _get(SceneSet.prototype.__proto__ || Object.getPrototypeOf(SceneSet.prototype), '_toJson', this).call(this, this._sceneToJson(this._scenes));
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '<scenes>';
	            this._scenes.forEach(function (scene) {
	                xml += scene.toXml();
	            });
	            xml += '</scenes>';
	            return xml;
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.SceneSet;
	        }
	    }]);

	    return SceneSet;
	}(_Class3.default);

	exports.default = SceneSet;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "SceneSet.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：GraphicScene.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2016-03-28 09:32:05
	 * 用途：类
	 */

	'use strict';

	/**
	 * @module scene
	 */

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Scene2 = __webpack_require__(60);

	var _Scene3 = _interopRequireDefault(_Scene2);

	var _Place = __webpack_require__(66);

	var _Place2 = _interopRequireDefault(_Place);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _GeometryNode = __webpack_require__(69);

	var _GeometryNode2 = _interopRequireDefault(_GeometryNode);

	var _Label = __webpack_require__(71);

	var _Label2 = _interopRequireDefault(_Label);

	var _Model = __webpack_require__(73);

	var _Model2 = _interopRequireDefault(_Model);

	var _Circle = __webpack_require__(74);

	var _Circle2 = _interopRequireDefault(_Circle);

	var _Cone = __webpack_require__(75);

	var _Cone2 = _interopRequireDefault(_Cone);

	var _Cube = __webpack_require__(76);

	var _Cube2 = _interopRequireDefault(_Cube);

	var _Ellipse = __webpack_require__(77);

	var _Ellipse2 = _interopRequireDefault(_Ellipse);

	var _Ellipsoid = __webpack_require__(78);

	var _Ellipsoid2 = _interopRequireDefault(_Ellipsoid);

	var _ImageOverLay = __webpack_require__(79);

	var _ImageOverLay2 = _interopRequireDefault(_ImageOverLay);

	var _Polygon = __webpack_require__(80);

	var _Polygon2 = _interopRequireDefault(_Polygon);

	var _Polyline = __webpack_require__(81);

	var _Polyline2 = _interopRequireDefault(_Polyline);

	var _Sphere = __webpack_require__(82);

	var _Sphere2 = _interopRequireDefault(_Sphere);

	var _Spline = __webpack_require__(83);

	var _Spline2 = _interopRequireDefault(_Spline);

	var _JBPoint = __webpack_require__(84);

	var _JBPoint2 = _interopRequireDefault(_JBPoint);

	var _JBLine = __webpack_require__(86);

	var _JBLine2 = _interopRequireDefault(_JBLine);

	var _Icon = __webpack_require__(87);

	var _Icon2 = _interopRequireDefault(_Icon);

	var _LocalMesh = __webpack_require__(88);

	var _LocalMesh2 = _interopRequireDefault(_LocalMesh);

	var _GeoMesh = __webpack_require__(90);

	var _GeoMesh2 = _interopRequireDefault(_GeoMesh);

	var _PointCloud = __webpack_require__(91);

	var _PointCloud2 = _interopRequireDefault(_PointCloud);

	var _PointEffect = __webpack_require__(92);

	var _PointEffect2 = _interopRequireDefault(_PointEffect);

	var _FireEffect = __webpack_require__(93);

	var _FireEffect2 = _interopRequireDefault(_FireEffect);

	var _RainEffect = __webpack_require__(94);

	var _RainEffect2 = _interopRequireDefault(_RainEffect);

	var _SmokeEffect = __webpack_require__(95);

	var _SmokeEffect2 = _interopRequireDefault(_SmokeEffect);

	var _WaveEffect = __webpack_require__(96);

	var _WaveEffect2 = _interopRequireDefault(_WaveEffect);

	var _ExplosionEffect = __webpack_require__(97);

	var _ExplosionEffect2 = _interopRequireDefault(_ExplosionEffect);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 场景类,主要对标绘实体进行添加,删除,检索等操作
	 * @namespace GV
	 * @class GraphicScene
	 * @extends GV.Scene
	 */
	var GraphicScene = function (_Scene) {
	    _inherits(GraphicScene, _Scene);

	    _createClass(GraphicScene, [{
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.GraphicScene;
	        }
	    }]);

	    function GraphicScene(paramJson) {
	        _classCallCheck(this, GraphicScene);

	        var _this = _possibleConstructorReturn(this, (GraphicScene.__proto__ || Object.getPrototypeOf(GraphicScene)).call(this, paramJson));

	        if (!_this.library) _this._library = [];
	        _this.library = 'GVGraphicScene';
	        return _this;
	    }

	    _createClass(GraphicScene, [{
	        key: '_parseNode',
	        value: function _parseNode(paramJson) {
	            if (!paramJson) return;
	            for (var key in paramJson) {
	                // this._addNodesFromJson(paramJson[key], key);
	                // delete paramJson[key];
	                switch (key) {
	                    case _TagsEnum2.default.Place:
	                    case _TagsEnum2.default.Feature:
	                    case _TagsEnum2.default.Label:
	                    case _TagsEnum2.default.Model:
	                    case _TagsEnum2.default.Circle:
	                    case _TagsEnum2.default.Cone:
	                    case _TagsEnum2.default.Cube:
	                    case _TagsEnum2.default.Ellipse:
	                    case _TagsEnum2.default.Ellipsoid:
	                    case _TagsEnum2.default.ImageOverLay:
	                    case _TagsEnum2.default.Polygon:
	                    case _TagsEnum2.default.Polyline:
	                    case _TagsEnum2.default.Sphere:
	                    case _TagsEnum2.default.Spline:
	                    case _TagsEnum2.default.LocalMesh:
	                    case _TagsEnum2.default.GeoMesh:
	                    case _TagsEnum2.default.JBLine:
	                    case _TagsEnum2.default.JBPoint:
	                    case _TagsEnum2.default.Icon:
	                    case _TagsEnum2.default.PointCloud:
	                    case _TagsEnum2.default.FireEffect:
	                    case _TagsEnum2.default.RainEffect:
	                    case _TagsEnum2.default.SmokeEffect:
	                    case _TagsEnum2.default.PointEffect:
	                    case _TagsEnum2.default.WaveEffect:
	                    case _TagsEnum2.default.ExplosionEffect:
	                        this._addNodesFromJson(paramJson[key], key);
	                        delete paramJson[key];
	                        break;
	                    default:
	                }
	            }
	        }
	    }, {
	        key: '_addNodesFromJson',
	        value: function _addNodesFromJson(nodesJson, type) {
	            if (Util.isJson(nodesJson)) {
	                nodesJson = [nodesJson];
	            }
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = nodesJson[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var nodeJson = _step.value;

	                    var node = null;
	                    switch (type) {
	                        case _TagsEnum2.default.Place:
	                            node = new _Place2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.Feature:
	                            node = new _GeometryNode2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.Label:
	                            node = new _Label2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.Model:
	                            node = new _Model2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.Circle:
	                            node = new _Circle2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.Cone:
	                            node = new _Cone2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.Cube:
	                            node = new _Cube2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.Ellipse:
	                            node = new _Ellipse2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.Ellipsoid:
	                            node = new _Ellipsoid2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.ImageOverLay:
	                            node = new _ImageOverLay2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.Polygon:
	                            node = new _Polygon2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.Polyline:
	                            node = new _Polyline2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.Sphere:
	                            node = new _Sphere2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.Spline:
	                            node = new _Spline2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.JBLine:
	                            node = new _JBLine2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.JBPoint:
	                            node = new _JBPoint2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.Icon:
	                            node = new _Icon2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.FireEffect:
	                            node = new _FireEffect2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.SmokeEffect:
	                            node = new _SmokeEffect2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.RainEffect:
	                            node = new _RainEffect2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.PointEffect:
	                            node = new _PointEffect2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.PointCloud:
	                            node = new _PointCloud2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.LocalMesh:
	                            node = new _LocalMesh2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.GeoMesh:
	                            node = new _GeoMesh2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.WaveEffect:
	                            node = new _WaveEffect2.default(nodeJson);
	                            break;
	                        case _TagsEnum2.default.ExplosionEffect:
	                            node = new _ExplosionEffect2.default(nodeJson);
	                            break;
	                        default:
	                            break;
	                    }
	                    if (node) {
	                        this._nodes.set(node.id, node);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var strLibraries = '';
	            var libraries = this.library;
	            if (libraries) {
	                for (var i = 0; i < libraries.length; i++) {
	                    strLibraries = strLibraries + libraries[i];
	                    if (i !== libraries.length - 1) strLibraries = strLibraries + ',';
	                }
	            }

	            return _get(GraphicScene.prototype.__proto__ || Object.getPrototypeOf(GraphicScene.prototype), '_toXml', this).call(this, '<library>' + strLibraries + '</library><visible>' + this.visible + '</visible><optimized>false</optimized>');
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var obj = _get(GraphicScene.prototype.__proto__ || Object.getPrototypeOf(GraphicScene.prototype), '_toJson', this).call(this);

	            if (this._library) obj[this.tag].library = this.library;
	            obj[this.tag].visible = this.visible;
	            obj[this.tag].optimized = false;
	            return obj;
	        }
	    }]);

	    return GraphicScene;
	}(_Scene3.default);

	exports.default = GraphicScene;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "GraphicScene.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：Scene.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2016-03-25 15:14:16
	 * 用途：类
	 */

	'use strict';

	/**
	 * @module scene
	 */

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _Node = __webpack_require__(61);

	var _Node2 = _interopRequireDefault(_Node);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 场景基础类,只提供公共方法,供日后扩展,不能被初始化
	 * @namespace GV
	 * @class Scene
	 */

	var Scene = function (_Class) {
	    _inherits(Scene, _Class);

	    function Scene(paramJson) {
	        _classCallCheck(this, Scene);

	        var _this = _possibleConstructorReturn(this, (Scene.__proto__ || Object.getPrototypeOf(Scene)).call(this, paramJson));

	        _this._visible = true;
	        _this.setProps(paramJson);
	        _this._nodes = new Map();
	        _this._parseNode(paramJson);
	        return _this;
	    }

	    _createClass(Scene, [{
	        key: '_parseNode',
	        value: function _parseNode(paramJson) {
	            console.debug(paramJson);
	        }

	        //临时加的检测scene返回消息的接口

	    }, {
	        key: 'on',
	        value: function on(calllback) {
	            this._userCallback = calllback;
	        }
	    }, {
	        key: '_callBack',
	        value: function _callBack(msg) {
	            switch (msg.para1) {
	                case _MessageSet2.default.Scene.addNode:
	                    this.addNodeBack(msg.para2.node);
	                    break;
	                default:
	                    if (this._userCallback) this._userCallback(msg);
	                    break;
	            }
	        }

	        /**
	         * 设置场景名称
	         * @param name {String}
	         */

	    }, {
	        key: 'count',
	        value: function count() {
	            return this._nodes.size;
	        }

	        /**
	         * 添加实体节点
	         * @method addNode
	         * @param node {GV.Node} 实体节点
	         * @return node 返回实体节点本身
	         */

	    }, {
	        key: 'addNode',
	        value: function addNode(node) {
	            if (node instanceof Array) {
	                var xmlStr = '';
	                var tempNodes = [];
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = node[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var tempNode = _step.value;

	                        if (!(tempNode instanceof _Node2.default)) continue;

	                        this._nodes.set(tempNode.id, tempNode);
	                        tempNodes.push(tempNode);

	                        xmlStr += tempNode.toXml();
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }

	                if (xmlStr === '') return undefined;

	                this.postMessage(_MessageSet2.default.Scene.addNode, '<nodes>' + xmlStr + '</nodes>');
	                var _iteratorNormalCompletion2 = true;
	                var _didIteratorError2 = false;
	                var _iteratorError2 = undefined;

	                try {
	                    for (var _iterator2 = node[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                        var _tempNode = _step2.value;

	                        _tempNode.setMap(this.map, this);
	                    }
	                } catch (err) {
	                    _didIteratorError2 = true;
	                    _iteratorError2 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                            _iterator2.return();
	                        }
	                    } finally {
	                        if (_didIteratorError2) {
	                            throw _iteratorError2;
	                        }
	                    }
	                }

	                return tempNodes;
	            }

	            if (node instanceof _Node2.default) {
	                this._nodes.set(node.id, node);
	                this.postMessage(_MessageSet2.default.Scene.addNode, node.toXml());
	                node.setMap(this.map, this);
	                return node;
	            }
	            return undefined;
	        }
	    }, {
	        key: 'setMap',
	        value: function setMap(map) {
	            _get(Scene.prototype.__proto__ || Object.getPrototypeOf(Scene.prototype), 'setMap', this).call(this, map);
	            this._addAllNode();
	        }
	    }, {
	        key: 'addNodeBack',
	        value: function addNodeBack(nodeMsg) {
	            if (!nodeMsg) return;
	            var that = this;
	            nodeMsg = Util.strToArray(nodeMsg, 'string');
	            nodeMsg.forEach(function (value) {
	                that._remove(value, false);
	            });
	        }

	        /**
	         * 根据实体ID删除实体
	         * @method removeNode
	         * @param nodeId {string} 实体id
	         */

	    }, {
	        key: 'removeNode',
	        value: function removeNode(nodeId) {
	            this.remove(nodeId);
	        }

	        /**
	         * 删除节点
	         * @param node {id || name || node}
	         */

	    }, {
	        key: 'remove',
	        value: function remove(node) {
	            this._remove(node);
	        }
	    }, {
	        key: '_remove',
	        value: function _remove(node) {
	            var isSend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	            node = this._getNode(node);
	            if (!node) return;

	            this._nodes.delete(node.id);
	            node.setMap();

	            if (isSend) {
	                this.postMessage(_MessageSet2.default.Scene.removeNode, node.id);
	            }
	        }

	        /**
	         * 清除场景所有节点
	         * @method clear
	         */

	    }, {
	        key: 'clear',
	        value: function clear() {
	            var isSend = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	            var that = this;
	            this._nodes.forEach(function (value, key) {
	                that._remove(key, isSend);
	            });

	            this._nodes.clear();
	        }

	        /**
	         * 根据参数得到场景节点
	         * @param node {id|| name|| node}
	         * @return node;
	         */

	    }, {
	        key: '_getNode',
	        value: function _getNode(node) {
	            if (this._nodes.size === 0 || node === undefined) return undefined;

	            if (typeof node === 'string') {
	                if (this._nodes.get(node)) {
	                    return this._nodes.get(node);
	                }

	                var tempNode = this.getNodeByName(node);
	                if (tempNode) return tempNode;

	                return undefined;
	            }

	            if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object') {
	                if (this._nodes.get(node.id)) {
	                    return node;
	                }
	            }

	            return undefined;
	        }

	        /**
	         * 获取场景所有节点
	         * @method getAllNode
	         * @return array 实体节点数组
	         * @private
	         */

	    }, {
	        key: 'getAllNode',
	        value: function getAllNode() {
	            var nodeArray = [];
	            this._nodes.forEach(function (value) {
	                nodeArray.push(value);
	            });
	            return nodeArray;
	        }

	        /**
	         * 根据名称得到实体节点
	         * @method getNodeByName
	         * @param name {String}
	         * @return node 实体节点
	         * @private
	         */

	    }, {
	        key: 'getNodeByName',
	        value: function getNodeByName(name) {
	            var node = void 0;
	            this._nodes.forEach(function (value) {
	                if (value.name === name) {
	                    node = value;
	                }
	            });

	            return node;
	        }

	        /**
	         * 根据名称得到实体节点
	         * @method getNodeByName
	         * @param {String} name
	         */

	    }, {
	        key: 'removeNodeByName',
	        value: function removeNodeByName(name) {
	            var _node = this.getNodeByName(name);
	            if (_node) this._remove(_node);
	        }
	    }, {
	        key: 'getNodeByIndex',
	        value: function getNodeByIndex(index) {
	            index = parseInt(index);
	            if (isNaN(index) || index < 0 || index > this.count()) return;

	            var tempCount = 0;
	            var _iteratorNormalCompletion3 = true;
	            var _didIteratorError3 = false;
	            var _iteratorError3 = undefined;

	            try {
	                for (var _iterator3 = this._nodes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                    var node = _step3.value;

	                    if (tempCount === index) return node[1];
	                    tempCount++;
	                }
	            } catch (err) {
	                _didIteratorError3 = true;
	                _iteratorError3 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                        _iterator3.return();
	                    }
	                } finally {
	                    if (_didIteratorError3) {
	                        throw _iteratorError3;
	                    }
	                }
	            }

	            return undefined;
	        }
	    }, {
	        key: 'removeNodeByIndex',
	        value: function removeNodeByIndex(index) {
	            var _node = this.getNodeByIndex(index);
	            if (_node) this._remove(_node);
	        }

	        /**
	         * 获取实体的个数
	         * @method getNodeCount
	         * @return {Number} 实体个数
	         */

	    }, {
	        key: 'getNodeCount',
	        value: function getNodeCount() {
	            return this._nodes.size;
	        }

	        /**
	         * 根据id获取实体几何
	         * @method getNode
	         * @param nodeId {string} 实体id
	         * @return {GV.Node} 实体
	         */

	    }, {
	        key: 'getNode',
	        value: function getNode(nodeId) {
	            return this.getNodeById(nodeId);
	        }

	        /**
	         * 根据id得到实体节点
	         * @param id {String}
	         */

	    }, {
	        key: 'getNodeById',
	        value: function getNodeById(id) {
	            return this._nodes.get(id);
	        }
	    }, {
	        key: '_addAllNode',
	        value: function _addAllNode() {
	            var _this2 = this;

	            this._nodes.forEach(function (node) {
	                _this2.addNode(node);
	            });
	        }

	        /**
	         * 根据json数据读取专题场景
	         * @method addNodefromJson
	         * @param json {Object} json对象
	         */

	    }, {
	        key: 'addNodeFromJson',
	        value: function addNodeFromJson(json) {
	            this._parseNode(json);
	            this._addAllNode();
	        }

	        /**
	         * 获取场景所有节点
	         * @method getAllNode
	         * @return array 实体节点数组
	         * @private
	         */

	    }, {
	        key: 'getAllNode',
	        value: function getAllNode() {
	            var nodeArray = [];
	            this._nodes.forEach(function (value) {
	                nodeArray.push(value);
	            });
	            return nodeArray;
	        }
	    }, {
	        key: '_toJson',
	        value: function _toJson() {
	            var obj = {};
	            this._nodes.forEach(function (node) {
	                var tempObj = node.toJson();
	                if (!Util.isObject(tempObj)) return;

	                var key = void 0;
	                for (key in tempObj) {}

	                if (obj[key]) {
	                    if (!(obj[key] instanceof Array)) {
	                        var temp = obj[key];
	                        obj[key] = [];
	                        obj[key].push(temp);
	                    }

	                    obj[key].push(tempObj[key]);
	                } else {
	                    obj[key] = tempObj[key];
	                }
	            });
	            return _get(Scene.prototype.__proto__ || Object.getPrototypeOf(Scene.prototype), '_toJson', this).call(this, obj);
	        }

	        /**
	         * 将专题场景保存成json对象
	         * @method toJson
	         */

	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            //TODO GraphicScene
	        }
	    }, {
	        key: 'name',
	        set: function set(name) {
	            if (!name) return;

	            if (this.map && this.map._sceneSet._scenes) {
	                this._name = Util.rename(name, this.map._sceneSet._scenes, 'name');
	                if (this._name !== name) console.warn("\u573A\u666F\u540D\u79F0\u91CD\u590D\uFF0C\u5DF2\u4FEE\u6539\u540D\u79F0\u201C" + name + "\u201D\u4E3A\u201C" + this._name + "\u201D\u3002");
	            } else {
	                this._name = name;
	            }
	        }

	        /**
	         * 得到场景名称
	         * @retrun name{String}
	         */

	        , get: function get() {
	            return this._name;
	        }

	        /**
	         * 专题场景显隐
	         * @property visible {true | false}
	         */

	    }, {
	        key: 'visible',
	        get: function get() {
	            return this._visible;
	        },
	        set: function set(visible) {
	            this.postMessage(_MessageSet2.default.Scene.setVisible, visible);
	            this._visible = visible;
	        }

	        /**需要额外依赖的动态库 
	         * @property library {string}
	         * @description <br>
	         * <pre>
	         *      场景需要依赖的外部动态库，（动态库放到浏览器可执行文件所在文件夹下）
	         *      例如添加军标库可以使用：
	         *      scene.library = 'GVJBScene';
	         * </pre>
	         */

	    }, {
	        key: 'library',
	        get: function get() {
	            return this._library;
	        },
	        set: function set(libraryNames) {
	            var _this3 = this;

	            if (libraryNames === undefined) return;
	            if (!this._library) this._library = [];
	            if (libraryNames instanceof Array) {
	                libraryNames.forEach(function (value) {
	                    var tempIndex = _this3._library.indexOf(value);
	                    if (tempIndex < 0) _this3._library.push(value);
	                });
	            } else {
	                var tempIndex = this._library.indexOf(libraryNames);
	                if (tempIndex < 0) this._library.push(libraryNames);
	            }
	        }
	    }]);

	    return Scene;
	}(_Class3.default);

	exports.default = Scene;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Scene.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：BaseNode.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2017-03-22 15:14:16
	 * 用途：实体节点基类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	var _Style = __webpack_require__(62);

	var _Style2 = _interopRequireDefault(_Style);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _NodeProperties = __webpack_require__(65);

	var _NodeProperties2 = _interopRequireDefault(_NodeProperties);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	// import * as DefaultProperties from '../../global/defaultProperties';

	/**
	 * 实体节点基类
	 * @module node
	 * @namespace GV
	 * @class Node
	 */
	var Node = function (_Class) {
	    _inherits(Node, _Class);

	    function Node() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, Node);

	        if (typeof params === 'string') {
	            params = new DOMParser().parseFromString(params, 'text/xml');
	            params = Util.xmlToJson(params);
	        }
	        return _possibleConstructorReturn(this, (Node.__proto__ || Object.getPrototypeOf(Node)).call(this, params));
	    }

	    _createClass(Node, [{
	        key: '_parseJson',
	        value: function _parseJson(options) {
	            var post = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	            if (post === false) {
	                this._post = false;
	            }

	            if (!this._setproperties) {
	                this._setproperties = Util.__getSetterProperties(this);
	            }
	            for (var key in options) {
	                var tempKey = Util.a_aToaA(key);
	                if (this._setproperties.indexOf(tempKey) < 0) continue;
	                this[tempKey] = options[key]; // 私有化
	            }
	            this._post = true;
	        }
	    }, {
	        key: 'setMap',
	        value: function setMap(map, parent) {
	            _get(Node.prototype.__proto__ || Object.getPrototypeOf(Node.prototype), 'setMap', this).call(this, map);
	            this.parent = parent;
	            if (this.map && parent && this.name) {
	                this.name = this.name;
	            }
	        }

	        /**
	         * 设置父节点
	         * @property parent
	         * @type {GV.Scene}
	         */

	    }, {
	        key: 'updatePropertyBack',
	        value: function updatePropertyBack(properties) {
	            console.debug(properties, '属性更新完成');
	        }
	    }, {
	        key: '_callBack',
	        value: function _callBack(msg) {
	            switch (msg.para1) {
	                case _MessageSet2.default.Node.updateProperty:
	                    this._parseJson(msg.para2[this.tag]);
	                    break;
	                default:
	                    break;
	            }
	        }

	        /**
	         * 是否可见
	         * @property visible
	         * @type Boolean
	         * @default true
	         */

	    }, {
	        key: 'doUpdateProperty',

	        /**
	         * 获取C++属性 
	         * */
	        value: function doUpdateProperty() {}

	        /**
	         * 更新属性字段
	         * @param propertyName {String} 属性名
	         * @private
	         */

	    }, {
	        key: '_updateProperty',
	        value: function _updateProperty(propertyName) {
	            if (this._post === true || this._post === undefined) {
	                var xml = Util._propertyToXml(propertyName, this[propertyName]);
	                this.postMessage(_MessageSet2.default.Node.updateProperty, xml);
	            }
	        }

	        /**
	         * 针对多边形线 面矢量属性改变接口
	         */

	    }, {
	        key: '_changePoints',
	        value: function _changePoints(data) {
	            this.postMessage(_MessageSet2.default.Node.changePoints, data);
	        }
	    }, {
	        key: '_toXml',
	        value: function _toXml() {
	            var innerXML = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

	            if (!this._getproperties) {
	                this._getproperties = Util.__getGetterProperties(this);
	            }
	            for (var i = 0; i < this._getproperties.length; i++) {
	                var prikey = this._getproperties[i];
	                if (this['_' + prikey] !== undefined) {
	                    innerXML += Util._propertyToXml(prikey, this[prikey]);
	                }
	            }
	            return _get(Node.prototype.__proto__ || Object.getPrototypeOf(Node.prototype), '_toXml', this).call(this, innerXML);
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var innerXML = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

	            return this._toXml(innerXML);
	        }
	    }, {
	        key: '_toJson',
	        value: function _toJson(child) {
	            var obj = {};
	            if (!this._getproperties) {
	                this._getproperties = Util.__getGetterProperties(this);
	            }
	            for (var i = 0; i < this._getproperties.length; i++) {
	                var prikey = this._getproperties[i];
	                if (this['_' + prikey] !== undefined) {
	                    Util._propertyToJson(this, prikey, obj);
	                }
	            }

	            if (child) {
	                for (var key in child) {
	                    if (child[key] !== undefined) {
	                        obj[key] = child[key];
	                    }
	                }
	            }

	            return _get(Node.prototype.__proto__ || Object.getPrototypeOf(Node.prototype), '_toJson', this).call(this, obj);
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson(child) {
	            return this._toJson(child);
	        }

	        /**
	         * 扩展属性
	         * @property extendData
	         * @type {json}
	         */

	    }, {
	        key: 'parent',
	        set: function set(scene) {
	            this._parent = scene;
	        },
	        get: function get() {
	            return this._parent;
	        }

	        /**
	         * 设置名称
	         * @param name {String}
	         */

	    }, {
	        key: 'name',
	        set: function set(name) {
	            if (this._parent && this._parent._nodes) {
	                this._name = Util.rename(name, this._parent._nodes, 'name', this);
	                if (this._name !== name) console.warn("\u8282\u70B9\u540D\u79F0\u91CD\u590D\uFF0C\u5DF2\u4FEE\u6539\u540D\u79F0\u201C" + name + "\u201D\u4E3A\u201C" + this._name + "\u201D\u3002");
	            } else {
	                this._name = name;
	            }
	        },
	        get: function get() {
	            return this._name;
	        }
	    }, {
	        key: 'visible',
	        set: function set() {
	            var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	            this._visible = visible;
	            this._updateProperty('visible');
	        },
	        get: function get() {
	            return this._visible;
	        }

	        /**
	         * 视口属性，对应的飞行定位姿态
	         * @property viewPoint
	         * @readonly
	         * @type {GV.ViewPoint}
	         */

	    }, {
	        key: 'viewPoint',
	        get: function get() {
	            return {};
	        }

	        /**
	         * 实体样式
	         * @property style
	         * @type GV.Style
	         */

	    }, {
	        key: 'style',
	        set: function set(style) {
	            this._style = new _Style2.default(style, this);
	            this._updateProperty('style');
	        },
	        get: function get() {
	            return this._style;
	        }
	    }, {
	        key: 'extendData',
	        set: function set(extendData) {}
	    }]);

	    return Node;
	}(_Class3.default);

	exports.default = Node;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Node.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：Style.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2017-03-30 18:22:56.
	 * 用途：实体样式基类
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _ENUM = __webpack_require__(14);

	var _ENUM2 = _interopRequireDefault(_ENUM);

	var _StyleData = __webpack_require__(63);

	var styleData = _interopRequireWildcard(_StyleData);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	/**
	 * @module node
	 */
	/**
	 * 实体样式
	 * @namespace GV
	 * @class Style
	 */
	var Style = function () {
	    function Style() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        var parent = arguments[1];

	        _classCallCheck(this, Style);

	        params = this._stringToJsonStyle(params);
	        if (!Util.isJson(params)) {
	            params = params.toJSON();
	        }

	        if (params && Util.isJson(params)) {
	            for (var key in params) {
	                this.__setProperty(key, params[key]);
	            }
	        }
	        this.parent = parent;
	    }

	    _createClass(Style, [{
	        key: '_stringToJsonStyle',
	        value: function _stringToJsonStyle(str) {
	            if (Util.isJson(str)) {
	                if (str.type !== 'text/css') return str;
	                str = str['$value'];
	            }
	            if (Util.isString(str)) {
	                str = Util.replaceAllSpace(str);
	                var styleProperties = str.split(';');
	                str = {};
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = styleProperties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var item = _step.value;

	                        var keyValue = item.split(':');
	                        if (keyValue.length === 2) {
	                            str[keyValue[0]] = keyValue[1];
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	            }
	            return str;
	        }
	    }, {
	        key: '_setProperty',
	        value: function _setProperty(key, value) {
	            if (!this.__setProperty(key, value)) return;

	            if (this.parent) {
	                this.parent._updateProperty('style');
	            }
	        }
	    }, {
	        key: '__setProperty',
	        value: function __setProperty(key, value) {
	            if (value === undefined) return false;

	            var tempKey = /-/.test(key) ? key : '_' + key;
	            if (this[tempKey] === value) return false;

	            var styleObj = styleData.cssProperties[key];
	            if (!styleObj) return false; //如果styleData中没有改属性将不会被添加

	            //if (this[tempKey] === undefined && styleObj.default === value) return false;//和默认值一样不用修改属性

	            if (styleObj.check && !styleObj.check(value)) return false; //有检测函数并且检测未通过

	            this[tempKey] = value;
	            return true;
	        }
	    }, {
	        key: '__getProperty',
	        value: function __getProperty(key) {
	            var tempKey = /-/.test(key) ? key : '_' + key;
	            if (this[tempKey] !== undefined) return this[tempKey];
	            return styleData.cssProperties[key].default;
	        }
	    }, {
	        key: '_toStyle',
	        value: function _toStyle() {
	            var innerHtml = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

	            return '<style type="text/css">' + innerHtml + '</style>';
	        }
	    }, {
	        key: 'toJSON',
	        value: function toJSON() {
	            var j = {};
	            for (var key in styleData.cssProperties) {
	                if (this[key] !== undefined) {
	                    var tempKey = /-/.test(key) ? key : '_' + key;
	                    if (this[tempKey] !== undefined) {
	                        j[key] = this[tempKey];
	                    }
	                }
	            }
	            return j;
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            return { style: this.toJSON() };
	        }
	    }, {
	        key: 'clone',
	        value: function clone() {
	            return new Style(this.toJSON());
	        }

	        /**
	         * 转化为xml 的css样式
	         * @returns {*}
	         */

	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var innerHtml = '';
	            var jsonValue = this.toJSON();
	            for (var key in jsonValue) {
	                innerHtml += key + ':' + jsonValue[key] + ';';
	            }
	            if (innerHtml) {
	                return this._toStyle(innerHtml);
	            } else {
	                return '';
	            }
	        }
	    }, {
	        key: 'parent',
	        set: function set(parent) {
	            this._parent = parent;
	        },
	        get: function get() {
	            return this._parent;
	        }

	        /*  Geometry Symbol */
	        /**
	         * 设置多边形填充色
	         * @property fillfill
	         * @type {HTML color}
	         */

	    }, {
	        key: 'fill',
	        set: function set(value) {
	            this._setProperty('fill', value);
	        },
	        get: function get() {
	            return this.__getProperty('fill');
	        }

	        /**
	         * 设置实体填充颜色
	         * @property color
	         * @type {HTML color}
	         */

	    }, {
	        key: 'meshColor',
	        set: function set(value) {
	            this._setProperty('mesh-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('mesh-color');
	        }

	        // /**
	        //  * 实体颜色是否统一
	        //  * @property value
	        //  * @type {Boolean}
	        //  */

	        // set meshUniform(value) {
	        //     this._setProperty('mesh-uniform', value);
	        // }

	        // get meshUniform() {
	        //     return this.__getProperty('mesh-uniform');
	        // }

	        // /**
	        //  * 设置实体顶部颜色
	        //  * @property color
	        //  * @type {HTML color}
	        //  */

	        // set meshColorTop(value) {
	        //     this._setProperty('mesh-color-top', value);
	        // }

	        // get meshColorTop() {
	        //     return this.__getProperty('mesh-color-top');
	        // }

	        // /**
	        //  * 设置实体底部颜色
	        //  * @property color
	        //  * @type {HTML color}
	        //  */

	        // set meshColorBottom(value) {
	        //     this._setProperty('mesh-color-bottom', value);
	        // }

	        // get meshColorBottom() {
	        //     return this.__getProperty('mesh-color-bottom');
	        // }

	        // /**
	        //  * 设计实体侧面颜色
	        //  * @property color
	        //  * @type {HTML color}
	        //  */

	        // set meshColorFlank(value) {
	        //     this._setProperty('mesh-color-flank', value);
	        // }

	        // get meshColorFlank() {
	        //     return this.__getProperty('mesh-color-flank');
	        // }

	        /**
	         * 设置实体填充方式
	         * @property mode
	         * @type ENUM {FILL, LINE}
	         */

	    }, {
	        key: 'meshMode',
	        set: function set(value) {
	            this._setProperty('mesh-mode', value);
	        },
	        get: function get() {
	            return this.__getProperty('mesh-mode');
	        }

	        /**
	         * 是否显示边框线
	         * @property value
	         * @type Boolean
	         */

	    }, {
	        key: 'meshFrame',
	        set: function set(value) {
	            this._setProperty('mesh-frame', value);
	        },
	        get: function get() {
	            return this.__getProperty('mesh-frame');
	        }

	        /**
	         * 设置实体边框线的颜色
	         * @property color
	         * @type {HTML color}
	         */

	    }, {
	        key: 'meshFrameColor',
	        set: function set(value) {
	            this._setProperty('mesh-frame-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('mesh-frame-color');
	        }

	        /**
	         * 设置实体边框宽度
	         * @property number
	         * @type {Number}
	         */

	    }, {
	        key: 'meshLineWidth',
	        set: function set(value) {
	            this._setProperty('mesh-line-width', value);
	        },
	        get: function get() {
	            return this.__getProperty('mesh-line-width');
	        }
	    }, {
	        key: 'meshRoll',
	        set: function set(roll) {
	            this._setProperty('mesh-roll', roll);
	        },
	        get: function get() {
	            return this.__getProperty('mesh-roll');
	        }
	    }, {
	        key: 'meshPitch',
	        set: function set(value) {
	            this._setProperty('mesh-pitch', value);
	        },
	        get: function get() {
	            return this.__getProperty('mesh-pitch');
	        }
	    }, {
	        key: 'meshHeading',
	        set: function set(value) {
	            this._setProperty('mesh-heading', value);
	        },
	        get: function get() {
	            return this.__getProperty('mesh-heading');
	        }
	    }, {
	        key: 'meshScale',
	        set: function set(value) {
	            this._setProperty('mesh-scale', value);
	        },
	        get: function get() {
	            return this.__getProperty('mesh-scale');
	        }

	        /**
	         * 设置线的颜色,或者多边形的边框色
	         * @property stroke
	         * @type {HTML color}
	         */

	    }, {
	        key: 'stroke',
	        set: function set(value) {
	            this._setProperty('stroke', value);
	        },
	        get: function get() {
	            return this.__getProperty('stroke');
	        }

	        /**
	         * 设置线宽
	         * @property strokeWidth
	         * @type {float with units}
	         */

	    }, {
	        key: 'strokeWidth',
	        set: function set(value) {
	            this._setProperty('stroke-width', value);
	        },
	        get: function get() {
	            return this.__getProperty('stroke-width');
	        }

	        /**
	         * Minimum rendering width; Prevents a line from getting thinner than this value in pixels.
	         * Only applies when the stroke-width is NOT in pixels
	         * @property strokeMinPixels
	         * @type {float pixels}
	         */

	    }, {
	        key: 'strokeMinPixels',
	        set: function set(value) {
	            this._setProperty('stroke-min-pixels', value);
	        },
	        get: function get() {
	            return this.__getProperty('stroke-min-pixels');
	        }

	        /**
	         * Number of times to subdivide a line
	         * @property strokeTesselation
	         * @type {integer}
	         */

	    }, {
	        key: 'strokeTesselation',
	        set: function set(value) {
	            this._setProperty('stroke-tessellation', value);
	        },
	        get: function get() {
	            return this.__getProperty('stroke-tessellation');
	        }

	        /**
	         * Join style for polygonized lines.
	         * Only applies with stroke-width is in world units (and not pixels)
	         * @property strokeLinejoin
	         * @type {miter, round}
	         */

	    }, {
	        key: 'strokeLinejoin',
	        set: function set(value) {
	            this._setProperty('stroke-linejoin', value);
	        },
	        get: function get() {
	            return this.__getProperty('stroke-linejoin');
	        }

	        /**
	         * Cap style for polygonized lines.
	         * Only applies with stroke-width is in world units (and not pixels)
	         * @property strokeLinecap
	         * @type {square, flat, round}
	         */

	    }, {
	        key: 'strokeLinecap',
	        set: function set(value) {
	            this._setProperty('stroke-linecap', value);
	        },
	        get: function get() {
	            return this.__getProperty('stroke-linecap');
	        }

	        /**
	         * For joins and caps that are set to round, the resolution of the rounded corner.
	         * Value is the ratio of line width to corner segment length.
	         * @property strokeRoundingRatio
	         * @type {float (0.4)}
	         */

	    }, {
	        key: 'strokeRoundingRatio',
	        set: function set(value) {
	            this._setProperty('stroke-rounding-ratio', value);
	        },
	        get: function get() {
	            return this.__getProperty('stroke-rounding-ratio');
	        }

	        /**
	         * Stippling pattern bitmask.
	         * Each set bit represents an “on” pixel in the pattern.
	         * @property strokeStipplePattern
	         * @type {integer (65535)}
	         */

	    }, {
	        key: 'strokeStipplePattern',
	        set: function set(value) {
	            this._setProperty('stroke-stipple-pattern', value);
	        },
	        get: function get() {
	            return this.__getProperty('stroke-stipple-pattern');
	        }

	        /**
	         * Stipple factor for pixel-width lines.
	         * Number of times to repeat each bit in the stippling pattern
	         * @property strokeStippleFactor
	         * @type {integer (1)}
	         */

	    }, {
	        key: 'strokeStippleFactor',
	        set: function set(value) {
	            this._setProperty('stroke-stipple-factor', value);
	        },
	        get: function get() {
	            return this.__getProperty('stroke-stipple-factor');
	        }

	        /**
	         * When outlining extruded polygons, only draw a post outline if the angle between the adjoining faces exceeds this value.
	         * This has the effect of only outlining corners that are sufficiently “sharp”.
	         * @property strokeCreaseAngle
	         * @type {float degrees (0.0)}
	         */

	    }, {
	        key: 'strokeCreaseAngle',
	        set: function set(value) {
	            this._setProperty('stroke-crease-angle', value);
	        },
	        get: function get() {
	            return this.__getProperty('stroke-crease-angle');
	        }

	        /**
	         * Fill color for a point.
	         * @property pointFill
	         * @type {HTML color}
	         */

	    }, {
	        key: 'pointFill',
	        set: function set(value) {
	            this._setProperty('point-fill', value);
	        },
	        get: function get() {
	            return this.__getProperty('point-fill');
	        }

	        /**
	         * Size for a GL point geometry
	         * @property pointSize
	         * @type {float (1.0)}
	         */

	    }, {
	        key: 'pointSize',
	        set: function set(value) {
	            if (value < 0) console.log.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, this.tag, 'point-size', '不可为负数', 'none', '1'));else this._setProperty('point-size', value);
	        },
	        get: function get() {
	            return this.__getProperty('point-size');
	        }

	        /* Altitude Symbol */
	        /**
	         * Controls terrain following behavior.
	         * none:    no clamping
	         * terrain:    clamp to terrain and discard Z values
	         * relative:    clamp to terrain and retain Z value
	         * absolute:    feature’s Z contains its absolute Z.
	         * You can also use a shortcut to activate draping or GPU clamping; set altitude-clamping to either terrain-drape or terrain-gpu.
	         * @property altitudeClamping
	         * @type {string}
	         */

	    }, {
	        key: 'altitudeClamping',
	        set: function set(value) {
	            this._setProperty('altitude-clamping', value);
	        },
	        get: function get() {
	            return this.__getProperty('altitude-clamping');
	        }

	        /**
	         * When altitude-clamping is set to terrain, chooses a terrain following technique:
	         * map:    clamp geometry to the map’s elevation data tiles
	         * drape:    clamp geometry using a projective texture
	         * gpu:    clamp geometry to the terrain on the GPU
	         * scene:    re-clamp geometry to new paged tiles (annotations only)
	         * @property altitudeTechnique
	         * @type {string}
	         */
	        // set altitudeTechnique(value) {
	        //     this._setProperty('altitude-technique', value);
	        // }

	        // get altitudeTechnique() {
	        //     return this.__getProperty('altitude-technique');
	        // }

	        /**
	         * Granularity at which to sample the terrain when altitude-technique is map:
	         * vertex:    clamp every vertex
	         * centroid:    only clamp the centroid of each feature
	         * @property altitudeBinding
	         * @type {string}
	         */

	    }, {
	        key: 'altitudeBinding',
	        set: function set(value) {
	            this._setProperty('altitude-binding', value);
	        },
	        get: function get() {
	            return this.__getProperty('altitude-binding');
	        }

	        /**
	         * Elevation data resolution at which to sample terrain height when altitude-technique is map
	         * @property altitudeResolution
	         * @type {float}
	         */

	    }, {
	        key: 'altitudeResolution',
	        set: function set(value) {
	            this._setProperty('altitude-resolution', value);
	        },
	        get: function get() {
	            return this.__getProperty('altitude-resolution');
	        }

	        /**
	         * Vertical offset to apply to geometry Z
	         * @property altitudeOffset
	         * @type {float}
	         */

	    }, {
	        key: 'altitudeOffset',
	        set: function set(value) {
	            this._setProperty('altitude-offset', value);
	        },
	        get: function get() {
	            return this.__getProperty('altitude-offset');
	        }

	        /**
	         * Scale factor to apply to geometry Z
	         * @param value {float}
	         */

	    }, {
	        key: 'altitudeScale',
	        set: function set(value) {
	            this._setProperty('altitude-scale', value);
	        },
	        get: function get() {
	            return this.__getProperty('altitude-scale');
	        }
	    }, {
	        key: 'lineExtrusion',
	        set: function set(value) {
	            this._setProperty('line-extrusion', value);
	        },
	        get: function get() {
	            return this.__getProperty('line-extrusion');
	        }
	    }, {
	        key: 'lineStretch',
	        get: function get() {
	            return this.__getProperty('line-stretch');
	        },
	        set: function set(value) {
	            this._setProperty('line-stretch', value);
	        }
	    }, {
	        key: 'extrusionUniform',
	        set: function set(value) {
	            this._setProperty('extrusion-uniform', value);
	        },
	        get: function get() {
	            return this.__getProperty('extrusion-uniform');
	        }
	    }, {
	        key: 'extrusionColor',
	        set: function set(value) {
	            this._setProperty('extrusion-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('extrusion-color');
	        }
	    }, {
	        key: 'stretch',
	        set: function set(value) {
	            this._setProperty('stretch', value);
	        },
	        get: function get() {
	            return this.__getProperty('stretch');
	        }
	    }, {
	        key: 'stretchColor',
	        set: function set(value) {
	            this._setProperty('stretch-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('stretch-color');
	        }

	        /* ExtrusionSymbol */
	        /**
	         * How far to extrude the vector data
	         * @param value {number}
	         */

	    }, {
	        key: 'extrusionHeight',
	        set: function set(value) {
	            this._setProperty('extrusion-height', value);
	        },
	        get: function get() {
	            return this.__getProperty('extrusion-height');
	        }
	    }, {
	        key: 'stretchHeight',
	        set: function set(value) {
	            this._setProperty('stretch-height', value);
	        },
	        get: function get() {
	            return this.__getProperty('stretch-height');
	        }

	        /**
	         * Whether to force all extruded vertices to the same Z value (bool).
	         * For example, if you are extruding polygons to make 3D buildings,
	         * setting this to true will force the rooftops to be flat even if the underlying terrain is not.
	         * @param value {boolean}
	         */

	    }, {
	        key: 'extrusionFlatten',
	        set: function set(value) {
	            this._setProperty('extrusion-flatten', value);
	        },
	        get: function get() {
	            return this.__getProperty('extrusion-flatten');
	        }

	        /**
	         * Factor by which to multiply the fill color of the extruded geometry at the base of the 3D shape.
	         * This results in the 3D shape being darker at the bottom than at the top, a nice effect.
	         * @param value {(float [0..1]; try 0.75)}
	         */

	    }, {
	        key: 'extrusionWallGradient',
	        set: function set(value) {
	            this._setProperty('extrusion-wall-gradient', value);
	        },
	        get: function get() {
	            return this.__getProperty('extrusion-wall-gradient');
	        }

	        /**
	         * Name of another style in the same stylesheet that osgEarth should apply to the walls of the extruded shape.
	         * @param value {string}
	         */

	    }, {
	        key: 'extrusionWallStyle',
	        set: function set(value) {
	            this._setProperty('extrusion-wall-style', value);
	        },
	        get: function get() {
	            return this.__getProperty('extrusion-wall-style');
	        }

	        /**
	         * Name of another style in the same stylesheet that osgEarth should apply to the roof of the extruded shape.
	         * @param value {string}
	         */

	    }, {
	        key: 'extrusionRoofStyle',
	        set: function set(value) {
	            this._setProperty('extrusion-roof-style', value);
	        },
	        get: function get() {
	            return this.__getProperty('extrusion-roof-style');
	        }

	        /* SkinSymbol */
	        /**
	         * Name of the resource library containing the skin(s)
	         * @param value {string}
	         */

	    }, {
	        key: 'skinLibrary',
	        set: function set(value) {
	            this._setProperty('skin-library', value);
	        },
	        get: function get() {
	            return this.__getProperty('skin-library');
	        }

	        /**
	         * Set of strings (separated by whitespace containing one or more resource tags.
	         * When selecting a texture skin to apply, osgEarth will limit the selection to skins with one of these tags.
	         * If you omit this property, all skins are considered.
	         * For example, if you are extruding buildings, you may only want to consider textures with the building tag.
	         * @param value {string}
	         */

	    }, {
	        key: 'skinTags',
	        set: function set(value) {
	            this._setProperty('skin-tags', value);
	        },
	        get: function get() {
	            return this.__getProperty('skin-tags');
	        }

	        /**
	         * When set to true, osgEarth will only consider selecting a skin that has its tiled attribute set to true.
	         * The tiled attribute indicates that the skin may be used as a repeating texture.
	         * @param value {boolean}
	         */

	    }, {
	        key: 'skinTiled',
	        set: function set(value) {
	            this._setProperty('skin-tiled', value);
	        },
	        get: function get() {
	            return this.__getProperty('skin-tiled');
	        }

	        /**
	         * Numeric expression resolving to the feature’s real-world height (in meters).
	         * osgEarth will use this value to narrow down the selection to skins appropriate to that height
	         * (i.e., skins for which the value falls between the skin’s min/max object height range.
	         * @param value {number}
	         */

	    }, {
	        key: 'skinObjectHeight',
	        set: function set(value) {
	            this._setProperty('skin-object-height', value);
	        },
	        get: function get() {
	            return this.__getProperty('skin-object-height');
	        }

	        /**
	         * Tells osgEarth to only consider skins whose minimum object height is greater than or equal to this value.
	         * @param value {number}
	         */

	    }, {
	        key: 'skinMinObjectHeight',
	        set: function set(value) {
	            this._setProperty('skin-min-object-height', value);
	        },
	        get: function get() {
	            return this.__getProperty('skin-min-object-height');
	        }

	        /**
	         * Tells osgEarth to only consider skins whose maximum object height is less than or equal to this value.
	         * @param value {number}
	         */

	    }, {
	        key: 'skinMaxObjectHeight',
	        set: function set(value) {
	            this._setProperty('skin-max-object-height', value);
	        },
	        get: function get() {
	            return this.__getProperty('skin-max-object-height');
	        }

	        /**
	         * Once the filtering is done (according to the properties above,
	         * osgEarth determines the minimal set of appropriate skins from which to choose and chooses one at random.
	         * By setting this seed value you can ensure that the same “random” selection happens each time you run the appplication.
	         * @param value {integer}
	         */

	    }, {
	        key: 'skinRandomSeed',
	        set: function set(value) {
	            this._setProperty('skin-random-seed', value);
	        },
	        get: function get() {
	            return this.__getProperty('skin-random-seed');
	        }

	        /* Icon Symbol */

	        /**
	         * URI of the icon image.
	         * @param value {uri-string}
	         */

	    }, {
	        key: 'icon',
	        set: function set(value) {
	            this._setProperty('icon', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon');
	        }

	        /**
	         * Name of a resource library containing the icon
	         * @param value {string}
	         */

	    }, {
	        key: 'iconLibrary',
	        set: function set(value) {
	            this._setProperty('icon-library', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-library');
	        }

	        /**
	         * For model substitution, describes how osgEarth should replace geometry with icons:
	         * vertex:    Replace each vertex in the geometry with an icon.
	         * interval:    Place icons at regular intervals along the geometry, according to the icon-density property.
	         * random:    Place icons randomly within the geometry, according to the icon-density property.
	         * centroid:    Place a single icon at the centroid of the geometry.
	         * @param value
	         */

	    }, {
	        key: 'iconPlacement',
	        set: function set(value) {
	            this._setProperty('icon-placement', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-placement');
	        }

	        /**
	         * For icon-placement settings of interval or random, this property is hint as to how many instances osgEarth should place.
	         * The unit is approximately “units per km” (for linear data) or “units per square km” for polygon data.
	         * @param value {float}
	         */

	    }, {
	        key: 'iconDensity',
	        set: function set(value) {
	            this._setProperty('icon-density', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-density');
	        }

	        /**
	         *    Scales the icon by this amount
	         * @param value {float}
	         */

	    }, {
	        key: 'iconScale',
	        set: function set(value) {
	            this._setProperty('icon-scale', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-scale');
	        }

	        /**
	         * Rotates the icon along its central axis
	         * @param value {float, degrees}
	         */

	    }, {
	        key: 'iconHeading',
	        set: function set(value) {
	            this._setProperty('icon-heading', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-heading');
	        }

	        /**
	         * Activate decluttering for this icon.
	         * osgEarth will attempt to automatically show or hide things so they don’t overlap on the screen.
	         * @param value {boolean}
	         */

	    }, {
	        key: 'iconDeclutter',
	        set: function set(value) {
	            this._setProperty('icon-declutter', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-declutter');
	        }

	        /**
	         * Sets the icon’s location relative to its anchor point.
	         * The valid values are in the form “horizontal-vertical”, and are:
	         * left-top
	         * left-center
	         * left-bottom
	         * center-top
	         * center-center
	         * center-bottom
	         * right-top
	         * right-center
	         * right-bottom
	         */

	    }, {
	        key: 'iconAlign',
	        set: function set(value) {
	            this._setProperty('icon-align', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-align');
	        }

	        /**
	         * For random placement operations, set this seed so that the randomization is repeatable each time you run the app.
	         * @param value {integer}
	         */

	    }, {
	        key: 'iconRandomSeed',
	        set: function set(value) {
	            this._setProperty('icon-random-seed', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-random-seed');
	        }

	        /**
	         * Whether to occlusion cull the text so they do not display when line of sight is obstructed by terrain
	         * @param value
	         */

	    }, {
	        key: 'iconOcclusionCull',
	        set: function set(value) {
	            this._setProperty('icon-occlusion-cull', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-occlusion-cull');
	        }

	        /**
	         * The viewer altitude (MSL) to start occlusion culling when line of sight is obstructed by terrain
	         * @param value
	         */

	    }, {
	        key: 'iconOcclusionCullAltitude',
	        set: function set(value) {
	            this._setProperty('icon-occlusion-cull-altitude', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-occlusion-cull-altitude');
	        }
	    }, {
	        key: 'iconMode',
	        set: function set(value) {
	            this._setProperty('icon-mode', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-mode');
	        }
	    }, {
	        key: 'iconAlpha',
	        set: function set(value) {
	            this._setProperty('icon-alpha', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-alpha');
	        }
	    }, {
	        key: 'iconSize',
	        set: function set(value) {
	            this._setProperty('icon-size', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-size');
	        }
	    }, {
	        key: 'iconLinkLine',
	        set: function set(value) {
	            this._setProperty('icon-link-line', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-link-line');
	        }
	    }, {
	        key: 'iconRoll',
	        set: function set(value) {
	            this._setProperty('icon-roll', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-roll');
	        }
	    }, {
	        key: 'iconPitch',
	        set: function set(value) {
	            this._setProperty('icon-pitch', value);
	        },
	        get: function get() {
	            return this.__getProperty('icon-pitch');
	        }

	        /* Model Symbol */
	        /**
	         * URI of the 3D model.
	         * Use this OR the model-library property, but not both.
	         * @param value {uri-string}
	         */

	    }, {
	        key: 'model',
	        set: function set(value) {
	            this._setProperty('model', value);
	        },
	        get: function get() {
	            return this.__getProperty('model');
	        }

	        /**
	         * Name of a resource library containing the model.
	         * Use this OR the model property, but not both.
	         * @param value {string}
	         */

	    }, {
	        key: 'modelLibrary',
	        set: function set(value) {
	            this._setProperty('model-library', value);
	        },
	        get: function get() {
	            return this.__getProperty('model-library');
	        }

	        /**
	         * For model substitution, describes how osgEarth should replace geometry with models:
	         * vertex:    Replace each vertex in the geometry with a model.
	         * interval:    Place models at regular intervals along the geometry, according to the model-density property.
	         * random:    Place models randomly within the geometry, according to the model-density property.
	         * centroid:    Place a single model at the centroid of the geometry.
	         * @param value {string}
	         */

	    }, {
	        key: 'modelPlacement',
	        set: function set(value) {
	            this._setProperty('model-placement', value);
	        },
	        get: function get() {
	            return this.__getProperty('model-placement');
	        }

	        /**
	         * For model-placement settings of interval or random, this property is hint as to how many instances osgEarth should place.
	         * The unit is approximately “units per km” (for linear data) or “units per square km” for polygon data. (float)
	         * @param value {float}
	         */

	    }, {
	        key: 'modelDensity',
	        set: function set(value) {
	            this._setProperty('model-density', value);
	        },
	        get: function get() {
	            return this.__getProperty('model-density');
	        }

	        /**
	         * Scales the model by this amount along all axes
	         * @param value {float}
	         */

	    }, {
	        key: 'modelScale',
	        set: function set(value) {
	            this._setProperty('model-scale', value);
	        },
	        get: function get() {
	            return this.__getProperty('model-scale');
	        }
	    }, {
	        key: 'modelPixel',
	        set: function set(value) {
	            this._setProperty('model-pixel', value);
	        },
	        get: function get() {
	            return this.__getProperty('model-pixel');
	        }
	    }, {
	        key: 'modelMinAutoScale',
	        set: function set(value) {
	            this._setProperty('model-min-auto-scale', value);
	        },
	        get: function get() {
	            return this.__getProperty('model-min-auto-scale');
	        }
	    }, {
	        key: 'modelMaxAutoScale',
	        set: function set(value) {
	            this._setProperty('model-max-auto-scale', value);
	        },
	        get: function get() {
	            return this.__getProperty('model-max-auto-scale');
	        }

	        /**
	         * Rotates the about its +Z axis
	         * @param value {float, degrees}
	         */

	    }, {
	        key: 'modelHeading',
	        set: function set(value) {
	            this._setProperty('model-heading', value);
	        },
	        get: function get() {
	            return this.__getProperty('model-heading');
	        }
	    }, {
	        key: 'modelRoll',
	        set: function set(value) {
	            this._setProperty('model-roll', value);
	        },
	        get: function get() {
	            return this.__getProperty('model-roll');
	        }
	    }, {
	        key: 'modelPitch',
	        set: function set(value) {
	            this._setProperty('model-pitch', value);
	        },
	        get: function get() {
	            return this.__getProperty('model-pitch');
	        }

	        /* Render Symbol */

	        /**
	         * Enable or disable GL depth testing.
	         * @param value {boolean}
	         */

	    }, {
	        key: 'renderDepthTest',
	        set: function set(value) {
	            this._setProperty('render-depth-test', value);
	        },
	        get: function get() {
	            return this.__getProperty('render-depth-test');
	        }

	        /**
	         * Enable or disable GL lighting.
	         * @param value {boolean}
	         */

	    }, {
	        key: 'renderLighting',
	        set: function set(value) {
	            this._setProperty('render-lighting', value);
	        },
	        get: function get() {
	            return this.__getProperty('render-lighting');
	        }

	        /**
	         * hint to render in the transparent (depth-sorted) bin
	         * @param value {boolean}
	         */

	    }, {
	        key: 'renderTransparent',
	        set: function set(value) {
	            this._setProperty('render-transparent', value);
	        },
	        get: function get() {
	            return this.__getProperty('render-transparent');
	        }

	        /**
	         * render bin to use for sorting
	         * @param value {string}
	         */

	    }, {
	        key: 'renderBin',
	        set: function set(value) {
	            this._setProperty('render-bin', value);
	        },
	        get: function get() {
	            return this.__getProperty('render-bin');
	        }

	        /**
	         * Enable or disable Depth Offseting.
	         * Depth offsetting is a GPU technique that modifies a fragment’s depth value,
	         * simulating the rendering of that object closer or farther from the viewer than it actually is.
	         * It is a mechanism for mitigating z-fighting.
	         * @param value {boolean}
	         */

	    }, {
	        key: 'renderDepthOffset',
	        set: function set(value) {
	            this._setProperty('render-depth-offset', value);
	        },
	        get: function get() {
	            return this.__getProperty('render-depth-offset');
	        }

	        /**
	         * Sets the minimum bias (distance-to-viewer offset) for depth offsetting.
	         * If is usually sufficient to set this property; all the others will be set automatically.
	         * @param value {float, meters}
	         */

	    }, {
	        key: 'renderDepthOffsetMinBias',
	        set: function set(value) {
	            this._setProperty('render-depth-offset-min-bias', value);
	        },
	        get: function get() {
	            return this.__getProperty('render-depth-offset-min-bias');
	        }

	        /**
	         * Sets the minimum bias (distance-to-viewer offset) for depth offsetting.
	         * @param value {float, meters}
	         */

	    }, {
	        key: 'renderDepthOffsetMaxBias',
	        set: function set(value) {
	            this._setProperty('render-depth-offset-max-bias', value);
	        },
	        get: function get() {
	            return this.__getProperty('render-depth-offset-min-bias');
	        }

	        /**
	         * Sets the range (distance from viewer) at which to apply the minimum depth offsetting bias.
	         * The bias graduates between its min and max values over the specified range.
	         * @param value
	         */

	    }, {
	        key: 'renderDepthOffsetMinRange',
	        set: function set(value) {
	            this._setProperty('render-depth-offset-min-range', value);
	        },
	        get: function get() {
	            return this.__getProperty('render-depth-offset-min-range');
	        }

	        /**
	         * Sets the range (distance from viewer) at which to apply the maximum depth offsetting bias.
	         * The bias graduates between its min and max values over the specified range.
	         * @param value
	         */

	    }, {
	        key: 'renderDepthOffsetMaxRange',
	        set: function set(value) {
	            this._setProperty('render-depth-offset-max-range', value);
	        },
	        get: function get() {
	            return this.__getProperty('render-depth-offset-max-range');
	        }
	    }, {
	        key: 'renderBackfaceCulling',
	        set: function set(value) {
	            this._setProperty('render-backface-culling', value);
	        },
	        get: function get() {
	            return this.__getProperty('render-backface-culling');
	        }

	        /* Text Symbol */
	        /**
	         * 字体顏色
	         * @param value {HTML color}
	         */

	    }, {
	        key: 'textColor',
	        set: function set(value) {
	            this._setProperty('text-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('test-color');
	        }

	        // /**
	        //  * 字体前景色
	        //  * Foreground color of the text
	        //  * @param value {HTML color}
	        //  */
	        // set textFill(value) {
	        //     this._setProperty('text-fill', value);
	        // }

	        // get textFill() {
	        //     return this.__getProperty('text-fill');
	        // }

	        // /**
	        //  * 字体透明度
	        //  * @param value {Number}
	        //  */
	        // set textFillOpacity(value) {
	        //     this._setProperty('text-fill-opacity', value);
	        // }

	        // get textFillOpacity() {
	        //     return this.__getProperty('text-fill-opacity');
	        // }

	        /**
	         * Size of the text
	         * @param value {float, pixels}
	         */

	    }, {
	        key: 'textSize',
	        set: function set(value) {
	            this._setProperty('text-size', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-size');
	        }

	        /**
	         * Name of the font to use (system-dependent).
	         * For example, use “arialbd” on Windows for Arial Bold.
	         * @param value {string}
	         */

	    }, {
	        key: 'textFont',
	        set: function set(value) {
	            this._setProperty('text-font', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-font');
	        }

	        /**
	         * 是否显示边框
	         * @param value {Boolean}
	         */

	    }, {
	        key: 'textHaloShow',
	        set: function set(value) {
	            this._setProperty('text-halo-show', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-halo-show');
	        }

	        /**
	         * Outline color of the text; Omit this propery altogether for no outline.
	         * @param color {HTML Color}
	         */

	    }, {
	        key: 'textHalo',
	        set: function set(color) {
	            this._setProperty('text-halo', color);
	        },
	        get: function get() {
	            return this.__getProperty('text-halo');
	        }

	        /**
	         * 字体边框颜色
	         * @param color {HTML Color}
	         */

	    }, {
	        key: 'textHaloColor',
	        set: function set(value) {
	            this._setProperty('text-halo-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-halo-color');
	        }

	        /**
	         * 字体边框是否填充
	         * @param value {Boolean}
	         */

	    }, {
	        key: 'textFillHalo',
	        set: function set(value) {
	            this._setProperty('text-halo-fill', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-halo-fill');
	        }

	        /**
	         * 字体边框样式
	         * @param color {HTML Color}
	         */

	    }, {
	        key: 'textHaloBackdropType',
	        set: function set(value) {
	            this._setProperty('text-halo-backdrop-type', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-halo-backdrop-type');
	        }

	        /**
	         * 字体外边框偏移距离
	         * @param value {Number}
	         */

	    }, {
	        key: 'textHaloImplementation',
	        set: function set(value) {
	            this._setProperty('text-halo-implementation', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-halo-implementation');
	        }

	        /**
	         * Outline thickness
	         * @param value {float, pixels}
	         */

	    }, {
	        key: 'textHaloOffset',
	        set: function set(value) {
	            this._setProperty('text-halo-offset', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-halo-offset');
	        }

	        /**
	         * The x offset of the text in pixels
	         * @param value {number pixels}
	         */

	    }, {
	        key: 'textOffsetX',
	        set: function set(value) {
	            this._setProperty('text-offset-x', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-offset-x');
	        }

	        /**
	         * The y offset of the text in pixels
	         * @param value {number pixels}
	         */

	    }, {
	        key: 'textOffsetY',
	        set: function set(value) {
	            this._setProperty('text-offset-y', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-offset-y');
	        }

	        /**
	         * Alignment of the text string relative to its anchor point:
	         * left-top
	         * left-center
	         * left-bottom
	         * left-base-line
	         * left-bottom-base-line
	         * center-top
	         * center-center
	         * center-bottom
	         * center-base-line
	         * center-bottom-base-line
	         * right-top
	         * right-center
	         * right-bottom
	         * right-base-line
	         * right-bottom-base-line
	         * base-line
	         * @param value {string}
	         */

	    }, {
	        key: 'textAlign',
	        set: function set(value) {
	            this._setProperty('text-align', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-align');
	        }

	        /**
	         * Layout of text:
	         * ltr
	         * rtl
	         * vertical
	         * @param value {string}
	         */

	    }, {
	        key: 'textLayout',
	        set: function set(value) {
	            this._setProperty('text-layout', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-layout');
	        }

	        /**
	         * The actual text string to display
	         * @param value {string}
	         */

	    }, {
	        key: 'textContent',
	        set: function set(value) {
	            this._setProperty('text-content', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-content');
	        }

	        /**
	         * Character encoding of the text content:
	         * utf-8
	         * utf-16
	         * utf-32
	         * ascii
	         * @param value {string}
	         */

	    }, {
	        key: 'textEncoding',
	        set: function set(value) {
	            this._setProperty('text-encoding', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-encoding');
	        }

	        /**
	         * Activate decluttering for this icon. osgEarth will attempt to automatically show or hide things so they don’t overlap on the screen.
	         * @param value {boolean}
	         */

	    }, {
	        key: 'textDeclutter',
	        set: function set(value) {
	            this._setProperty('text-declutter', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-declutter');
	        }

	        /**
	         * Whether to occlusion cull the text so they do not display when line of sight is obstructed by terrain
	         * @param value {string}
	         */

	    }, {
	        key: 'textOcclusionCull',
	        set: function set(value) {
	            this._setProperty('text-occlusion-cull', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-occlusion-cull');
	        }

	        /**
	         * The viewer altitude (MSL) to start occlusion culling when line of sight is obstructed by terrain
	         * @param value
	         */

	    }, {
	        key: 'textOcclusionCullAltitude',
	        set: function set(value) {
	            this._setProperty('text-occlusion-cull-altitude', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-occlusion-cull-altitude');
	        }

	        /**
	         * 文字轴对齐方式
	         * @param value {String}
	         */

	    }, {
	        key: 'textAxisAlignment',
	        set: function set(value) {
	            this._setProperty('text-axis-alignment', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-axis-alignment');
	        }

	        /**
	         * 文字大小模式
	         * @param value {String}
	         */

	    }, {
	        key: 'textCharacterSizeMode',
	        set: function set(value) {
	            this._setProperty('text-character-size-mode', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-character-size-mode');
	        }

	        /**
	         * 文字渐变模式
	         * @param value {String}
	         */

	    }, {
	        key: 'textGradient',
	        set: function set(value) {
	            this._setProperty('text-gradient', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-gradient');
	        }

	        /**
	         * 文字渐变左上角颜色
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'textGradientLtcolor',
	        set: function set(value) {
	            this._setProperty('text-gradient-ltcolor', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-gradient-ltcolor');
	        }

	        /**
	         * 文字渐变右上角颜色
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'textGradientRtcolor',
	        set: function set(value) {
	            this._setProperty('text-gradient-rtcolor', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-gradient-rtcolor');
	        }

	        /**
	         * 文字渐变左下角颜色
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'textGradientLbcolor',
	        set: function set(value) {
	            console.log(value);
	            this._setProperty('text-gradient-lbcolor', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-gradient-lbcolor');
	        }

	        /**
	         * 文字渐变右下角颜色
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'textGradientRbcolor',
	        set: function set(value) {
	            this._setProperty('text-gradient-rbcolor', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-gradient-rbcolor');
	        }

	        /**
	         * 文字是否使用3D模式
	         * @param value {Boolean}
	         */

	    }, {
	        key: 'textUsed3d',
	        set: function set(value) {
	            this._setProperty('text-used-3d', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-used-3d');
	        }

	        /**
	         * 是否有连接线
	         * @param value {Boolean}
	         */

	    }, {
	        key: 'textLinkLine',
	        set: function set(value) {
	            this._setProperty('text-link-line', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-link-line');
	        }

	        /**
	         * 缩放
	         * @param value {Boolean}
	         */

	    }, {
	        key: 'textScale',
	        set: function set(value) {
	            this._setProperty('text-scale', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-scale');
	        }

	        /**
	         * 文字翻滚角
	         * @param value {Boolean}
	         */

	    }, {
	        key: 'textRoll',
	        set: function set(value) {
	            this._setProperty('text-roll', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-roll');
	        }

	        /**
	         * 文字俯仰角
	         * @param value {Boolean}
	         */

	    }, {
	        key: 'textPitch',
	        set: function set(value) {
	            this._setProperty('text-pitch', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-pitch');
	        }

	        /**
	         * 文字俯仰角
	         * @param value {Boolean}
	         */

	    }, {
	        key: 'textHeading',
	        set: function set(value) {
	            this._setProperty('text-heading', value);
	        },
	        get: function get() {
	            return this.__getProperty('text-heading');
	        }

	        /* Coverage Symbol */
	        /**
	         * Expression resolving to the floating-point value to encode.
	         * @param value
	         */

	    }, {
	        key: 'coverageValue',
	        set: function set(value) {
	            this._setProperty('coverage-value', value);
	        },
	        get: function get() {
	            return this.__getProperty('coverage-value');
	        }

	        /**
	         * 最大可视距离
	         * @property distance 
	         * @param {Number}
	         */

	    }, {
	        key: 'maxVisibleDistance',
	        set: function set(value) {
	            this._setProperty('max-visible-distance', value);
	        },
	        get: function get() {
	            return this.__getProperty('max-visible-distance');
	        }

	        /**
	         * 最小可视距离
	         * @property distance 
	         * @param {Number}
	         */

	    }, {
	        key: 'minVisibleDistance',
	        set: function set(value) {
	            this._setProperty('min-visible-distance', value);
	        },
	        get: function get() {
	            return this.__getProperty('min-visible-distance');
	        }

	        /**
	         * 最大可视相机高度
	         * @property value 
	         * @param {Number}
	         */

	    }, {
	        key: 'maxVisibleRange',
	        set: function set(value) {
	            this._setProperty('max-visible-range', value);
	        },
	        get: function get() {
	            return this.__getProperty('max-visible-range');
	        }

	        /**
	         * 最小可视相机高度
	         * @property value 
	         * @param {Number}
	         */

	    }, {
	        key: 'minVisibleRange',
	        set: function set(value) {
	            this._setProperty('min-visible-range', value);
	        },
	        get: function get() {
	            return this.__getProperty('min-visible-range');
	        }

	        /**
	         * 设置特效大小
	         * @property size
	         * @param {Number} 
	         */

	    }, {
	        key: 'effectSize',
	        set: function set(value) {
	            this._setProperty('effect-size', value);
	        },
	        get: function get() {
	            return this.__getProperty('effect-size');
	        }

	        /**
	         * 设置点特效一次的周期
	         * @property size
	         * @param {Number} 
	         */

	    }, {
	        key: 'effectFrequency',
	        set: function set(value) {
	            this._setProperty('effect-frequency', value);
	        },
	        get: function get() {
	            return this.__getProperty('effect-frequency');
	        }

	        /**
	         * 设置点X轴偏移
	         * @property size
	         * @param {Number} 
	         */

	    }, {
	        key: 'effectOffsetX',
	        set: function set(value) {
	            this._setProperty('effect-offset-x', value);
	        },
	        get: function get() {
	            return this.__getProperty('effect-offset-x');
	        }

	        /**
	         * 设置点Y轴偏移
	         * @property size
	         * @param {Number} 
	         */

	    }, {
	        key: 'effectOffsetY',
	        set: function set(value) {
	            this._setProperty('effect-offset-y', value);
	        },
	        get: function get() {
	            return this.__getProperty('effect-offset-y');
	        }

	        /**
	         * 设置点特持续次数
	         * @property size
	         * @param {Number} 
	         */

	    }, {
	        key: 'effectDuration',
	        set: function set(value) {
	            this._setProperty('effect-duration', value);
	        },
	        get: function get() {
	            return this.__getProperty('effect-duration');
	        }

	        /**
	         * 设置点特效持续时长
	         * @property size
	         * @param {Number} 
	         */

	    }, {
	        key: 'effectMode',
	        set: function set(value) {
	            this._setProperty('effect-mode', value);
	        },
	        get: function get() {
	            return this.__getProperty('effect-mode');
	        }

	        /**
	         * 设置点特效旋转方向
	         * @property value
	         * @param {Boolean} 
	         */

	    }, {
	        key: 'rotationDirection',
	        set: function set(value) {
	            this._setProperty('rotation-direction', value);
	        },
	        get: function get() {
	            return this.__getProperty('rotation-direction');
	        }

	        /**
	         * 设置点特效缩放样式
	         * @property size
	         * @param {EUM} 
	         */

	    }, {
	        key: 'scaleType',
	        set: function set(value) {
	            this._setProperty('scale-type', value);
	        },
	        get: function get() {
	            return this.__getProperty('scale-type');
	        }

	        /**
	         * 设置点点军标颜色
	         * @property color
	         * @param {Number} 
	         */

	    }, {
	        key: 'jbColor',
	        set: function set(value) {
	            this._setProperty('jb-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-color');
	        }

	        /**
	         *    Scales the JBPoint by this amount
	         * @param value {float}
	         */

	    }, {
	        key: 'jbScale',
	        set: function set(value) {
	            this._setProperty('jb-scale', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-scale');
	        }

	        /**
	         * 军衬颜色
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'jbLiningColor',
	        set: function set(value) {
	            this._setProperty('jb-lining-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-lining-color');
	        }

	        /**
	        * 军标文字颜色
	        * @param color {HTML COLOR}
	        */

	    }, {
	        key: 'jbTextColor',
	        set: function set(value) {
	            this._setProperty('jb-text-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-text-color');
	        }
	    }, {
	        key: 'jbTextSize',
	        set: function set(value) {
	            this._setProperty('jb-text-size', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-text-size');
	        }
	    }, {
	        key: 'jbTextFont',
	        set: function set(value) {
	            this._setProperty('jb-text-font', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-text-font');
	        }

	        /**
	         * 设置点军标文字位置
	         * @property position
	         * @type ENUM {LINE_UP, LINE_MIDDLE,LINE_DOWN}
	         */

	    }, {
	        key: 'jbTextPosition',
	        set: function set(value) {
	            this._setProperty('jb-text-position', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-text-position');
	        }

	        /**
	        * 设置点军标文字旋转
	        * @property rotation
	        * @type 
	        */

	    }, {
	        key: 'jbTextRotation',
	        set: function set(value) {
	            this._setProperty('jb-text-rotation', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-text-rotation');
	        }

	        /**
	         * 设置点军标显示模式
	         * @property mode
	         * @type ENUM { }
	         */

	    }, {
	        key: 'jbShowMode',
	        set: function set(value) {
	            this._setProperty('jb-show-mode', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-show-mode');
	        }

	        /**
	         * 线军标线的厚度
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'jbLineThickness',
	        set: function set(value) {
	            this._setProperty('jb-line-thickness', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-line-thickness');
	        }

	        /**
	         * 线军标线的宽度
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'jbLineWidth',
	        set: function set(value) {
	            this._setProperty('jb-line-width', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-line-width');
	        }

	        /**
	        * 线军标线的类型
	        * @param color {HTML COLOR}
	        */

	    }, {
	        key: 'jbLineType',
	        set: function set(value) {
	            this._setProperty('jb-line-type', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-line-type');
	        }

	        /**--JBPoint_TST
	         * 点军标角度
	         * @param float
	         */

	    }, {
	        key: 'jbAngle',
	        set: function set(value) {
	            this._setProperty('jb-angle', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-angle');
	        }

	        /**
	         * 三角军标是否直立
	         * @param boolean
	         */

	    }, {
	        key: 'jbErect',
	        set: function set(value) {
	            this._setProperty('jb-erect', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-erect');
	        }

	        /** 
	         * 三角军标类型
	         * @param Number
	         */

	    }, {
	        key: 'jbMdoeType',
	        set: function set(value) {
	            this._setProperty('jb-mode-type', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-mode-type');
	        }

	        /**
	         * 填充颜色
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'jbFillColor',
	        set: function set(value) {
	            this._setProperty('jb-fill-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-fill-color');
	        }

	        /**
	         * 开始渐变颜色
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'jbColorBegin',
	        set: function set(value) {
	            this._setProperty('jb-color-begin', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-color-begin');
	        }

	        /**
	         * 末尾渐变颜色
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'jbColorEnd',
	        set: function set(value) {
	            this._setProperty('jb-color-end', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-color-end');
	        }

	        /**
	         * 衬线颜色
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'jbLiningColorSerif',
	        set: function set(value) {
	            this._setProperty('jb-lining-color-serif', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-lining-color-serif');
	        }

	        /**
	         * 衬线厚度
	         * @param Number
	         */

	    }, {
	        key: 'jbLineThicknessSerif',
	        set: function set(value) {
	            this._setProperty('jb-line-thickness-serif', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-line-thickness-serif');
	        }

	        /**
	         * 衬线宽度
	         * @param Number
	         */

	    }, {
	        key: 'jbLineWidthSerif',
	        set: function set(value) {
	            this._setProperty('jb-line-width-serif', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-line-width-serif');
	        }

	        /**
	         * 衬线类型
	         * @param enum{SOLID,DASHED}
	         */

	    }, {
	        key: 'jbLineTypeSerif',
	        set: function set(value) {
	            this._setProperty('jb-line-type-serif', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-line-type-serif');
	        }

	        /**
	         * 是否添加衬颜
	         * @param Boolean
	         */

	    }, {
	        key: 'jbBisSerif',
	        set: function set(value) {
	            this._setProperty('jb-bis-serif', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-bis-serif');
	        }

	        /**
	         * 符号大小，单位：像素
	         * @param Number
	         */

	    }, {
	        key: 'jbSymbolSize',
	        set: function set(value) {
	            this._setProperty('jb-symbol-size', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-symbol-size');
	        }

	        /**JBLine_TST,SingleArrow_Line
	         * 军标是否依地形线显示
	         * @param Boolean
	         */

	    }, {
	        key: 'jbTopographic',
	        set: function set(value) {
	            this._setProperty('jb-topographic', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-topographic');
	        }

	        /**JBLine_TST,SingleArrow_Line
	         * 军标在三维中的附加高度
	         * @param Number
	         */

	    }, {
	        key: 'jbAddHeight',
	        set: function set(value) {
	            this._setProperty('jb-add-height', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-add-height');
	        }

	        /**JBLine_TST,SingleArrow_Line
	         * 军标厚度
	         * @param Number
	         */

	    }, {
	        key: 'jbCentainThickness',
	        set: function set(value) {
	            this._setProperty('jb-centain-thickness', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-centain-thickness');
	        }

	        /**JBLine_TST,SingleArrow_Line
	         * 是否启用渐变填充
	         * @param Boolean
	         */

	    }, {
	        key: 'jbBisGradientFill',
	        set: function set(value) {
	            this._setProperty('jb-bis-gradient-fill', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-bis-gradient-fill');
	        }

	        /**JBLine_TST
	        * 显隐设置
	        * @param Boolean
	        */

	    }, {
	        key: 'jbBisVisible',
	        set: function set(value) {
	            this._setProperty('jb-bis-visible', value);
	        },
	        get: function get() {
	            return this.__getProperty('jb-bis-visible');
	        }

	        /**new MilMarking
	         * 军标颜色
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milColor',
	        set: function set(value) {
	            this._setProperty('mil-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-color');
	        }

	        /**new MilMarking
	         * 军标衬色
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milSupplementColor',
	        set: function set(value) {
	            this._setProperty('mil-supplement-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-supplement-color');
	        }

	        /**new MilMarking
	         * 线军标类型
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milLineType',
	        set: function set(value) {
	            this._setProperty('mil-line-type', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-line-type');
	        }

	        /**new MilMarking
	         * 绘制形态-栅格/矢量
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milRenderMode',
	        set: function set(value) {
	            this._setProperty('mil-render-mode', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-render-mode');
	        }

	        /**new MilMarking
	         * 是否随地图缩放
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milSizeMode',
	        set: function set(value) {
	            this._setProperty('mil-size-mode', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-size-mode');
	        }

	        /**new MilMarking
	         * 军标大小
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milSize',
	        set: function set(value) {
	            this._setProperty('mil-size', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-size');
	        }

	        /**new MilMarking
	         * 军标三维旋转heading
	         * @param value {HTML Array}
	         */

	    }, {
	        key: 'milHeading',

	        /**new MilMarking
	         * 军标三维旋转heading
	         * @param value {HTML Array}
	         */
	        set: function set(value) {
	            this._setProperty('mil-heading', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-heading');
	        }

	        /**new MilMarking
	         * 是否启用渐变填充
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milRoll',

	        /**new MilMarking
	         * 军标三维旋转roll
	         * @param value {HTML Array}
	         */
	        set: function set(value) {
	            this._setProperty('mil-roll', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-roll');
	        }
	        /**new MilMarking
	         * 军标三维旋转pitch
	         * @param value {HTML Array}
	         */

	    }, {
	        key: 'milPitch',
	        set: function set(value) {
	            this._setProperty('mil-pitch', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-pitch');
	        }
	    }, {
	        key: 'milFillMode',
	        set: function set(value) {
	            this._setProperty('mil-fill-mode', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-fill-mode');
	        }

	        /**new MilMarking
	         * 渐变颜色
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milGradientColor',
	        set: function set(value) {
	            this._setProperty('mil-gradient-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-gradient-color');
	        }

	        /**new MilMarking
	         * 填充色
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milFillColor',
	        set: function set(value) {
	            this._setProperty('mil-fill-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-fill-color');
	        }

	        /**new MilMarking
	         * 线宽
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milLineWidth',
	        set: function set(value) {
	            this._setProperty('mil-line-width', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-line-width');
	        }

	        /**new MilMarking
	         * 线宽
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milThickness',
	        set: function set(value) {
	            this._setProperty('mil-thickness', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-thickness');
	        }

	        /**new MilMarking
	         * 对齐面向屏幕、面向地形（点标）
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milDirectionMode',
	        set: function set(value) {
	            this._setProperty('mil-direction-mode', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-direction-mode');
	        }

	        /**new MilMarking
	         * 是否拉伸到地面（线标）
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milExtrusion',
	        set: function set(value) {
	            this._setProperty('mil-extrusion', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-extrusion');
	        }

	        /**new MilMarking
	         * 军标文字
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milText',
	        set: function set(value) {
	            this._setProperty('mil-text', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-text');
	        }

	        /**new MilMarking
	         * 文字颜色
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milTextColor',
	        set: function set(value) {
	            this._setProperty('mil-text-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-text-color');
	        }

	        /**new MilMarking
	         * 文字背景
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milTextFill',
	        set: function set(value) {
	            this._setProperty('mil-text-fill', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-text-fill');
	        }

	        /**new MilMarking
	         * 文字大小
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milTextSize',
	        set: function set(value) {
	            this._setProperty('mil-text-size', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-text-size');
	        }

	        /**new MilMarking
	         * 文字字体
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milTextFont',
	        set: function set(value) {
	            this._setProperty('mil-text-font', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-text-font');
	        }

	        /**new MilMarking
	         * 文字边框色
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milTextHaloColor',
	        set: function set(value) {
	            this._setProperty('mil-text-halo-color', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-text-halo-color');
	        }

	        /**new MilMarking
	         * 军标文字位置（待确认）
	         * @param color {HTML COLOR}
	         */

	    }, {
	        key: 'milTextPosType',
	        set: function set(value) {
	            this._setProperty('mil-text-pos-type', value);
	        },
	        get: function get() {
	            return this.__getProperty('mil-text-pos-type');
	        }
	    }]);

	    return Style;
	}();

	exports.default = Style;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Style.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：StyleData.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-03-30 18:22:56.
	 * 用途：实体样式数据
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.cssProperties = undefined;

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _ENUM = __webpack_require__(14);

	var _ENUM2 = _interopRequireDefault(_ENUM);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	var _STYLEENUM = __webpack_require__(64);

	var _STYLEENUM2 = _interopRequireDefault(_STYLEENUM);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	var cssProperties = {
	    'fill': {
	        type: 'String',
	        default: '#FFFFFFFF',
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (Util.isString(value)) {
	                return true;
	            } else {
	                var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'fill', this.type, this.default));
	                return false;
	            }
	        }
	    },
	    'mesh-uniform': {
	        type: 'Boolean',
	        default: true
	    },
	    'mesh-color': {
	        type: 'String',
	        default: '#FFFFFFFF',
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (Util.isString(value)) {
	                if (Util.isColor(value)) {
	                    return true;
	                } else {
	                    var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CORLOR, tag, 'mesh-color', this.default));
	                    return false;
	                }
	            } else {
	                var _tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, _tag, 'mesh-color', this.type, this.default));
	                return false;
	            }
	        }
	    },
	    'stroke-tessellation': {
	        type: 'Number',
	        default: 0,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (Util.isStrNumber(value) || Number(value)) {
	                if (value >= 0 && value <= 2000) return true;else {
	                    var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, tag, 'stroke-tessellation', ' [0,100000] ', 'none', this.default));
	                    return false;
	                }
	            } else {
	                var _tag2 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, _tag2, 'stroke-tessellation', this.type, this.default));
	                return false;
	            }
	        }
	    },
	    'jb-text-position': {
	        type: 'Number',
	        default: 0,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (Util.isStrNumber(value) || Number(value)) {
	                if (value >= 0 && value <= 2) return true;else {
	                    var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, tag, 'jb-text-position', ' [0,2] ', 'none', this.default));
	                }
	            } else {
	                var _tag3 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, _tag3, 'jb-text-position', this.type, this.default));
	                return false;
	            }
	        }
	    },
	    //顶部颜色
	    'mesh-color-top': {
	        type: 'String',
	        default: '#FFFFFFFF',
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (Util.isString(value)) {
	                if (Util.isColor(value)) {
	                    return true;
	                } else {
	                    var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CORLOR, tag, 'mesh-color-top', this.default));
	                    return false;
	                }
	            } else {
	                var _tag4 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, _tag4, 'mesh-color-top', this.type, this.default));
	                return false;
	            }
	        }
	    },
	    //底部颜色        
	    'mesh-color-bottom': {
	        type: 'String',
	        default: '#FFFFFFFF',
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (Util.isString(value)) {
	                if (Util.isColor(value)) {
	                    return true;
	                } else {
	                    var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CORLOR, tag, 'mesh-color-bottom', this.default));
	                    return false;
	                }
	            } else {
	                var _tag5 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, _tag5, 'mesh-color-bottom', this.type, this.default));
	                return false;
	            }
	        }
	    },
	    // 'mesh-color-flank': true,        //侧面颜色
	    'mesh-mode': {
	        type: 'GV.MESH_MODE',
	        default: _STYLEENUM2.default.MESH_MODE.FILL,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            for (var key in _STYLEENUM2.default.MESH_MODE) {
	                if (value === _STYLEENUM2.default.MESH_MODE[key]) return true;
	            }
	            var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	            console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'mesh-mode', this.type, this.default));
	            return false;
	        }
	    }, //填充方式
	    // 是否显示边框，未实现
	    'mesh-fram': {
	        type: 'Boolean',
	        default: false,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	            if (typeof value !== 'boolean') {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'mesh-fram', this.type, this.default));
	                return false;
	            }
	            return true;
	        }
	    },

	    // 边框线颜色， 未实现
	    'mesh-frame-color': true,
	    // 边框线宽， 未实现
	    'mesh-line-width': true,
	    // 翻滚角
	    'mesh-roll': {
	        type: 'Number',
	        default: 0,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (!Util.isStrNumber(value) && !Number(value)) {
	                var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'mesh-roll', this.type, this.default));
	                return false;
	            }
	            return true;
	        }
	    },
	    // 俯仰角
	    'mesh-pitch': {
	        type: 'Number',
	        default: 0,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (!Util.isStrNumber(value) && !Number(value)) {
	                var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'mesh-pitch', this.type, this.default));
	                return false;
	            }
	            return true;
	        }
	    },
	    // 偏航角
	    'mesh-heading': {
	        type: 'Number',
	        default: 0,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (!Util.isStrNumber(value) && !Number(value)) {
	                var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'mesh-heading', this.type, this.default));
	                return false;
	            }
	            return true;
	        }
	    },
	    // 缩放
	    'mesh-scale': {
	        type: 'Number',
	        default: 1,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (!Util.isStrNumber(value) && !Number(value)) {
	                var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'mesh-scale', this.type, this.default));
	                return false;
	            } else {
	                if (value <= 0) {
	                    var _tag6 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONE, _tag6, 'mesh-scale', '>0', this.default));
	                    return false;
	                }
	                return true;
	            }
	        }
	    },
	    // 线的颜色
	    'stroke': {
	        type: 'String',
	        default: '#FFFFFFFF',
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (Util.isString(value)) {
	                return true;
	            } else {
	                var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'fill', this.type, this.default));
	                return false;
	            }
	        }
	    },
	    // 线宽（例20px 或 10m）
	    'stroke-width': {
	        type: 'Number/String',
	        default: '1' | '1px' | '1m',
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (!Util.isStrNumber(value) && !Util.isString(value)) {
	                var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'stroke-width', this.type, this.default));
	                return false;
	            } else if (Util.isAddUnit(value)) {
	                if (Util.filterUnit(value) <= 0) {
	                    var _tag7 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONE, _tag7, 'stroke-width', '>=1', '1px | 1m'));
	                    return false;
	                } else return true;
	            }
	        }
	    },
	    'model-scale': {
	        type: 'Number|"auto"',
	        default: 1,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (value === 'auto') return true;
	            if (!Util.isStrNumber(value) && !Number(value)) {
	                var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'model-scale', this.type, this.default));
	                return false;
	            } else {
	                if (value <= 0) {
	                    var _tag8 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONE, _tag8, 'model-scale', '>0', this.default));
	                    return false;
	                }
	                return true;
	            }
	        }
	    },

	    'model-pixel': {
	        type: 'Numbe',
	        default: 0
	    },

	    'model-min-auto-scale': {
	        type: 'Numbe',
	        default: 0
	    },

	    'model-max-auto-scale': {
	        type: 'Numbe',
	        default: Infinity
	    },

	    // 最小渲染宽度（线宽不为位像素时有效）
	    'stroke-min-pixels': {
	        type: 'Number',
	        default: 1,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (!Util.isStrNumber(value)) {
	                var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'stroke-min-pixels', this.type, this.default));
	                return false;
	            } else {
	                if (value < 2) {
	                    var _tag9 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONE, _tag9, 'stroke-min-pixels', '不可小于2', this.default));
	                    return false;
	                }
	                return true;
	            }
	        }
	    },
	    // 线连接处处理（线宽不为位像素时有效）
	    'stroke-linejoin': {
	        type: 'GV.STROKE_LINEJOIN',
	        default: _STYLEENUM2.default.STROKE_LINEJOIN.ROUND
	    },
	    // 线端点处理（线宽不为位像素时有效）
	    'stroke-linecap': {
	        type: 'String',
	        default: 'flat',
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (!Util.isString(value)) {
	                var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'stroke-linecap', this.type, this.default));
	                return false;
	            }
	            switch (value) {
	                case 'square':
	                    return true;break;
	                case 'flat':
	                    return true;break;
	                case 'round':
	                    return true;break;
	                default:
	                    value = 'flat';
	            }
	            return true;
	        }
	    },
	    // 接口为round线宽与拐角片段的比例
	    'stroke-rounding-ratio': {
	        type: 'Number',
	        default: 0.4,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (!Util.isStrNumber(value)) {
	                var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'stroke-rounding-ratio', this.type, this.default));
	                return false;
	            } else {
	                if (value <= 0 || value >= 1) {
	                    var _tag10 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONE, _tag10, 'stroke-rounding-ratio', '(0, 1)', this.default));
	                    return false;
	                }
	                return true;
	            }
	        }
	    },
	    // 点划线模式 
	    'stroke-stipple-pattern': {
	        type: 'Number/String(HEX Number)',
	        default: 65535,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (!Util.isStrNumber(value)) {
	                if (RegExp('^0(x|X)([0-9a-fA-F]+|[0-9a-fA-F]{+})$').test(value)) {
	                    var num = parseInt(value, 16);
	                    if (num > 65535) {
	                        var _tag11 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                        console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONE, _tag11, 'stroke-stipple-pattern', '[0, 65535]', this.default));
	                        return false;
	                    }
	                    return true;
	                }
	                var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'stroke-stipple-pattern', 'Number/String(HEX Number)', 65535));
	                return false;
	            }
	            if (value > 65535 || value < 0) {
	                var _tag12 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONE, _tag12, 'stroke-stipple-pattern', '[0, 65535]', this.default));
	                return false;
	            }
	            return true;
	        }
	    },
	    // 重绘点的数目 ????????????????????????????????????????????????????????
	    'stroke-stipple-factor': {
	        type: 'Number',
	        default: 1
	    },

	    'stroke-crease-angle': {
	        type: 'Number',
	        default: 0
	    },
	    // 点的颜色
	    'point-fill': {
	        type: 'String',
	        default: '#FFFFFFFF'
	    },
	    // 点的大小
	    'point-size': {
	        type: 'Number',
	        default: 1,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (Util.isStrNumber(value) || Number(value)) {
	                return true;
	            } else {
	                var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'point-size', this.type, this.default));
	                return false;
	            }
	        }
	    },
	    // 贴地方式
	    'altitude-clamping': {
	        type: 'GV.ALTITUDE_CLAMPING',
	        default: _STYLEENUM2.default.ALTITUDE_CLAMPING.NONE
	    },
	    // 贴地方法(当altitude-clamping设置为GV.ALTITUDE_CLAMPING.TERRAIN时生效)
	    // 'altitude-technique': {
	    //     type: 'GV.ALTITUDE_TECHNIQUE',
	    //     default: STYLEENUM.ALTITUDE_TECHNIQUE.MAP
	    // },
	    // ???????????????????????????????????????????????????????
	    'altitude-binding': {
	        type: 'GV.ALTITUDE_BINDING',
	        default: _STYLEENUM2.default.ALTITUDE_BINDING.VERTEX
	    },
	    // ??????????????????????????????????????????????????????
	    'altitude-resolution': {
	        type: 'Number',
	        default: 0
	    },

	    'altitude-offset': {
	        type: 'Number',
	        default: 0
	    },
	    'altitude-scale': {
	        type: 'Number',
	        default: 1.0
	    },

	    // 挤压高度
	    'extrusion-height': {
	        type: 'Number',
	        default: 0
	    },

	    // 拉伸颜色
	    'stretch-color': {
	        type: 'String',
	        default: '#FFFFFFFF'
	    },

	    //是否拉伸
	    'line-stretch': {
	        type: 'Boolean',
	        default: false
	    },
	    // 不常用
	    'extrusion-flatten': true,
	    // 不常用
	    'extrusion-wall-gradient': true,
	    // 不常用
	    'extrusion-wall-style': true,
	    // 不常用
	    'extrusion-roof-style': true,
	    // 不常用
	    'skin-library': true,
	    // 不常用
	    'skin-tags': true,
	    // 不常用
	    'skin-tiled': true,
	    // 不常用
	    'skin-object-height': true,
	    // 不常用
	    'skin-min-object-height': true,
	    // 不常用
	    'skin-max-object-height': true,
	    // 不常用
	    'skin-random-seed': true,
	    // 不常用
	    'icon': true,
	    // 不常用
	    'icon-library': true,

	    'icon-placement': {
	        type: 'GV.ICON_PLACEMENT',
	        default: _STYLEENUM2.default.ICON_PLACEMENT.VERTEX
	    },
	    'icon-density': {
	        type: 'Number',
	        default: 25
	    },
	    'icon-scale': {
	        type: 'Number',
	        default: 1,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (!Util.isStrNumber(value) && !Number(value)) {
	                var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'icon-scale', this.type, this.default));
	                return false;
	            } else {
	                if (value <= 0) {
	                    var _tag13 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONE, _tag13, 'icon-scale', '>0', this.default));
	                    return false;
	                }
	                return true;
	            }
	        }
	    },
	    'icon-declutter': {
	        type: 'Boolean',
	        default: true
	    },
	    'icon-align': {
	        type: 'GV.ICON_ALIGN',
	        default: _STYLEENUM2.default.ICON_ALIGN.CENTER_CENTER
	    },
	    'icon-random-seed': {
	        type: 'Number',
	        default: 0
	    },
	    'icon-occlusion-cull': {
	        type: 'Boolean',
	        default: false
	    },
	    'icon-occlusion-cull-altitude': {
	        type: 'Number',
	        default: 200000
	    },
	    // ICON显示模式
	    'icon-mode': {
	        type: 'GV.ICON_MODE',
	        default: _STYLEENUM2.default.ICON_MODE.SPIRIT_SIZE
	    },
	    // ICON透明度
	    'icon-alpha': {
	        type: 'Number',
	        default: 1
	    },
	    // ICON大小
	    'icon-size': {
	        type: 'Number',
	        default: 32
	    },
	    // 是否有连接线
	    'icon-link-line': {
	        type: 'Boolean',
	        default: false
	    },
	    // 偏转角
	    'icon-heading': {
	        type: 'Number',
	        default: 0
	    },
	    // 翻滚角
	    'icon-roll': {
	        type: 'Number',
	        default: 0
	    },
	    // 俯仰角
	    'icon-pitch': {
	        type: 'Number',
	        default: 0
	    },
	    // 不常用
	    'model': true,
	    // 不常用
	    'model-library': true,

	    'model-placement': {
	        type: 'GV.MODEL_PLACEMENT',
	        default: _STYLEENUM2.default.MODEL_PLACEMENT.VERTEX
	    },
	    'model-density': {
	        type: 'Number',
	        default: 25
	    },
	    // 不常用
	    'model-max-x': true,
	    // 不常用
	    'model-max-y': true,
	    // 'model-scale': {
	    //     type: 'Number',
	    //     default: 1
	    // },
	    // 偏航角
	    'model-heading': {
	        type: 'Number',
	        default: 1
	    },
	    // 翻滚角
	    'model-roll': {
	        type: 'Number',
	        default: 1
	    },
	    // 俯仰角
	    'model-pitch': {
	        type: 'Number',
	        default: 1
	    },
	    // 是否开启深度测试
	    'render-depth-test': {
	        type: 'Boolean',
	        default: true
	    },
	    // 是否开启渲染灯光
	    'render-lighting': {
	        type: 'Boolean',
	        default: true
	    },
	    // 是否开启透明
	    'render-transparent': {
	        type: 'Boolean',
	        default: false
	    },
	    // 不常用
	    'render-bin': true,
	    // 是否开启深度测试偏移
	    'render-depth-offset': {
	        type: 'Boolean',
	        default: true
	    },
	    'render-depth-offset-min-bias': {
	        type: 'Number',
	        default: 100
	    },
	    'render-depth-offset-max-bias': {
	        type: 'Number',
	        default: 10000
	    },
	    'render-depth-offset-min-range': {
	        type: 'Number',
	        default: 1000
	    },
	    'render-depth-offset-max-range': {
	        type: 'Number',
	        default: 10000000
	    },
	    // 是否进行背面剔除
	    'render-backface-culling': {
	        type: 'Boolean',
	        default: true
	    },

	    // 字体颜色
	    'text-color': {
	        type: 'String',
	        default: '#FFFFFFFF'
	    },
	    // 字体颜色
	    'text-fill': {
	        type: 'String',
	        default: '#FFFFFFFF'
	    },
	    // 字体透明度
	    'text-fill-opacity': {
	        type: 'Number',
	        default: 1
	    },
	    //字体大小，单位是像素值或者实际大小，默认为10像素
	    'text-size': {
	        type: 'Number',
	        default: 16
	    },
	    // 字体样式
	    'text-font': {
	        type: 'String',
	        default: 'fonts/simhei.ttf'
	    },
	    // 是否显示边框
	    'text-halo-show': {
	        type: 'Boolen',
	        default: false
	    },
	    // 是否对边框进行填充
	    'text-halo-fill': {
	        type: 'Boolean',
	        default: false
	    },
	    // 字体边框颜色
	    'text-halo': {
	        type: 'String',
	        default: '#000000FF'
	    },
	    // 字体边框颜色
	    'text-halo-color': {
	        type: 'String',
	        default: '#000000FF'
	    },
	    //字体边框样式, 目前只支持默认样式
	    'text-halo-backdrop-type': {
	        type: 'GV.TEXT_HALO_BACKDROP_TYPE',
	        default: _STYLEENUM2.default.TEXT_HALO_BACKDROP_TYPE.OUT_LINE
	    },
	    // 字体外边框偏移，目前不支持
	    'text-halo-implementation': {
	        type: 'GV.TEXT_HALO_IMPLEMENTATION',
	        default: _STYLEENUM2.default.TEXT_HALO_IMPLEMENTATION.DELAYED_DEPTH_WRITES
	    },
	    // 目前不支持
	    'text-halo-offset': {
	        type: 'Number',
	        default: 0.0625
	    },
	    // 字体x轴偏移距离
	    'text-offset-x': {
	        type: 'Number',
	        default: 0
	    },
	    // 字体y轴偏移距离                   
	    'text-offset-y': {
	        type: 'Number',
	        default: 0
	    },
	    // 文本对其方式     
	    'text-align': {
	        type: 'GV.TEXT_ALIGN_MENT',
	        default: _STYLEENUM2.default.TEXT_ALIGN_MENT.LEFT_BASE_LINE
	    },
	    // 文本布局方式
	    'text-layout': {
	        type: 'GV.TEXT_LAYOUT',
	        default: _STYLEENUM2.default.TEXT_LAYOUT.LTR
	    },
	    // 文字编码方式
	    'text-encoding': {
	        type: 'GV.ENCODING',
	        default: _STYLEENUM2.default.ENCODING.ASCII
	    },
	    // text重叠时是否自动切割,目前不支持
	    'text-declutter': {
	        type: 'Boolean',
	        default: true
	    },
	    // 文字轴对齐方式                                           
	    'text-axis-alignment': {
	        type: 'GV.TEXT_AXIS_ALIGNMENT',
	        default: _STYLEENUM2.default.TEXT_AXIS_ALIGN_MENT.SCREEN
	    },
	    // 文字大小显示模式
	    'text-character-size-mode': {
	        type: 'GV.TEXT_CHARACTER_SIZE_MODE',
	        default: _STYLEENUM2.default.TEXT_CHARACTER_SIZE_MODE.SCREEN_COORDS
	    },
	    // 文字颜色渐变模式
	    'text-gradient': {
	        type: 'GV.TEXT_GRADIENT',
	        default: _STYLEENUM2.default.TEXT_GRADIENT.SOLID
	    },
	    // 文字渐变左上角颜色
	    'text-gradient-ltcolor': {
	        type: 'String',
	        default: '#FFFFFFFF'
	    },
	    // 文字渐变右上角颜色
	    'text-gradient-rtcolor': {
	        type: 'String',
	        default: '#FFFFFFFF'
	    },
	    // 文字渐变左下角颜色
	    'text-gradient-lbcolor': {
	        type: 'String',
	        default: '#FFFFFFFF'
	    },
	    // 文字渐变右下角颜色
	    'text-gradient-rbcolor': {
	        type: 'String',
	        default: '#FFFFFFFF'
	    },
	    // 文字是否以3D模式显示
	    'text-used-3d': {
	        type: 'Boolean',
	        default: false
	    },
	    // 文字是否有连接线
	    'text-link-line': {
	        type: 'Boolean',
	        default: false
	    },
	    'text-scale': {
	        type: 'Number',
	        default: 1
	    },
	    // 文字翻滚角，目前不支持
	    'text-roll': {
	        type: 'Number',
	        default: 0
	    },
	    // 文字俯仰角，目前不支持
	    'text-pitch': {
	        type: 'Number',
	        default: 0
	    },
	    // 文字偏航角，目前支持
	    'text-heading': {
	        type: 'Number',
	        default: 0
	    },
	    // 不常用
	    'text-content': true,
	    // 文本遮挡剔除，不支持
	    'text-occlusion-cull': {
	        type: 'Boolean',
	        default: false
	    },
	    // 文本剔除高度，不支持
	    'text-occlusion-cull-altitude': {
	        type: 'Number',
	        default: 200000
	    },
	    // 不常用
	    'coverage-value': true,
	    // 最大可视距离
	    'max-visible-distance': {
	        type: 'Number',
	        default: -1
	    },
	    // 最小可视距离
	    'min-visible-distance': {
	        type: 'Number',
	        default: -1
	    },
	    // 最大可视相机高度
	    'max-visible-range': {
	        type: 'Number',
	        default: -1
	    },
	    // 最小可视距离相机高度
	    'min-visible-range': {
	        type: 'Number',
	        default: -1
	    },
	    // 特效大小
	    'effect-size': {
	        type: 'Number',
	        default: 32,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (Util.isStrNumber(value) || Number(value)) {
	                if (value >= 0) return true;else {
	                    var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, tag, 'effect-size', ' >=0 ', 'none', '1'));
	                }
	            } else {
	                var _tag14 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, _tag14, 'effect-size', this.type, this.default));
	                return false;
	            }
	        }
	    },
	    // 点特效频率
	    'effect-frequency': {
	        type: 'Number',
	        default: 1,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (Util.isStrNumber(value) || Number(value)) {
	                if (value >= 0) return true;else {
	                    var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, tag, 'effect-frequency', ' >=0 ', 'none', '1'));
	                }
	            } else {
	                var _tag15 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, _tag15, 'effect-frequency', this.type, this.default));
	                return false;
	            }
	        }
	    },
	    // 特效X轴偏移
	    'effect-offset-x': {
	        type: 'Number',
	        default: 0
	    },
	    // 特效Y轴偏移
	    'effect-offset-y': {
	        type: 'Number',
	        default: 0
	    },
	    // 特效次数
	    'effect-duration': {
	        type: 'Number',
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (Util.isStrNumber(value) || Number(value)) {
	                if (value >= 0) return true;else {
	                    var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, tag, 'effect-duration', ' >=0 ', 'none', '1'));
	                }
	            } else {
	                var _tag16 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, _tag16, 'effect-duration', this.type, this.default));
	                return false;
	            }
	        }
	    },
	    // 点特效模式
	    'effect-mode': {
	        type: 'GV.STYLEENUM',
	        default: _STYLEENUM2.default.POINT_EFFECT_MODE.FLICKER
	    },

	    // 点特效旋转方向
	    'rotation-direction': {
	        type: 'Boolean',
	        default: true,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	            if (typeof value !== 'boolean') {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, tag, 'rotation-direction', this.type, this.default));
	                return false;
	            }
	            return true;
	        }
	    },

	    // 点特效缩放模式
	    'scale-type': {
	        type: 'GV.STYLEENUM',
	        default: _STYLEENUM2.default.POINT_EFFECT_SCALE_MODE.LARGETOSMALL
	    },

	    'jb-color': {
	        type: 'String',
	        default: '#FF0000FF'
	    }, //军标颜色
	    'jb-scale': {
	        type: 'Number',
	        default: 1
	    }, //缩放比例
	    'jb-lining-color': {
	        type: 'String',
	        default: '#FF0000FF'
	    }, //军衬颜色
	    'jb-text-color': {
	        type: 'String',
	        default: '#FF0000FF'
	    }, //军标文字颜色
	    // 'jb-text-size': {
	    //     type: 'Number',
	    //     default: 50
	    // },
	    // 线的颜色
	    'jb-text-size': {
	        type: 'Number',
	        default: 50,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if ((Util.isStrNumber(value) || Number(value)) && value >= 0 && value <= 60) {
	                return true;
	            } else {
	                var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONE, tag, 'jb-text-size', '[0,60]', this.default));
	                return false;
	            }
	        }
	    }, //军标文字字体
	    'jb-text-font': {
	        type: 'String',
	        default: 'fonts/simhei.ttf'
	    }, //文字大小
	    'jb-text-rotation': {
	        type: 'Number',
	        default: 0
	    }, //文字旋转
	    // 'jb-text-position':true,                                    //文字位置
	    'jb-show-mode': {
	        type: 'Number',
	        default: 0
	    }, //军标显示模式
	    'jb-line-thickness': {
	        type: 'Number',
	        default: 100
	    }, //线军标厚度
	    'jb-line-type': {
	        type: 'GV.JB_LINE_TYPE',
	        default: _STYLEENUM2.default.JB_LINE_TYPE.SOLID
	    }, //线军标类型 
	    'jb-line-width': {
	        type: 'Number',
	        default: 1
	    }, //线军便线的宽度
	    //JBPoint_TST
	    'jb-angle': {
	        type: 'Number',
	        default: 180
	    }, //点标角度
	    'jb-erect': {
	        type: 'Boolean',
	        default: false
	    }, //三角军标是否直立
	    'jb-mode-type': {
	        type: 'Number',
	        default: 0
	    }, //三角军标类型、默认0
	    'jb-fill-color': {
	        type: 'String',
	        default: '#00FF00FF'
	    }, //填充颜色
	    'jb-color-begin': {
	        type: 'String',
	        default: '#FFFF00FF'
	    }, //渐变颜色
	    'jb-color-end': {
	        type: 'String',
	        default: '#FF0000FF'
	    }, //渐变颜色
	    'jb-lining-color-serif': {
	        type: 'String',
	        default: '#0000FFFF'
	    }, //衬线颜色
	    'jb-line-thickness-serif': {
	        type: 'Number',
	        default: 3000
	    }, //衬线厚度
	    'jb-line-width-serif': {
	        type: 'Number',
	        default: 4
	    }, //衬线宽度
	    'jb-line-type-serif': {
	        type: 'GV.JB_LINE_TYPE_SERIF',
	        default: 'solid'
	    }, //衬线类型
	    'jb-bis-serif': {
	        type: 'Boolean',
	        default: true
	    }, //是否添加衬颜
	    'jb-symbol-size': {
	        type: 'Number',
	        default: 200
	    }, //符号大小，单位：像素
	    //JBLine_TST,SingleArrow_Line 
	    'jb-topographic': {
	        type: 'Boolean',
	        default: false
	    }, //军标是否依地形线显示
	    'jb-add-height': {
	        type: 'Number',
	        default: 5000
	    }, //军标在三维中的附加高度
	    'jb-centain-thickness': {
	        type: 'Number',
	        default: 3000
	    }, //军标厚度    
	    'jb-bis-gradient-fill': {
	        type: 'Boolean',
	        default: true
	    }, //是否启用渐变填充
	    'jb-bis-visible': {
	        type: 'Boolean',
	        default: true
	    }, //显隐设置

	    //new jbMarking 基础
	    'mil-color': {
	        type: 'String',
	        default: '#FF0000FF'
	    }, //军标颜色
	    'mil-heading': {
	        type: 'Number',
	        default: 0
	    }, //点军标三维旋转heading
	    'mil-roll': {
	        type: 'Number',
	        default: 0
	    }, //点军标三维旋转roll
	    'mil-pitch': {
	        type: 'Number',
	        default: 0
	    }, //点军标三维旋转pitch
	    'mil-supplement-color': {
	        type: 'String',
	        default: '#FFFF00FF'
	    }, //军标衬色
	    'mil-line-type': {
	        type: 'GV.STYLEENUM',
	        default: _STYLEENUM2.default.JB_LINE_TYPE.SOLID
	    }, //线军标类型

	    //new jbMarking 绘制形态
	    'mil-render-mode': {
	        type: 'GV.STYLEENUM',
	        default: _STYLEENUM2.default.MIL_RENDER_MODE.RASTER
	    }, //绘制形态-栅格/矢量
	    'mil-size-mode': {
	        type: 'GV.STYLEENUM',
	        default: _STYLEENUM2.default.MIL_SIZE_MODE.SCREEN
	    }, //是否随地图缩放
	    'mil-size': {
	        type: 'Number',
	        default: 64,
	        check: function check(value, parentTag) {
	            if (value === undefined) return false;
	            if (Util.isStrNumber(value) || Number(value)) {
	                if (value >= 0) return true;else {
	                    var tag = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, tag, 'mil-size', ' >=0 ', 'none', '64'));
	                }
	            } else {
	                var _tag17 = parentTag === undefined || parentTag.tag === undefined ? 'style' : parentTag.tag + '-style';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, _tag17, 'mil-size', this.type, this.default));
	                return false;
	            }
	        }
	    }, //是否随地图缩放
	    'mil-fill-mode': {
	        type: 'GV.STYEENUM',
	        default: _STYLEENUM2.default.MIL_FILL_MODE.NONE
	    }, //是否启用渐变填充
	    'mil-gradient-color': {
	        type: 'String',
	        default: '#FF0000FF'
	    }, //渐变色
	    'mil-fill-color': {
	        type: 'String',
	        default: '#00FFFFFF'
	    }, //填充色
	    'mil-line-width': {
	        type: 'Number',
	        default: 5
	    }, //线宽
	    'mil-thickness': {
	        type: 'Number',
	        default: 20
	    }, //厚度
	    'mil-direction-mode': {
	        type: 'GV.STYLEENUM',
	        default: _STYLEENUM2.default.MIL_SIZE_MODE.OBJECT
	    }, //对齐面向屏幕、面向地形（点标）
	    'mil-extrusion': {
	        type: 'Boolean',
	        default: true
	    }, //是否拉伸到地面（线标）

	    //new jbMarking 文字
	    'mil-text-color': {
	        type: 'String',
	        default: '#FF0000FF'
	    }, //文字颜色
	    'mil-text-fill': {
	        type: 'String',
	        default: '#FFFF00FF'
	    }, //文字背景
	    'mil-text-size': {
	        type: 'Number',
	        default: 20
	    }, //文字大小
	    'mil-text-font': {
	        type: 'String',
	        default: 'fonts/simhei.ttf'
	    }, //文字字体
	    'mil-text-halo-color': {
	        type: 'String',
	        default: '#FF00FFFF' //文字边框色

	    } };

	exports.cssProperties = cssProperties;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "StyleData.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * 项目: gvml
	 * 文件: STYLEENUM.js
	 * 作者: 董波
	 * 部门: 产品研发中心
	 * 邮箱: dongb@geovis.com
	 * 日期: 2017-03-03 21:43:25.
	 * 用途: 样式枚举类
	 */

	/**
	 * @module global
	 */
	/**
	 * gvml样式枚举类
	 * @namespace GV
	 * @class STYLEENUM
	 */
	exports.default = {
	    /**
	    * <pre>
	    * NONE：没有地形锁定
	    * TERRAIN：忽略Z值进行地形锁定
	    * ABSOLUTE：是指高度计算方法采用绝对高度值。
	    *           绝对高度值指的是你所输入的高度值是相对地球海平面的高度，
	    *           与当前点的地形高度无关，就是本点的实际高度。大于零的值
	    *           表示在海平面之上（可能会被地形遮挡），小于零的值表示在
	    *           海平面之下（直接被地球遮挡）
	    * 
	    * RELATIVE：表示高度计算方法采用相对高度值，相对高度值指的是你输入
	    *           的高度值只是一个相对值，实际高度是当前点的地形高度加上
	    *           这个相对高度的总和。大于零的值表示在地面以上（不会被地
	    *           形遮挡），小于零的值表示在地底下（被地形遮挡）
	    * 
	    * RELATIVE_GPU：（与altitude-technique结合的枚举）
	    * TERRAIN_DRAPE: 忽略Z值进行地形锁定, 使用投影纹理贴地，像在地形上铺了一层地毯
	    * TERRAIN_GPU: 忽略Z值进行地形锁定, 在gpu上贴地
	    * TERRAIN_SCENE: 重新夹紧几何图形到新分页的图块上 (仅适用于注记)
	    * </pre>
	    */

	    ALTITUDE_CLAMPING: {
	        NONE: 'none',
	        TERRAIN: 'terrain',
	        ABSOLUTE: 'absolute',
	        RELATIVE: 'relative',
	        RELATIVE_GPU: 'relative-gpu',
	        TERRAIN_DRAPE: 'terrain-drape',
	        TERRAIN_GPU: 'terrain-gpu',
	        RELATIVE_SCENE: 'terrain-scene',
	        TERRAIN_SCENE: 'relative-scene'
	    },

	    /**
	     * 贴地方法(一般在ALTITUDE_CLAMPING中已包含)
	     * @property ALTITUDE_TECHNIQUE
	     * @description 贴地方法 <br>
	     * <pre>
	     * MAP:  几何图形紧贴到地图上的高程数据
	     * SCENE: 重新夹紧几何图形到新分页的图块上 (仅适用于注记)
	     * GPU:  在GPU上把几何图形紧贴到地形上
	     * DRAPE: 用投影纹理紧贴几何图形地图上的高程数据
	     * </pre>
	     */
	    ALTITUDE_TECHNIQUE: {
	        MAP: 'map',
	        SCENE: 'scene',
	        GPU: 'gpu',
	        DRAPE: 'drape'
	    },

	    //altitude-binding
	    ALTITUDE_BINDING: {
	        VERTEX: 'vertex',
	        CENTROID: 'centroid'
	    },

	    /**
	     * 点特效模式
	     * @property EFFECT_MODE
	     * @description 特效模式 <br>
	     * <pre>
	     * FLICKER: 闪烁
	     * ROTATE: 旋转
	     * SCALE: 缩放
	     * </pre>
	     */
	    EFFECT_MODE: {
	        FLICKER: 'flicker',
	        ROTATE: 'rotate',
	        SCALE: 'scale'
	    },

	    /**
	     * 图片对其方式
	     * @property ICON_ALIGN
	     */
	    ICON_ALIGN: {
	        LEFT_TOP: 'left-top',
	        LEFT_CENTER: 'left-center',
	        LEFT_BOTTOM: 'left-bottom',

	        CENTER_TOP: 'center-top',
	        CENTER_CENTER: 'center-center',
	        CENTER_BOTTOM: 'center-bottom',

	        RIGHT_TOP: 'right-top',
	        RIGHT_CENTER: 'right-center',
	        RIGHT_BOTTOM: 'right-bottom'
	    },

	    /**
	     * icon显示模式
	     * @property ICON_MODE
	     * @description
	     * <pre>
	     *     SPIRIT_SIZE:   固定屏幕像素大小，跟随视角旋转
	     *     NO_SPIRIT_SIZE: 固定屏幕像素大小，不跟随视角旋转
	     *     BILLBOARD_NO_ROTATE: 固定实际大小，跟随视角旋转
	     *     LOCAL_ELEMENT: 固定实际大小，不跟随视角旋转
	     *     FRONT_ALWAYS:
	     * 
	     *     关于图片大小计算原则
	     *     当iconMode为SPIRIT_SIZE，NO_SPIRIT_SIZE时单位为像素
	     *     当iconMode为BILLBOARD_NO_ROTATE，LOCAL_ELEMENT，FRONT_ALWAYS时
	     *           icon的真实宽度 = scale * size * 图片宽度（像素）
	     *           icon的真实高度 = scale * size * 图片高度（像素）
	     *           计算结果单位是米
	     * </pre>
	     */
	    ICON_MODE: {
	        SPIRIT_SIZE: 'spirit',
	        NO_SPIRIT_SIZE: 'not-spirit',
	        BILLBOARD_NO_ROTATE: 'billboard-not-rotate',
	        LOCAL_ELEMENT: 'local-element',
	        FRONT_ALWAYS: 'front-always'
	    },

	    //icon-placement
	    ICON_PLACEMENT: {
	        VERTEX: 'vertex',
	        INTERVAL: 'interval',
	        RANDOM: 'random',
	        CENTROID: 'centroid'
	    },

	    /**
	     * 军标文字位置枚举
	     * @property JB_TEXT_POSITION
	     */
	    JB_TEXT_POSITION: {
	        LINE_UP: 'line-up',
	        LINE_MIDDLE: 'line-middle',
	        LINE_DOWN: 'line-down'
	    },

	    /**
	     * 军标线显示模式
	     * @property JB_LINE_TYPE
	     * @description <br>
	     * <pre>
	     * SOLID:实线
	     * DASHED:虚线
	     * </pre>
	     * 
	     */
	    JB_LINE_TYPE: {
	        SOLID: 'solid',
	        DASHED: 'dashed'
	    },
	    // 衬线类型
	    JB_LINE_TYPE_SERIF: {
	        SOLID: 'solid',
	        DASHED: 'dashed'
	    },

	    /**
	     * 新军标绘制形态模式
	     * @property MIL_RENDER_MODE 
	     * @description <br>
	     * <pre>
	     *  RASTER: 栅格形态
	     *  VECTOR: 矢量形态
	     * </pre>
	     */
	    MIL_RENDER_MODE: {
	        RASTER: 'raster',
	        VECTOR: 'vector'
	    },

	    /**
	     * 新军标是否随地图缩放
	     * @property MIL_SIZE_MODE 
	     * @description <br>
	     * <pre>
	     *  OBJECT: 
	     *  SCREEN: 矢量形态
	     * </pre>
	     */
	    MIL_SIZE_MODE: {
	        OBJECT: 'object',
	        SCREEN: 'screen'
	    },

	    /**
	     * 新军标是否启用渐变填充
	     * @property MIL_FILL_MODE 
	     * @description <br>
	     * <pre>
	     *  NONE: 
	     *  SOLID: 
	     *  GRADIENT:
	     *  PATTERN:
	     * </pre>
	     */
	    MIL_FILL_MODE: {
	        NONE: 'none',
	        SOLID: 'solid',
	        GRADIENT: 'gradient',
	        PATTERN: 'pattern'
	    },

	    /**
	     * 几何体显示模式
	     * @property MESH_MODE 
	     * @description <br>
	     * <pre>
	     *  LINE: 线显示
	     *  FILL: 面显示
	     * </pre>
	     */
	    MESH_MODE: {
	        LINE: 'line',
	        FILL: 'fill'
	    },

	    /**
	     * 线段连接处的样式（线段连接的样式，在stroke-width不是以像素为单位时生效）
	     * @property STROKE_LINEJOIN
	     * @description <br>
	     * <pre>
	     * MITER:斜接
	     * ROUND:圆接
	     * </pre>
	     */
	    STROKE_LINEJOIN: {
	        MITER: 'miter',
	        ROUND: 'round'
	    },

	    /**
	     * 线段的端点的样式（在stroke-width不是以像素为单位时生效）
	     * @property STROKE_LINECAP
	     * @description <br>
	     * <pre>
	     * SQUARE
	     * FLAT 平的
	     * ROUND 圆的
	     * </pre>
	     */
	    STROKE_LINECAP: {
	        SQUARE: 'square',
	        FLAT: 'flat',
	        ROUND: 'round'
	    },

	    /**
	     * mesh对象绘制方式
	     * @property {String} DRAWABLETYPE
	     * @description 绘制方式类型: <br>
	     *      <pre>
	     *          POINTS: 点绘制
	     *          LINES: 每两个点构成一条线
	     *          LINE_LOOP: 所有点依次连接，最后的点连接初始点形成封闭的线
	     *          LINE_STRIP: 所有点依次连接
	     *          TRIANGLES: 每三个顶点绘制一个三角形
	     *          TRIANGLE_STRIP: 构建当前三角形的顶点的连接顺序依赖于要和前面已经出现过的2个顶点组成三角形的当前顶点的序号的奇偶性（如果从0开始）: 
	                                如果当前顶点是奇数: 
	                                组成三角形的顶点排列顺序: T = [n-1 n-2 n].
	                                如果当前顶点是偶数: 
	                                组成三角形的顶点排列顺序: T = [n-2 n-1 n].
	     *          TRIANGLE_FAN: GL_TRIANGLE_FAN与GL_TRIANGLE_STRIP类似，不过它的三角形的顶点排列顺序是
	     *                          T = [0 n-1 n].各三角形形成一个扇形序列
	     *          QUADS: 每四个点构成一个四边形
	     *          QUAD_STRIP: 同TRIANGLE_STRIP类似T= [n-2 n-3 n-1 n] n为大于1的奇数（3，5，7，..）
	     *          POLYGON: 所有点依次连接构成多边形
	     *      </pre>
	     * @static
	     * @final
	     */
	    DRAWABLETYPE: {
	        POINTS: 'POINTS',
	        LINES: 'LINES',
	        LINE_LOOP: 'LINE_LOOP',
	        LINE_STRIP: 'LINE_STRIP',
	        TRIANGLES: 'TRIANGLES',
	        TRIANGLE_STRIP: 'TRIANGLE_STRIP',
	        TRIANGLE_FAN: 'TRIANGLE_FAN',
	        QUADS: 'QUADS',
	        QUAD_STRIP: 'QUAD_STRIP',
	        POLYGON: 'POLYGON'
	    },

	    /**
	     * 广告牌数据类型
	     * @property {String} 
	     */
	    BUBBLETYPE: {
	        SCREEN_BUBBLE: 'SCREEN_BUBBLE',
	        GEO_BUBBLE: 'GEO_BUBBLE'
	    },

	    /**
	     * 本文对齐方式
	     * @property {String} TEXT_ALIGN_MENT
	     * @description 文本对齐方式类型: <br>
	     *      <pre>
	     *          LEFT_TOP: 左上角
	     *          LEFT_CENTER: 左中
	     *          LEFT_BOTTOM: 左下角
	     *          CENTER_TOP: 中上
	     *          CENTER_CENTER: 中中
	     *          CENTER_BOTTOM: 中下
	     *          RIGHT_TOP: 右上角,
	     *          RIGHT_CENTER: 右中,
	     *          RIGHT_BOTTOM: 右下角,
	     *          LEFT_BASE_LINE: 
	     *          CENTER_BASE_LINE: 
	     *          RIGHT_BASE_LINE: 
	     *          LEFT_BOTTOM_BASE_LINE：
	     *          CENTER_BOTTOM_BASE_LINE：
	     *          RIGHT_BOTTOM_BASE_LINE：
	     *          BASE_LINE：
	     *      </pre>
	     * @static
	     * @final
	     */
	    TEXT_ALIGN_MENT: {
	        LEFT_TOP: 'left-top',
	        LEFT_CENTER: 'left-center',
	        LEFT_BOTTOM: 'left-bottom',

	        CENTER_TOP: 'center-top',
	        CENTER_CENTER: 'center-center',
	        CENTER_BOTTOM: 'center-bottom',

	        RIGHT_TOP: 'right-top',
	        RIGHT_CENTER: 'right-center',
	        RIGHT_BOTTOM: 'right-bottom',

	        LEFT_BASE_LINE: 'left-base-line',
	        CENTER_BASE_LINE: 'center-base-line',
	        RIGHT_BASE_LINE: 'right-base-line',

	        LEFT_BOTTOM_BASE_LINE: 'left-bottom-base-line',
	        CENTER_BOTTOM_BASE_LINE: 'center-bottom-base-line',
	        RIGHT_BOTTOM_BASE_LINE: 'right-bottom-base-line'
	        // BASE_LINE: 'base-line'    // 与'left-base-line'一致
	    },

	    //字体边框样式
	    TEXT_HALO_BACKDROP_TYPE: {
	        RIGHT_BOTTOM: 'right-bottom',
	        RIGHT_CENTER: 'right-center',
	        RIGHT_TOP: 'right-top',
	        CENTER_BOTTOM: 'center-bottom',
	        CENTER_TOP: 'center-top',
	        LEFT_BOTTOM: 'left-bottom',
	        LEFT_CENTER: 'left-center',
	        LEFT_TOP: 'left-top',
	        OUT_LINE: 'outline',
	        NONE: 'NONE'
	    },

	    //字体边框样式偏移
	    TEXT_HALO_IMPLEMENTATION: {
	        POLYGON_OFFSET: 'polygon-offset',
	        NO_DEPTHh_BUFFER: 'no-depth-buffer',
	        DEPTH_RANGE: 'depth-range',
	        STENCIL_BUFFER: 'stencil-buffer',
	        DELAYED_DEPTH_WRITES: 'delayed-depth-writes'
	    },

	    /**
	     * 文本布局方式
	     * @property {String} TEXT_LAYOUT
	     * @description 文本布局方式类型: <br>
	     *      <pre>
	     *          LTR: 从左至右
	     *          RTL: 从右至左
	     *          VERTICAL: 垂直排列
	     *      </pre>
	     * @static
	     * @final
	     */
	    TEXT_LAYOUT: {
	        LTR: 'ltr',
	        RTL: 'rtl',
	        VERTICAL: 'vertical'
	    },

	    /**
	     * 文本编码方式
	     * @property {String} ENCODING
	     * @description 文本编码方式类型: <br>
	     *      <pre>
	     *          UTF_8
	     *          UTF_16
	     *          UTF_32
	     *          ASCII
	     *      </pre>
	     * @static
	     * @final
	     */
	    ENCODING: {
	        UTF_8: 'utf-8',
	        UTF_16: 'utf-16',
	        UTF_32: 'utf-32',
	        ASCII: 'ascii'
	    },

	    /**
	     * 文本轴对齐方式
	     * @property {String} TEXT_AXIS_ALIGN_MENT
	     * @description 文本对齐类型: <br>
	     *      <pre>
	     *          XY_PLANE：文本位于XY平面
	     *          REVERSED_XY_PLANE： 文本位于XY平面，翻转
	     *          XZ_PLANE： 文本位于XZ平面
	     *          REVERSED_XZ_PLANE: 文本位于XZ平面，翻转
	     *          YZ_PLANE: 文本位于YZ平面
	     *          REVERSED_YZ_PLANE: 文本位于YZ平面，翻转
	     *          SCREEN: 文本始终朝向屏幕
	     *          USER_DEFINED_ROTATION：
	     *      </pre>
	     * @static
	     * @final
	     */
	    TEXT_AXIS_ALIGN_MENT: {
	        XY_PLANE: 'xy-plane',
	        REVERSED_XY_PLANE: 'reversed-xy-plane',
	        XZ_PLANE: 'xz-plane',
	        REVERSED_XZ_PLANE: 'reversed-xz-plane',
	        YZ_PLANE: 'yz-plane',
	        REVERSED_YZ_PLANE: 'reversed-yz-plane',
	        SCREEN: 'screen',
	        USER_DEFINED_ROTATION: 'user-defined-rotation'
	    },

	    /**
	     * 文本显示模式
	     * @property {String} TEXT_CHARACTER_SIZE_MODE
	     * @description 文本显示类型: <br>
	     *      <pre>
	     *          OBJECT_COORDS：实际坐标
	     *          SCREEN_COORDS：屏幕坐标
	     *          OBJECT_COORDS_WITH_MAXIMUM_SCREEN_SIZE_CAPPED_BY_FONT_HEIGHT：
	     *      </pre>
	     * @static
	     * @final
	     */
	    TEXT_CHARACTER_SIZE_MODE: {
	        OBJECT_COORDS: 'object-coords',
	        SCREEN_COORDS: 'screen-coords',
	        OBJECT_COORDS_WITH_MAXIMUM_SCREEN_SIZE_CAPPED_BY_FONT_HEIGHT: 'object-screen-coords'
	    },

	    /**
	     * 文本渐变模式
	     * @property {String} TEXT_GRADIENT
	     * @description 文本渐变类型: <br>
	     *      <pre>
	     *          SOLID： 无渐变
	     *          PERCHARACTER：以字符为单位渐变
	     *          OVERALL：全局渐变
	     *      </pre>
	     * @static
	     * @final
	     */
	    TEXT_GRADIENT: {
	        SOLID: 'solid',
	        PERCHARACTER: 'per-character',
	        OVERALL: 'overall'
	    },

	    /**
	     * 点特效模式
	     * @property {String} POINTEFFECTMODE
	     * @description 点特效类型: <br>
	     *      <pre>
	     *          FLICKER：闪烁
	     *          ROTATE：旋转
	     *          SCALE：作坊
	     *      </pre>
	     * @static
	     * @final
	     */
	    POINT_EFFECT_MODE: {
	        FLICKER: 'flicker',
	        ROTATE: 'rotate',
	        SCALE: 'scale'
	    },

	    /**
	     * 点特效缩放模式
	     * @property {String} POINTEFFECTSCALEMODE
	     * @description 点特效类型: <br>
	     *      <pre>
	     *          LARGETOSMALL：由大比那小
	     *          ROTATE：由小变大
	     *          SCALE：循环
	     *      </pre>
	     * @static
	     * @final
	     */
	    POINT_EFFECT_SCALE_MODE: {
	        LARGETOSMALL: 'large-to-small',
	        SMALLTOLARGE: 'small-to-large',
	        LOOPSCALE: 'loop-scale'
	    },

	    MODEL_PLACEMENT: {
	        VERTEX: 'vertex',
	        INTERVAL: 'interval',
	        RANDOM: 'random',
	        CENTROID: 'centroid'
	    }

	};

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "STYLEENUM.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gv5_gvml
	 * 文件：NodeProperties.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2017-05-02 16:23:12.
	 * 用途：类
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	var nodeProps = new Map();

	var NodeProperties = function () {
	    function NodeProperties() {
	        _classCallCheck(this, NodeProperties);
	    }

	    _createClass(NodeProperties, null, [{
	        key: 'getPro',
	        value: function getPro(name) {
	            if (!nodeProps.has(name)) {
	                nodeProps.set(name, Util.aAToa_a(name));
	            }
	            return nodeProps.get(name);
	        }
	    }]);

	    return NodeProperties;
	}();

	exports.default = NodeProperties;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "NodeProperties.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Place.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：点符号类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 点符号
	 * @namespace GV
	 * @extends GV.PositionBaseNode
	 * @class Place
	 * @constructor
	 * @param {Json} [params] 参数
	 * @show true
	 */
	var Place = function (_PositionBaseNode) {
	    _inherits(Place, _PositionBaseNode);

	    function Place() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, Place);

	        return _possibleConstructorReturn(this, (Place.__proto__ || Object.getPrototypeOf(Place)).call(this, params));
	    }

	    _createClass(Place, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            _get(Place.prototype.__proto__ || Object.getPrototypeOf(Place.prototype), '_callBack', this).call(this, msg);
	        }

	        /**
	         * @property style
	         * @description 支持的样式类型及默认值: <br>
	         *      <pre>
	         *   'max-visible-distance': -1,                                      //最大可是距离
	         *   'min-visible-distance': -1,                                                  //最小可是距离
	         *   'min-visible-range': -1,                    //最小可视相机高度
	         *   'max-visible-range': -1,                    //最大可视相机高度
	         *   'text-color': '#FFFFFFFF',                                                  //字体颜色
	         *   'text-fill': '#FFFFFF',                                                     //字体填充颜色
	         *   'text-fill-opacity': 1,                                                     //字体填充不透明度
	         *   'text-size': 50,                                                            //字体大小，单位是像素值或者实际大小，默认为10像素
	         *   'text-font': 'STXINGKA.ttf',                                            //字体样式
	         *   'text-declutter': false,                                                    //text重叠时是否自动切割(免费版该属性无效)
	         *   'text-offset-x': 0,                                                      //字体x轴偏移距离
	         *   'text-offset-y': 0,                                                      //字体y轴偏移距离
	         *   'text-align': GV.TEXT_ALIGN_MENT.CENTER_CENTER,                                 //文本对齐方式
	         *   'text-layout': GV.TEXT_LAYOUT.LTR,                                         //文本布局方式
	         *   'text-halo-show': true,                                            //是否显示边框
	        *    'text-halo-color': '#FF00000FF',                                   //文字边框颜色
	         *      </pre>
	         * 
	         */

	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Place;
	        }

	        /**
	         * 图标;
	         * @property url
	         * @type {String}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            this._url = url;
	            this._updateProperty('url');
	        },
	        get: function get() {
	            return this._url;
	        }

	        /**
	         * 文字内容
	         * @property text
	         * @type {String}
	         */

	    }, {
	        key: 'text',
	        get: function get() {
	            return this._text;
	        },
	        set: function set(text) {
	            this._text = text;
	            this._updateProperty('text');
	        }
	    }]);

	    return Place;
	}(_PositionBaseNode3.default);

	exports.default = Place;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Place.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：NeedPositionNode.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2017-04-06 15:32:05.
	 * 用途：点位置信息的Node类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Node2 = __webpack_require__(61);

	var _Node3 = _interopRequireDefault(_Node2);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _Position = __webpack_require__(68);

	var _Position2 = _interopRequireDefault(_Position);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 抽象位置基类，不能直接初始化。
	 *      <pre>图标、文字、点符号、高级几何体等对象继承该对象</pre>
	 * @module node
	 * @namespace GV
	 * @extends GV.Node
	 * @class PositionBaseNode
	 * @abstract
	 */
	var PositionBaseNode = function (_Node) {
	    _inherits(PositionBaseNode, _Node);

	    function PositionBaseNode(params) {
	        _classCallCheck(this, PositionBaseNode);

	        var _this = _possibleConstructorReturn(this, (PositionBaseNode.__proto__ || Object.getPrototypeOf(PositionBaseNode)).call(this, params));

	        _this._bindChildren = [];
	        return _this;
	    }

	    /**
	     * 位置
	     * @property position
	     * @param {Object}
	     * @description {lon: 经度, lat: 纬度, alt: 高度}
	     */

	    _createClass(PositionBaseNode, [{
	        key: '_pushChild',
	        value: function _pushChild(node) {
	            this._bindChildren.push(node);
	        }
	    }, {
	        key: 'position',
	        set: function set(position) {
	            if (Util.$.isPlainObject(position) && Util.$.isFunction(position.toJSON)) {
	                position = position.toJSON();
	            }
	            if (Util.isJson(position)) {
	                this._position = new _Position2.default(position, this);
	                this._updateProperty('position');
	            }
	            if (this._bindChildren && this._bindChildren.length > 0) {
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = this._bindChildren[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var child = _step.value;

	                        child.position = position;
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	            }
	        },
	        get: function get() {
	            return this._position ? this._position.toJSON() : null;
	        }
	    }]);

	    return PositionBaseNode;
	}(_Node3.default);

	exports.default = PositionBaseNode;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "PositionBaseNode.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Bubble.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：类
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Util = __webpack_require__(6);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
	    if (key in obj) {
	        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	    } else {
	        obj[key] = value;
	    }return obj;
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	var Position = function () {
	    function Position() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        var parent = arguments[1];

	        _classCallCheck(this, Position);

	        this._lon = params.long || params.lon || params.x;
	        this._lat = params.lat || params.y;

	        this._alt = params.alt || params.z;

	        if (params.mode) this._mode = params.mode;
	        this.parent = parent;
	    }

	    _createClass(Position, [{
	        key: '_updateParent',
	        value: function _updateParent() {
	            if (this.parent) {
	                this.parent.position = this;
	            }
	        }
	    }, {
	        key: 'toJSON',
	        value: function toJSON() {
	            return {
	                lat: this.lat,
	                lon: this.lon,
	                alt: this.alt,
	                mode: this.mode
	            };
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var tempMode = '';
	            if (this.mode) tempMode = '<mode>' + this.mode + '</mode>';
	            return '<' + this.tag + '><lat>' + this.lat + '</lat><lon>' + this.lon + '</lon><alt>' + this.alt + '</alt>' + tempMode + '</' + this.tag + '>';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var obj = {
	                lat: this.lat,
	                lon: this.lon,
	                alt: this.alt,
	                mode: this.mode
	            };

	            return _defineProperty({}, this.tag, obj);
	        }
	    }, {
	        key: 'alt',
	        set: function set(alt) {
	            if (alt !== this.alt) {
	                this._alt = alt;
	                this._updateParent();
	            }
	        },
	        get: function get() {
	            return this._alt || 0;
	        }
	    }, {
	        key: 'lat',
	        set: function set(lat) {
	            if (lat !== this.lat) {
	                this._lat = lat;
	                this._updateParent();
	            }
	        },
	        get: function get() {
	            return this._lat || 0;
	        }
	    }, {
	        key: 'lon',
	        set: function set(lon) {
	            if (lon !== this.lon) {
	                this._lon = lon;
	                this._updateParent();
	            }
	        },
	        get: function get() {
	            return this._lon || 0;
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Position;
	        }
	    }, {
	        key: 'mode',
	        set: function set(mode) {
	            if (mode !== this.mode) {
	                this._mode = mode;
	                this._updateParent();
	            }
	        },
	        get: function get() {
	            return this._mode;
	        }
	    }]);

	    return Position;
	}();

	exports.default = Position;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Position.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Bubble.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Node2 = __webpack_require__(61);

	var _Node3 = _interopRequireDefault(_Node2);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Vertices = __webpack_require__(70);

	var _Vertices2 = _interopRequireDefault(_Vertices);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */

	/**
	 * 矢量基础标会
	 * @namespace GV
	 * @extends GV.Node
	 * @class GeometryNode
	 * @constructor
	 * @abstract
	 * @show true
	 */
	var GeometryNode = function (_Node) {
	    _inherits(GeometryNode, _Node);

	    function GeometryNode() {
	        _classCallCheck(this, GeometryNode);

	        return _possibleConstructorReturn(this, (GeometryNode.__proto__ || Object.getPrototypeOf(GeometryNode)).apply(this, arguments));
	    }

	    _createClass(GeometryNode, [{
	        key: 'getPoint',

	        /**
	         * 根据折点索引获取折点
	         * @method getPoint
	         * @param index {Number} 索引位置>-1
	         * @return {Array} 折点
	         */
	        value: function getPoint(index) {
	            if (this._vertices) return this._vertices.getPoint(index);
	            return undefined;
	        }

	        /**
	         * 获取所有折点
	         * @method getPoints
	         * @return {Array} 顶点坐标数组
	         */

	    }, {
	        key: 'getPoints',
	        value: function getPoints() {
	            if (this._vertices) return this._vertices.getPoints();
	            return undefined;
	        }

	        /**
	         * 获取折点个数
	         * @method getPointCount
	         * @return {Number} 折点个数
	         */

	    }, {
	        key: 'getPointCount',
	        value: function getPointCount() {
	            if (this._vertices) return this._vertices.length;
	            return undefined;
	        }

	        /**
	         * 设置线的所有折点
	         * @method setPoints
	         * @param points {Array} 折点数组
	         */

	    }, {
	        key: 'setPoints',
	        value: function setPoints(points) {
	            this.vertices = points;
	        }

	        /**
	         * 修改指定索引下的顶点值
	         * @method revisePoint
	         * @param index {Number} 索引位置>-1
	         * @param point {Array} [lon,lat,alt]点
	         */

	    }, {
	        key: 'revisePoint',
	        value: function revisePoint(index, point) {
	            if (!this._vertices) return;
	            this._vertices.revise(index, point);
	        }

	        /**
	         * 移除制定位置折点
	         * @method removePoint
	         * @param index {Number} 折点索引
	         */

	    }, {
	        key: 'removePoint',
	        value: function removePoint(index) {
	            if (!this._vertices) return;
	            this._vertices.remove(index);
	        }

	        /**
	         * 添加一个或多个末尾折点
	         * @method addPoints
	         * @param point {Array} [lon, lat, alt]点
	         */

	    }, {
	        key: 'addPoints',
	        value: function addPoints(point) {
	            if (!this._vertices) return;
	            this._vertices.add(point);
	        }

	        /**
	         * 在指定位置添加一个折点
	         * @method insertPoint
	         * @param index {Number} 索引位置>-1
	         * @param point {Array} [lon, lat, alt]点
	         */

	    }, {
	        key: 'insertPoint',
	        value: function insertPoint(index, point) {
	            if (!this._vertices) return;
	            this._vertices.insert(index, point);
	        }
	    }, {
	        key: 'vertices',

	        /**
	         * 设置几何要素
	         * @property vertices
	         * @default true;
	         */
	        set: function set(vertices) {
	            this._vertices = new _Vertices2.default(vertices, this);
	            this._updateProperty('vertices');
	        },
	        get: function get() {
	            return this._vertices;
	        }

	        /**
	         * 地理坐标范围
	         * 
	         * {GV.GeoExtent}
	         * 
	         */

	    }, {
	        key: 'extent',
	        get: function get() {
	            return null;
	        }
	    }]);

	    return GeometryNode;
	}(_Node3.default);

	exports.default = GeometryNode;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "GeometryNode.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Vertices.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-05-19 16:14:16
	 * 用途：储存顶点数据的数组
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	/**
	 * 储存mesh基础数据的类
	 * @module node
	 * @class vertices
	 */
	var Vertices = function () {
	    function Vertices() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	        var parent = arguments[1];

	        _classCallCheck(this, Vertices);

	        if (params instanceof Array) {
	            if (!(params[0] instanceof Array)) {
	                var temp = [];
	                temp.push(params);
	                params = temp;
	            }
	            this._vertices = params;
	            this._parent = parent;
	        } else {
	            this._vertices = Util.strToArray(params);
	            this._parent = parent;
	        }
	    }

	    _createClass(Vertices, [{
	        key: 'getPoints',
	        value: function getPoints() {
	            return this._vertices;
	        }
	    }, {
	        key: 'getPoint',
	        value: function getPoint(index) {
	            if (index === undefined || index < 0 || !this._vertices || this._vertices.length <= index) return undefined;
	            return this._vertices[index];
	        }
	    }, {
	        key: 'insert',
	        value: function insert(index, data) {
	            if (!this._vertices || index < 0 || index > this._vertices.length || index === undefined || data === undefined) return;
	            this._vertices.splice(index, 0, data);

	            if (this._parent) this._parent._changePoints({ type: 'insert', index: index, data: Util.arrayToStr([data]) });
	        }
	    }, {
	        key: 'revise',
	        value: function revise(index, data) {
	            if (!this._vertices || index === undefined || data === undefined || index >= this._vertices.length || index < 0) return;
	            this._vertices.splice(index, 1, data);
	            if (this._parent) this._parent._changePoints({ type: 'revise', index: index, data: Util.arrayToStr([data]) });
	        }
	    }, {
	        key: 'add',
	        value: function add(datas) {
	            if (!this._vertices || datas === undefined) return;

	            if (!(datas instanceof Array) || datas.length === 0) return;

	            if (!(datas[0] instanceof Array)) datas = [datas];

	            var that = this;
	            datas.forEach(function (value) {
	                that._vertices.push(value);
	            });

	            if (this._parent) this._parent._changePoints({ type: 'add', data: Util.arrayToStr(datas) });
	        }
	    }, {
	        key: 'remove',
	        value: function remove(index) {
	            if (!this._vertices || index < 0) return;

	            this._vertices.splice(index, 1);
	            if (this._parent) this._parent._changePoints({ type: 'remove', index: index });
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var innerXML = '<vertices>' + Util.arrayToStr(this._vertices) + '</vertices>';
	            return innerXML;
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            return { vertices: Util.arrayToStr(this._vertices) };
	        }
	    }, {
	        key: 'toString',
	        value: function toString() {
	            return Util.arrayToStr(this._vertices);
	        }
	    }, {
	        key: 'length',
	        get: function get() {
	            if (this._vertices) return this._vertices.length;
	            return undefined;
	        }
	    }]);

	    return Vertices;
	}();

	exports.default = Vertices;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Vertices.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Label.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-03-27 15:14:16
	 * 用途：文字类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _Gradient = __webpack_require__(72);

	var _Gradient2 = _interopRequireDefault(_Gradient);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 文字(免费版无该标绘实体)
	 * @namespace GV
	 * @extends GV.PositionBaseNode
	 * @class Label
	 * @constructor
	 * @param {Json} [params] 参数
	 */
	var Label = function (_PositionBaseNode) {
	    _inherits(Label, _PositionBaseNode);

	    function Label() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, Label);

	        return _possibleConstructorReturn(this, (Label.__proto__ || Object.getPrototypeOf(Label)).call(this, params));
	    }

	    _createClass(Label, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            _get(Label.prototype.__proto__ || Object.getPrototypeOf(Label.prototype), '_callBack', this).call(this, msg);
	            // switch (msg) {
	            // }
	        }

	        /**
	         * @property style
	         * @description 支持的样式类型及默认值: <br>
	         * <pre>
	            'max-visible-distance': -1,                                      //最大可是距离
	            'min-visible-distance': -1,                                                  //最小可是距离
	             'min-visible-range': -1,                    //最小可视相机高度
	            'max-visible-range': -1,                    //最大可视相机高度
	            'render-lighting': false,                                                   //是否开启渲染灯光
	            'text-color': '#FFFFFFFF',                                                  //字体颜色
	            'text-size': 50,                                                            //字体大小，单位是像素值或者实际大小，默认为10像素
	            'text-font': 'STXINGKA.ttf',                                            //字体样式
	            'text-halo-show': false,                                                    //是否显示边框
	            'text-halo': '#FF0000FF',                                                   //字体边框颜色
	            'text-halo-color': '#FF0000FF',                                             //字体边框颜色
	            'text-halo-fill': false,                                                    //是否对边框填充
	            'text-align': StyleEnum.TEXT_ALIGN_MENT.CENTER_CENTER,                                 //文本对齐方式
	            'text-layout': StyleEnum.TEXT_LAYOUT.LTR,                                         //文本布局方式
	            'text-axis-alignment': StyleEnum.TEXT_AXIS_ALIGN_MENT.SCREEN,                       //轴对齐方式
	            'text-character-size-mode': StyleEnum.TEXT_CHARACTER_SIZE_MODE.SCREEN_COORDS,           //大小模式
	            'text-gradient': StyleEnum.TEXT_GRADIENT.SOLID,                                   //渐变模式
	            'text-gradient-ltcolor': '#FFFFFFFF',                                       //左上角颜色
	            'text-gradient-rtcolor': '#FFFFFFFF',                                       //右下角颜色
	            'text-gradient-lbcolor': '#FF0000FF',                                       //左下角颜色
	            'text-gradient-rbcolor': '#FF0000FF',                                       //右下角颜色
	            'text-used-3d': false,                                                      //是否3D显示
	            'text-scale': 1
	            'text-roll': 0,
	            'text-pitch': 0,
	            'text-heading': 0
	         * </pre>
	         * 
	         */

	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Label;
	        }

	        /**
	         * 文字内容
	         * @property text
	         * @type {String}
	         */

	    }, {
	        key: 'text',
	        set: function set(text) {
	            this._text = text;
	            this._updateProperty('text');
	        },
	        get: function get() {
	            return this._text;
	        }
	    }]);

	    return Label;
	}(_PositionBaseNode3.default);

	exports.default = Label;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Label.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Gradient.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-07-28 15:14:16
	 * 用途：类
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	var Gradient = function () {
	    function Gradient() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	        var parent = arguments[1];

	        _classCallCheck(this, Gradient);

	        this.mode = params.mode;
	        this.leftBottom = params.leftBottom;
	        this.leftTop = params.leftTop;
	        this.rightBottom = params.rightBottom;
	        this.rightTop = params.rightTop;

	        this.parent = parent;
	    }

	    _createClass(Gradient, [{
	        key: 'toJSON',
	        value: function toJSON() {
	            return {
	                mode: this.lat,
	                leftBottom: this.leftBottom,
	                leftTop: this.leftTop,
	                rightBottom: this.rightBottom,
	                rightTop: this.rightTop
	            };
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            return '<gradient>\n        <gradient_mode>' + this.mode + '</gradient_mode>\n        <gradient_left_top_color>' + this.leftTop + '</gradient_left_top_color>\n        <gradient_left_bottom_color>' + this.leftBottom + '</gradient_left_bottom_color>\n        <gradient_right_top_color>' + this.rightTop + '</gradient_right_top_color>\n        <gradient_right_bottom_color>' + this.rightBottom + '</gradient_right_bottom_color>\n        </gradient>';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var obj = {
	                mode: this.lat,
	                leftBottom: this.leftBottom,
	                leftTop: this.leftTop,
	                rightBottom: this.rightBottom,
	                rightTop: this.rightTop
	            };

	            return { gradient: obj };
	        }
	    }, {
	        key: 'mode',
	        set: function set(mode) {
	            this._mode = mode;
	        },
	        get: function get() {
	            return this._mode;
	        }
	    }, {
	        key: 'leftBottom',
	        set: function set(leftBottom) {
	            this._leftBottom = leftBottom;
	        },
	        get: function get() {
	            return this._leftBottom;
	        }
	    }, {
	        key: 'leftTop',
	        set: function set(leftTop) {
	            this._leftTop = leftTop;
	        },
	        get: function get() {
	            return this._leftTop;
	        }
	    }, {
	        key: 'rightBottom',
	        set: function set(rightBottom) {
	            this._rightBottom = rightBottom;
	        },
	        get: function get() {
	            return this._rightBottom;
	        }
	    }, {
	        key: 'rightTop',
	        set: function set(rightTop) {
	            this._rightTop = rightTop;
	        },
	        get: function get() {
	            return this._rightTop;
	        }
	    }]);

	    return Gradient;
	}();

	exports.default = Gradient;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Gradient.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Model.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：模型类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 模型
	 * @namespace GV
	 * @extends GV.PositionBaseNode
	 * @class Model
	 * @constructor
	 * @param {Json} [params] 参数
	 */
	var Model = function (_PositionBaseNode) {
	    _inherits(Model, _PositionBaseNode);

	    function Model() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, Model);

	        return _possibleConstructorReturn(this, (Model.__proto__ || Object.getPrototypeOf(Model)).call(this, params));
	    }

	    _createClass(Model, [{
	        key: '_callBack',

	        /**
	         * @property style
	         * @description 支持的样式类型及默认值: <br>
	         * <pre>
	         *      'max-visible-distance': -1,  //最大可是距离
	         *      'min-visible-distance': -1,              //最小可是距离
	         *      'min-visible-range': -1,                    //最小可视相机高度
	         *      'max-visible-range': -1,                    //最大可视相机高度
	         *      'model-scale': 1,                        //缩放(免费版该属性不支持'auto')
	         *      'model-heading': 0,                      //偏转
	         *      'model-pitch': 0,                        //俯仰
	         *      'model-roll': 0,                         //翻滚
	         * </pre>
	         */

	        value: function _callBack(msg) {
	            _get(Model.prototype.__proto__ || Object.getPrototypeOf(Model.prototype), '_callBack', this).call(this, msg);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Model;
	        }

	        /**
	         * 模型路径
	         * @property url
	         * @type {string}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            if (this._url === url) return;

	            this._url = url;
	            this._updateProperty('url');
	        },
	        get: function get() {
	            return this._url;
	        }

	        /**
	         * 获得包围盒
	         * @property boundingBox 
	         * @type {object}
	         */

	    }, {
	        key: 'boundingBox',
	        get: function get() {
	            return this._boundingBox;
	        }
	    }]);

	    return Model;
	}(_PositionBaseNode3.default);

	exports.default = Model;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Model.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Circle.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：该类用于绘制圆柱体 圆弧 圆
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 圆柱体,圆或者圆弧
	 *      <p>当自身高度设为0时,圆柱体只有底面,这是表现为圆</p>
	 *      <p>当设置起止角度的时候,只生成圆的一部分,则为圆弧</p>
	 * @namespace GV
	 * @extends GV.PositionBaseNode
	 * @class Circle
	 * @constructor
	 * @param {Json} [params] 参数
	 * @param {number} params.position 底面中心位置 
	 * @param {number} params.visible 是否显示
	 * @param {number} params.radius 半径
	 * @param {number} params.height 高度
	 * @param {number} params.arcStart 开始角度
	 * @param {number} params.arcEnd 结束角度
	 * @param {Object} params.style  显示样式
	 */
	var Circle = function (_PositionBaseNode) {
	    _inherits(Circle, _PositionBaseNode);

	    function Circle() {
	        _classCallCheck(this, Circle);

	        return _possibleConstructorReturn(this, (Circle.__proto__ || Object.getPrototypeOf(Circle)).apply(this, arguments));
	    }

	    _createClass(Circle, [{
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Circle;
	        }

	        /**
	         * @property height
	         * @description 高度
	         * @type number
	         * @default 0
	         */

	    }, {
	        key: 'height',
	        set: function set(height) {
	            this._height = height;
	            this._updateProperty('height');
	        },
	        get: function get() {
	            return this._height || 0;
	        }

	        /**
	         * @property radius
	         * @description 半径
	         * @type number
	         * @default 100000
	         */

	    }, {
	        key: 'radius',
	        set: function set(radius) {
	            this._radius = radius;
	            this._updateProperty('radius');
	        },
	        get: function get() {
	            return this._radius;
	        }

	        /**
	         * @property arcStart
	         * @description 开始角度 0-360
	         * @type number
	         * @default 0
	         */

	    }, {
	        key: 'arcStart',
	        set: function set(arcStart) {
	            this._arcStart = arcStart;
	            this._updateProperty('arcStart');
	        },
	        get: function get() {
	            return this._arcStart || 0;
	        }

	        /**
	         * @property arcEnd
	         * @description 结束角度 0-360
	         * @type number
	         * @default 360
	         */

	    }, {
	        key: 'arcEnd',
	        set: function set(arcEnd) {
	            this._arcEnd = arcEnd;
	            this._updateProperty('arcEnd');
	        },
	        get: function get() {
	            return this._arcEnd || 360;
	        }

	        /**
	         * @property style
	         * @description 支持的样式类型及默认值: <br>
	         *      <pre>
	         *           'max-visible-distance': -1,  //最大可视距离
	         *           'min-visible-distance': -1,              //最小可视距离
	         *           'min-visible-range': -1,                    //最小可视相机高度
	         *           'max-visible-range': -1,                    //最大可视相机高度
	         *           'render-lighting': true,                //是否开启渲染灯光(Pro版)
	         *           'render-transparent': true,             //是否开启透明
	         *           'render-backface-culling': true,        //是否剔除背面
	         *           'mesh-mode': 'fill'                     //填充方式
	         *      </pre>
	         * 
	         */

	    }]);

	    return Circle;
	}(_PositionBaseNode3.default);

	exports.default = Circle;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Circle.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：cone.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：圆锥类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 圆锥
	 * @namespace GV
	 * @extends GV.PositionBaseNode
	 * @class Cone
	 * @constructor
	 * @param {Json} [params] 参数
	 * @param {number} params.position 底面中心位置
	 * @param {number} params.visible 是否显示
	 * @param {number} params.radius 底面半轴
	 * @param {number} params.height 高度
	 */
	var Cone = function (_PositionBaseNode) {
	    _inherits(Cone, _PositionBaseNode);

	    function Cone() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, Cone);

	        return _possibleConstructorReturn(this, (Cone.__proto__ || Object.getPrototypeOf(Cone)).call(this, params));
	    }

	    _createClass(Cone, [{
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Cone;
	        }

	        /**
	         * @property  radius
	         * @description 圆锥底面半径
	         * @type {number}
	         */

	    }, {
	        key: 'radius',
	        set: function set(value) {
	            this._radius = value;
	            this._updateProperty('radius');
	        },
	        get: function get() {
	            return this._radius;
	        }

	        /**
	         * @property  height
	         * @description 高度
	         * @type {number}
	         * @default 0
	         */

	    }, {
	        key: 'height',
	        set: function set(value) {
	            this._height = value;
	            this._updateProperty('height');
	        },
	        get: function get() {
	            return this._height || 0;
	        }

	        /**
	         * @property style
	         * @description 支持的样式类型及默认值: <br>
	         *      <pre>
	         *           'max-visible-distance': -1,  //最大可视距离
	         *           'min-visible-distance': -1,              //最小可视距离
	         *           'min-visible-range': -1,                    //最小可视相机高度
	         *           'max-visible-range': -1,                    //最大可视相机高度
	         *           'render-lighting': true,                //是否开启渲染灯光(Pro版)
	         *           'render-transparent': true,             //是否开启透明
	         *           'render-backface-culling': true,        //是否剔除背面
	         *           'mesh-uniform': true,                   //是否使用同一颜色
	         *           'mesh-color': '#FFFFFFFF',              //实体颜色
	         *           'mesh-color-top': '#FFFFFFFF',          //顶部颜色
	         *           'mesh-color-bottom': '#000000FF',       //底面颜色
	         *           'mesh-mode': 'fill'                     //填充方式
	         *      </pre>
	         * 
	         */

	    }]);

	    return Cone;
	}(_PositionBaseNode3.default);

	exports.default = Cone;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Cone.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：cube.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：长方体类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 长方体
	 * @namespace GV
	 * @extends GV.PositionBaseNode
	 * @class Cube
	 * @param {Json} [params] 参数
	 * @param {number} params.position 底面中心位置 
	 * @param {number} params.visible 是否显示
	 * @param {number} params.width 宽度
	 * @param {number} params.height 高度
	 * @param {number} params.length 长度
	 */
	var Cube = function (_PositionBaseNode) {
	    _inherits(Cube, _PositionBaseNode);

	    function Cube() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, Cube);

	        return _possibleConstructorReturn(this, (Cube.__proto__ || Object.getPrototypeOf(Cube)).call(this, params));
	    }

	    /**
	     * @extends GV.Class
	     */

	    _createClass(Cube, [{
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Cube;
	        }

	        /**
	         * X方向长度
	         * @property x
	         * @type {Number}
	         * @default 0
	         */

	    }, {
	        key: 'x',
	        set: function set(x) {
	            this._x = x;
	            this._updateProperty('x');
	        },
	        get: function get() {
	            return this._x || 0;
	        }

	        /**
	         * y方向长度
	         * @property y
	         * @type {Number}
	         * @default 0
	         */

	    }, {
	        key: 'y',
	        set: function set(y) {
	            this._y = y;
	            this._updateProperty('y');
	        },
	        get: function get() {
	            return this._y || 0;
	        }

	        /**
	         * z轴方向长度
	         * @property z
	         * @type {Number}
	         * @default 0
	         */

	    }, {
	        key: 'z',
	        set: function set(z) {
	            this._z = z;
	            this._updateProperty('z');
	        },
	        get: function get() {
	            return this._z || 0;
	        }

	        /**
	         * @property style
	         * @description 支持的样式类型及默认值: <br>
	         *      <pre>
	         *           'max-visible-distance': -1,  //最大可视距离
	         *           'min-visible-distance': -1,              //最小可视距离
	         *           'min-visible-range': -1,                    //最小可视相机高度
	         *           'max-visible-range': -1,                    //最大可视相机高度
	         *           'render-lighting': true,                //是否开启渲染灯光(Pro版)
	         *           'render-transparent': false,            //是否开启透明
	         *           'render-backface-culling': true,        //是否剔除背面
	         *           'mesh-mode': 'fill'                     //填充方式
	         *      </pre>
	         * 
	         */

	    }]);

	    return Cube;
	}(_PositionBaseNode3.default);

	exports.default = Cube;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Cube.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Ellipse.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：该类可绘制椭圆弧 椭圆柱 椭圆
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 椭圆弧 椭圆柱 椭圆
	 *   <p>当自身高度设为0是,椭圆柱只有底面,这是表现为椭圆</p>
	 *   <p>当设置起止角度的时候,只生成椭圆的一部分,则为椭圆弧</p>
	 * @namespace GV
	 * @extends GV.PositionBaseNode
	 * @class Ellipse
	 * @constructor
	 * @param {Json} [params] 参数
	 * @param {number} params.position 底面中心位置
	 * @param {number} params.radiusMajor 长半轴
	 * @param {number} params.radiusMinor 短半轴
	 * @param {number} params.height 高度
	 * @param {number} params.arcStart 开始角度
	 * @param {number} params.arcEnd 结束角度
	 */
	var Ellipse = function (_PositionBaseNode) {
	    _inherits(Ellipse, _PositionBaseNode);

	    function Ellipse() {
	        _classCallCheck(this, Ellipse);

	        return _possibleConstructorReturn(this, (Ellipse.__proto__ || Object.getPrototypeOf(Ellipse)).apply(this, arguments));
	    }

	    _createClass(Ellipse, [{
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Ellipse;
	        }

	        /**
	         * @property height
	         * @description 高度
	         * @type number
	         * @default 0
	         */

	    }, {
	        key: 'height',
	        set: function set(height) {
	            this._height = height;
	            this._updateProperty('height');
	        },
	        get: function get() {
	            return this._height || 0;
	        }
	    }, {
	        key: 'radiusMajor',
	        set: function set(radiusMajor) {
	            this._radiusMajor = radiusMajor;
	            this._updateProperty('radiusMajor');
	        },
	        get: function get() {
	            return this._radiusMajor;
	        }
	    }, {
	        key: 'radiusMinor',
	        set: function set(radiusMinor) {
	            this._radiusMinor = radiusMinor;
	            this._updateProperty('radiusMinor');
	        },
	        get: function get() {
	            return this._radiusMinor;
	        }

	        /**
	         * @property radiusX
	         * @description X方向轴长
	         * @type number
	         * @default 1
	         */

	    }, {
	        key: 'radiusX',
	        set: function set(radiusX) {
	            this._radiusX = radiusX;
	            this._updateProperty('radiusX');
	        },
	        get: function get() {
	            return this._radiusX;
	        }

	        /**
	         * @property radiusX
	         * @description 长半轴
	         * @type number
	         * @default 1
	         */

	    }, {
	        key: 'radiusY',
	        set: function set(radiusY) {
	            this._radiusY = radiusY;
	            this._updateProperty('radiusY');
	        },
	        get: function get() {
	            return this._radiusY;
	        }

	        /**
	         * @property arcStart
	         * @description 开始角度 0-360
	         * @type number
	         * @default 0
	         */

	    }, {
	        key: 'arcStart',
	        set: function set(arcStart) {
	            this._arcStart = arcStart;
	            this._updateProperty('arcStart');
	        },
	        get: function get() {
	            return this._arcStart || 0;
	        }

	        /**
	         * @property arcEnd
	         * @description 结束角度 0-360
	         * @type number
	         * @default 360
	         */

	    }, {
	        key: 'arcEnd',
	        set: function set(arcEnd) {
	            this._arcEnd = arcEnd;
	            this._updateProperty('arcEnd');
	        },
	        get: function get() {
	            return this._arcEnd || 360;
	        }

	        /**
	         * @property rotationAngle
	         * @description 旋转角
	         * @type {Number}
	         * @default 0
	         */

	    }, {
	        key: 'rotationAngle',
	        set: function set(rotationAngle) {
	            this._rotationAngle = rotationAngle;
	            this._updateProperty('rotationAngle');
	        },
	        get: function get() {
	            return this._rotationAngle || 0;
	        }

	        /**
	         * @property style
	         * @description 支持的样式类型及默认值: <br>
	         *      <pre>
	         *           'max-visible-distance': -1,  //最大可视距离
	         *           'min-visible-distance': -1,              //最小可视距离
	         *           'min-visible-range': -1,                    //最小可视相机高度
	         *           'max-visible-range': -1,                    //最大可视相机高度
	         *           'render-lighting': true,                //是否开启渲染灯光(Pro版)
	         *           'render-transparent': true,             //是否开启透明
	         *           'render-backface-culling': true,        //是否剔除背面
	         *           'mesh-mode': 'fill'                     //填充方式
	         *      </pre>
	         * 
	         */

	    }]);

	    return Ellipse;
	}(_PositionBaseNode3.default);

	exports.default = Ellipse;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Ellipse.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Ellipsoid.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：椭球体类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 椭球体
	 * @namespace GV
	 * @extends GV.PositionBaseNode
	 * @class Ellipsoid
	 * @constructor
	 * @param {Json} [params] 参数
	 * @param {number} params.position 中心位置
	 * @param {number} params.radiusX X轴长度
	 * @param {number} params.radiusY Y轴长度
	 * @param {number} params.radiusZ Z轴长度
	 */
	var Ellipsoid = function (_PositionBaseNode) {
	    _inherits(Ellipsoid, _PositionBaseNode);

	    function Ellipsoid() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, Ellipsoid);

	        return _possibleConstructorReturn(this, (Ellipsoid.__proto__ || Object.getPrototypeOf(Ellipsoid)).call(this, params));
	    }

	    _createClass(Ellipsoid, [{
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Ellipsoid;
	        }

	        /**
	         * @property radiusX
	         * @description X轴长度
	         * @type {number}
	         * @default 
	         */

	    }, {
	        key: 'radiusX',
	        set: function set(radiusX) {
	            if (radiusX < 0) {
	                this._radiusX = -radiusX;
	            } else {
	                this._radiusX = radiusX;
	            }
	            this._updateProperty('radiusX');
	        },
	        get: function get() {
	            return this._radiusX;
	        }

	        /**
	         * @property radiusZ
	         * @description Z轴长度
	         * @type {number}
	         * @default 
	         */

	    }, {
	        key: 'radiusZ',
	        set: function set(radiusZ) {
	            if (radiusZ < 0) {
	                this._radiusZ = -radiusZ;
	            } else {
	                this._radiusZ = radiusZ;
	            }

	            this._updateProperty('radiusZ');
	        },
	        get: function get() {
	            return this._radiusZ;
	        }

	        /**
	         * @property radiusY
	         * @description Y轴长度
	         * @type {number}
	         * @default 
	         */

	    }, {
	        key: 'radiusY',
	        set: function set(radiusY) {
	            if (radiusY < 0) {
	                this._radiusY = -radiusY;
	            } else {
	                this._radiusY = radiusY;
	            }
	            this._updateProperty('radiusY');
	        },
	        get: function get() {
	            return this._radiusY;
	        }

	        /**
	         * @property style
	         * @description 支持的样式类型及默认值: <br>
	         *      <pre>
	         *           'max-visible-distance': -1,  //最大可是距离
	         *           'min-visible-distance': -1,              //最小可是距离
	         *           'min-visible-range': -1,                    //最小可视相机高度
	         *           'max-visible-range': -1,                    //最大可视相机高度
	         *           'render-lighting': true,                //是否开启渲染灯光(Pro版)
	         *           'render-transparent': true,             //是否开启透明
	         *           'render-backface-culling': true,        //是否剔除背面
	         *           'mesh-mode': 'fill'                     //填充方式
	         *      </pre>
	         */

	    }]);

	    return Ellipsoid;
	}(_PositionBaseNode3.default);

	exports.default = Ellipsoid;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Ellipsoid.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：ImageOverLay.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：覆盖在地球上的图片类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 覆盖在地球上的图片(免费版无该标绘实体)
	 * @namespace GV
	 * @extends GV.PositionBaseNode
	 * @class ImageOverLay
	 * @constructor
	 * @param {Json} [params] 参数
	 */
	var ImageOverLay = function (_PositionBaseNode) {
	    _inherits(ImageOverLay, _PositionBaseNode);

	    function ImageOverLay() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, ImageOverLay);

	        return _possibleConstructorReturn(this, (ImageOverLay.__proto__ || Object.getPrototypeOf(ImageOverLay)).call(this, params));
	    }

	    _createClass(ImageOverLay, [{
	        key: '_callBack',

	        /**
	         * @property style
	         * @description 样式的属性<br>
	         * <pre>
	         *       'max-visible-distance': -1,  //最大可是距离
	         *       'min-visible-distance': -1,              //最小可是距离
	         *       'min-visible-range': -1,                    //最小可视相机高度
	         *       'max-visible-range': -1,                    //最大可视相机高度
	         * </pre>
	         */

	        value: function _callBack(msg) {
	            _get(ImageOverLay.prototype.__proto__ || Object.getPrototypeOf(ImageOverLay.prototype), '_callBack', this).call(this, msg);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.ImageOverLay;
	        }

	        /**
	         * 图片资源路径
	         * @property url 
	         * @type {String}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            this._url = url;
	            this._updateProperty('url');
	        },
	        get: function get() {
	            return this._url;
	        }

	        /**
	         * 最大经度
	         * @property maxLon
	         * @type {Number}
	         */

	    }, {
	        key: 'maxLon',
	        set: function set(maxLon) {
	            this._maxLon = maxLon;
	            this._updateProperty('maxLon');
	        },
	        get: function get() {
	            return this._maxLon;
	        }

	        /**
	         * 最小经度
	         * @property minLon
	         * @type {Number}
	         */

	    }, {
	        key: 'minLon',
	        set: function set(minLon) {
	            this._minLon = minLon;
	            this._updateProperty('minLon');
	        },
	        get: function get() {
	            return this._minLon;
	        }

	        /**
	         * 最大纬度
	         * @property maxLat
	         * @type {Number}
	         */

	    }, {
	        key: 'maxLat',
	        set: function set(maxLat) {
	            this._maxLat = maxLat;
	            this._updateProperty('maxLat');
	        },
	        get: function get() {
	            return this._maxLat;
	        }

	        /**
	         * 最小经度
	         * @property minLat
	         * @type {Number}
	         */

	    }, {
	        key: 'minLat',
	        set: function set(minLat) {
	            this._minLat = minLat;
	            this._updateProperty('minLat');
	        },
	        get: function get() {
	            return this._minLat;
	        }

	        /**
	         * 透明度
	         * @property alpha
	         * @type {Number}
	         */

	    }, {
	        key: 'alpha',
	        set: function set(alpha) {
	            this._alpha = alpha;
	            if (alpha < 0 || alpha > 1) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONEDEFAULT, 'alpha', '>0 && <1'));
	                return;
	            }
	            this._updateProperty('alpha');
	        },
	        get: function get() {
	            return this._alpha !== undefined ? this._alpha : 1;
	        }
	    }]);

	    return ImageOverLay;
	}(_PositionBaseNode3.default);

	exports.default = ImageOverLay;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ImageOverLay.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Polygon.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：多边形面类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _GeometryNode2 = __webpack_require__(69);

	var _GeometryNode3 = _interopRequireDefault(_GeometryNode2);

	var _Exception = __webpack_require__(35);

	var _Exception2 = _interopRequireDefault(_Exception);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 多边形面
	 * @namespace GV
	 * @class Polygon
	 * @extends GV.GeometryNode
	 * @constructor 
	 * @show true
	 */
	var Polygon = function (_GeometryNode) {
	    _inherits(Polygon, _GeometryNode);

	    function Polygon() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, Polygon);

	        return _possibleConstructorReturn(this, (Polygon.__proto__ || Object.getPrototypeOf(Polygon)).call(this, params));
	    }

	    _createClass(Polygon, [{
	        key: '_callBack',

	        /**
	         * 多边形线的样式
	         * @property style
	         * @description <br>
	         * <pre>
	         *   fill: '#FFFFFFFF',                      //填充色
	         *   'altitude-clamping': 'none',            //贴地方式
	         *   'altitude-technique': map,        //贴地方法(当altitude-clamping设置为terrain时生效)
	         *   'max-visible-distance': -1,  //最大可是距离
	         *   'min-visible-distance': -1,              //最小可是距离
	         *   'min-visible-range': -1,                    //最小可视相机高度
	         *   'max-visible-range': -1,                    //最大可视相机高度
	         *   'render-transparent': true,             //是否开启透明
	         *   'render-backface-culling': true,        //是否剔除背面
	         *   'stroke': '#FFFFFFFF',                  //线的颜色
	         *   'stroke-width': '10px',                 //线宽（例20px 或 10m）(免费版该属性px无效)
	         *   'stroke-min-pixels': undefined,         //最小渲染宽度（线宽不为位像素时有效）
	         *   'stroke-tessellation': undefined,       //线段的细分段数
	         *   'stroke-stipple-pattern': undefined,    //点划线模式
	         *   'stroke-stipple-factor': undefined,     //重绘点的数目
	         *   'stroke-linejoin': undefined,           //线连接处处理（线宽不为位像素时有效）
	         *   'stroke-linecap': undefined,            //线端点处理（线宽不为位像素时有效）
	         *   'stroke-rounding-ratio': undefined,     //接口为round线宽与拐角片段的比例
	         *   'line-extrusion': false,                //是否拉伸
	         *   'extrusion-height': 100000,             //拉伸高度
	         *   'extrusion-uniform': true,              //连接地面的线是否是同一颜色（line-extrusion为true时有效）
	         *   'extrusion-color': '#FFFFFFFF'          //连接地面的线的颜色（extrusion-uniform为true是有效）
	         * </pre>
	         */

	        value: function _callBack(msg) {
	            _get(Polygon.prototype.__proto__ || Object.getPrototypeOf(Polygon.prototype), '_callBack', this).call(this, msg);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Polygon;
	        }
	    }]);

	    return Polygon;
	}(_GeometryNode3.default);

	exports.default = Polygon;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Polygon.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Polyline.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：多边形线类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _GeometryNode2 = __webpack_require__(69);

	var _GeometryNode3 = _interopRequireDefault(_GeometryNode2);

	var _Exception = __webpack_require__(35);

	var _Exception2 = _interopRequireDefault(_Exception);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 折线,如果您需要空间折线,务必将第一个坐标点赋上高度值
	 * @namespace GV
	 * @class Polyline
	 * @extends GV.GeometryNode
	 * @constructor
	 * @show true
	 */
	var Polyline = function (_GeometryNode) {
	    _inherits(Polyline, _GeometryNode);

	    function Polyline() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, Polyline);

	        return _possibleConstructorReturn(this, (Polyline.__proto__ || Object.getPrototypeOf(Polyline)).call(this, params));
	    }

	    _createClass(Polyline, [{
	        key: '_callBack',

	        /**
	         * 多边形面的样式
	         * @property style
	         * @description <br>
	         * <pre>                 
	         *   'altitude-clamping': 'none',            //贴地方式
	         *   'altitude-technique': 'map',            //贴地方法(当altitude-clamping设置为terrain时生效)
	         *   'max-visible-distance': -1,  //最大可是距离
	         *   'min-visible-distance': -1,              //最小可是距离
	         *   'min-visible-range': -1,                    //最小可视相机高度
	         *   'max-visible-range': -1,                    //最大可视相机高度
	         *   'render-transparent': true,             //是否开启透明
	         *   'stroke': '#FFFFFFFF',                  //线的颜色
	         *   'stroke-width': '10px',                 //线宽（例20px 或 10m）(免费版该属性px无效)
	         *   'stroke-min-pixels': undefined,         //最小渲染宽度（线宽不为位像素时有效）
	         *   'stroke-tessellation': undefined,       //线段的细分段数
	         *   'stroke-stipple-pattern': undefined,    //点划线模式
	         *   'stroke-stipple-factor': undefined,     //重绘点的数目
	         *   'stroke-linejoin': undefined,           //线连接处处理（线宽不为位像素时有效）
	         *   'stroke-linecap': undefined,            //线端点处理（线宽不为位像素时有效）
	         *   'stroke-rounding-ratio': undefined,     //接口为round线宽与拐角片段的比例
	         *   'line-extrusion': false,                //是否拉伸
	         *   'extrusion-height': 100000,             //拉伸高度
	         *   'extrusion-uniform': true,              //连接地面的线是否是同一颜色（line-extrusion位true时有效）
	         *   'extrusion-color': '#FFFFFFFF'          //连接地面的线的颜色（extrusion-uniform为true是有效）
	         * </pre>
	         */

	        value: function _callBack(msg) {
	            _get(Polyline.prototype.__proto__ || Object.getPrototypeOf(Polyline.prototype), '_callBack', this).call(this, msg);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Polyline;
	        }
	    }]);

	    return Polyline;
	}(_GeometryNode3.default);

	exports.default = Polyline;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Polyline.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Sphere.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途: 球体类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 球体
	 * @namespace GV
	 * @extends GV.PositionBaseNode
	 * @class Sphere
	 * @constructor
	 * @param {Json} [params] 参数
	 * @param {number} params.position 中心位置
	 * @param {number} params.radius 半径
	 */
	var Sphere = function (_PositionBaseNode) {
	    _inherits(Sphere, _PositionBaseNode);

	    function Sphere() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, Sphere);

	        return _possibleConstructorReturn(this, (Sphere.__proto__ || Object.getPrototypeOf(Sphere)).call(this, params));
	    }

	    _createClass(Sphere, [{
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Sphere;
	        }

	        /**
	         * @property radius
	         * @description 半径
	         * @type {number}
	         */

	    }, {
	        key: 'radius',
	        set: function set(radius) {
	            if (radius < 0) {
	                this._radius = -radius;
	            } else {
	                this._radius = radius;
	            }
	            this._updateProperty('radius');
	        },
	        get: function get() {
	            return this._radius;
	        }

	        /**
	         * @property style
	         * @description 支持的样式类型及默认值: <br>
	         *      <pre>
	         *           'max-visible-distance': -1,  //最大可视距离
	         *           'min-visible-distance': -1,              //最小可视距离
	         *           'min-visible-range': -1,                    //最小可视相机高度
	         *           'max-visible-range': -1,                    //最大可视相机高度
	         *           'render-lighting': true,                //是否开启渲染灯光(Pro版)
	         *           'render-transparent': true,             //是否开启透明
	         *           'render-backface-culling': true,        //是否剔除背面
	         *           'mesh-mode': 'fill'                     //填充方式
	         *      </pre>
	         * 
	         */

	    }]);

	    return Sphere;
	}(_PositionBaseNode3.default);

	exports.default = Sphere;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Sphere.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Spline.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：样条曲线类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _GeometryNode2 = __webpack_require__(69);

	var _GeometryNode3 = _interopRequireDefault(_GeometryNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */

	/**
	 * 样条曲线
	 * @namespace GV
	 * @class Spline
	 * @extends GV.GeometryNode
	 * @constructor
	 * @show true
	 */
	var Spline = function (_GeometryNode) {
	    _inherits(Spline, _GeometryNode);

	    function Spline(params) {
	        _classCallCheck(this, Spline);

	        return _possibleConstructorReturn(this, (Spline.__proto__ || Object.getPrototypeOf(Spline)).call(this, params));
	    }

	    _createClass(Spline, [{
	        key: 'getSplineVertices',

	        /**
	         * 获得样条曲线所有差值点
	         * @method getSplineVertices
	         * @param {function} 回调函数参数为样条曲线差值数组
	         */
	        value: function getSplineVertices(fun) {
	            if (!fun) return;
	            if (this._splineVertices) {
	                fun(this._splineVertices);
	            } else {
	                this._fun = fun;
	            }
	        }
	    }, {
	        key: '_callBack',
	        value: function _callBack(msg) {
	            _get(Spline.prototype.__proto__ || Object.getPrototypeOf(Spline.prototype), '_callBack', this).call(this, msg);

	            switch (msg.para1) {
	                case 'spline_vertices':
	                    this._splineVertices = Util.strToArray(msg.para2);
	                    if (this._fun) {
	                        this._fun(this._splineVertices);
	                        this._fun = undefined;
	                    }
	                    break;
	                default:
	                    break;
	            }
	        }

	        /**
	         * 样条曲线的样式
	         * @property style
	         * @description <br>
	         * <pre>
	         *   'altitude-clamping': 'none',            //贴地方式
	         *   'altitude-technique': 'map',            //贴地方法(当altitude-clamping设置为terrain时生效)
	         *   'max-visible-distance': -1,  //最大可是距离
	         *   'min-visible-distance': -1,              //最小可是距离
	         *   'min-visible-range': -1,                    //最小可视相机高度
	         *   'max-visible-range': -1,                    //最大可视相机高度
	         *   'render-lighting': false,                //是否开启渲染灯光(Pro版)
	         *   'render-transparent': false,             //是否开启透明
	         *   'render-backface-culling': true,        //是否剔除背面
	         *   'stroke': '#FFFFFFFF',                  //线的颜色
	         *   'stroke-width': '10px',                 //线宽（例20px 或 10m）(免费版该属性px形式无效)
	         *   'stroke-stipple-pattern': undefined,    //点划线模式
	         *   'stroke-stipple-factor': undefined,     //重绘点的数目
	         *   'line-extrusion': false,                //是否连接地面
	         *   'extrusion-uniform': true,              //连接地面的线是否是同一颜色（line-extrusion位true时有效）
	         *   'extrusion-color': '#FFFFFFFF'          //连接地面的线的颜色（extrusion-uniform为true是有效）
	         * </pre>
	         */

	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Spline;
	        }
	    }]);

	    return Spline;
	}(_GeometryNode3.default);

	exports.default = Spline;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Spline.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：JBPoint.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-06-9 10:14:16
	 * 用途：点军标
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _JBBaseNode2 = __webpack_require__(85);

	var _JBBaseNode3 = _interopRequireDefault(_JBBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 军标点(免费版无该标绘实体)
	 * @namespace GV
	 * @extends GV.JBBaseNode
	 * @class JBPoint
	 * @constructor
	 * @param {Json} [params] 参数
	 */
	var JBPoint = function (_JBBaseNode) {
	    _inherits(JBPoint, _JBBaseNode);

	    function JBPoint() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, JBPoint);

	        return _possibleConstructorReturn(this, (JBPoint.__proto__ || Object.getPrototypeOf(JBPoint)).call(this, params));
	    }

	    _createClass(JBPoint, [{
	        key: '_callBack',

	        // /**
	        //  * 文字颜色
	        //  * @property textColor
	        //  * @type {String}
	        //  */
	        // set textColor(color) {
	        //     this._textColor = color;
	        //     this._updateProperty('textColor');
	        // }

	        // get textColor() {
	        //     return this._textColor;
	        // }

	        // /**
	        //  * 文字大小
	        //  * @property textSize
	        //  * @type {Number}
	        //  */
	        // set textSize(textSize) {
	        //     this._textSize = textSize;
	        //     this._updateProperty('textSize'); 
	        // }

	        // get textSize() {
	        //     return this._textSize;
	        // }

	        // /**
	        //  * 文字位置
	        //  * @property textPosition
	        //  * @type {Number} 线上0,线中1,线下2
	        //  */
	        // set textPosition(position) {
	        //     this._textPosition = position;
	        //     this._updateProperty('textPosition');
	        // }

	        // get textPosition() {
	        //     return this._textPosition;
	        // }

	        // /**
	        //  * 显示样式设置
	        //  * @property showModel
	        //  * @type {GV.JBPOINTModel}
	        //  */
	        // set showMode(showMode) {
	        //     this._showMode = showMode;
	        //     this._updateProperty('showMode');
	        // }

	        // get showMode() {
	        //     return this._showMode;
	        // }

	        // /**
	        //  * 衬色
	        //  * @property liningColor
	        //  * @type {String} #ffffffff
	        //  */
	        // set liningColor(liningColor) {
	        //     this._liningColor = liningColor;
	        //     this._updateProperty('liningColor');
	        // }

	        // get liningColor() {
	        //     return this._liningColor;
	        // }

	        value: function _callBack(msg) {
	            _get(JBPoint.prototype.__proto__ || Object.getPrototypeOf(JBPoint.prototype), '_callBack', this).call(this, msg);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.JBPoint;
	        }

	        /**
	         * 文字
	         * @property text
	         * @type {String}
	         */

	    }, {
	        key: 'text',
	        set: function set(text) {
	            this._text = text;
	            this._updateProperty('text');
	        },
	        get: function get() {
	            return this._text;
	        }
	    }]);

	    return JBPoint;
	}(_JBBaseNode3.default);

	exports.default = JBPoint;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "JBPoint.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：JBBaseNode.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-06-09 10:32:05.
	 * 用途：军标基类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Node = __webpack_require__(61);

	var _Node2 = _interopRequireDefault(_Node);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _Position = __webpack_require__(68);

	var _Position2 = _interopRequireDefault(_Position);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 抽象军标基类
	 *      <pre>点军标线军标等对象继承该对象</pre>
	 * @module node
	 * @namespace GV
	 * @extends GV.Node
	 * @class JBBaseNode
	 * @abstract
	 */
	var JBBaseNode = function (_BaseNode) {
	    _inherits(JBBaseNode, _BaseNode);

	    function JBBaseNode(params) {
	        _classCallCheck(this, JBBaseNode);

	        var _this = _possibleConstructorReturn(this, (JBBaseNode.__proto__ || Object.getPrototypeOf(JBBaseNode)).call(this, params));

	        _this._bindChildren = [];
	        return _this;
	    }

	    /**
	     * 军标库
	     * @property jbLib
	     * @type {Number}
	     */

	    _createClass(JBBaseNode, [{
	        key: '_pushChild',

	        // /**
	        //  * 缩放
	        //  * @property scale
	        //  * @type {Number}
	        //  */
	        // set scale(scale) {
	        //     this._scale = scale;
	        //     this._updateProperty('scale');
	        // }

	        // get scale() {
	        //     return this._scale;
	        // }

	        /**
	         * 军标旋转
	         * @property roll
	         * @type {Number}
	         */

	        value: function _pushChild(node) {
	            this._bindChildren.push(node);
	        }
	    }, {
	        key: 'jbLib',
	        set: function set(lib) {
	            if (this._jbLib === undefined) {
	                this._jbLib = lib;
	            }
	        },
	        get: function get() {
	            return this._jbLib;
	        }

	        //临时属性

	    }, {
	        key: 'jbType',
	        set: function set(jbType) {
	            if (this._jbType === undefined) {
	                this._jbType = jbType;
	            }
	        },
	        get: function get() {
	            return this._jbType;
	        }

	        /**
	         * 军标编号
	         * @property code {Number} //只能赋值一次
	         */

	    }, {
	        key: 'code',
	        set: function set(code) {
	            if (this._code === undefined) {
	                this._code = code;
	            }
	        },
	        get: function get() {
	            return this._code;
	        }

	        // /**
	        //  * 军标颜色
	        //  * @property color {string} //'#FF0000'
	        //  */
	        // set color(color) {
	        //     this._color = color;
	        //     this._updateProperty('color');
	        // }

	        // get color() {
	        //     return this._color;
	        // }

	        /**
	         * 位置
	         * @property position
	         */

	    }, {
	        key: 'position',
	        set: function set(position) {
	            if (Util.$.isPlainObject(position) && Util.$.isFunction(position.toJSON)) {
	                position = position.toJSON();
	            }
	            if (Util.isJson(position)) {
	                this._position = new _Position2.default(position, this);
	                this._updateProperty('position');
	            }
	            if (this._bindChildren && this._bindChildren.length > 0) {
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = this._bindChildren[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var child = _step.value;

	                        child.position = position;
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	            }
	        },
	        get: function get() {
	            return this._position ? this._position.toJSON() : null;
	        }
	    }]);

	    return JBBaseNode;
	}(_Node2.default);

	exports.default = JBBaseNode;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "JBBaseNode.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：JBLine.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-06-9 10:14:16
	 * 用途：线军标
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _JBBaseNode2 = __webpack_require__(85);

	var _JBBaseNode3 = _interopRequireDefault(_JBBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Vertices = __webpack_require__(70);

	var _Vertices2 = _interopRequireDefault(_Vertices);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 线军标(免费版无该标绘实体)
	 * @namespace GV
	 * @extends GV.JBBaseNode
	 * @class JBLine
	 * @constructor
	 * @param {Json} [params] 参数
	 */
	var JBLine = function (_JBBaseNode) {
	    _inherits(JBLine, _JBBaseNode);

	    function JBLine() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, JBLine);

	        return _possibleConstructorReturn(this, (JBLine.__proto__ || Object.getPrototypeOf(JBLine)).call(this, params));
	    }

	    _createClass(JBLine, [{
	        key: 'getPoint',

	        /**
	         * 根据折点索引获取折点
	         * @method getPoint
	         * @param index {int} 索引位置>-1
	         * @return {[[x,y,z]]} 折点
	         */
	        value: function getPoint(index) {
	            if (this._vertices) return this._vertices.getPoint(index);
	            return undefined;
	        }

	        /**
	         * 获取所有折点
	         * @method getPoints
	         * @return {Array} 顶点坐标数组
	         */

	    }, {
	        key: 'getPoints',
	        value: function getPoints() {
	            if (this._vertices) return this._vertices.getPoints();
	            return undefined;
	        }

	        /**
	         * 获取折点个数
	         * @method getPointCount
	         * @return {int} 折点个数
	         */

	    }, {
	        key: 'getPointCount',
	        value: function getPointCount() {
	            if (this._vertices) return this._vertices.length;
	            return undefined;
	        }

	        /**
	         * 设置线的所有折点
	         * @method setPoints
	         * @param points {Array} 折点数组
	         */

	    }, {
	        key: 'setPoints',
	        value: function setPoints(points) {
	            this.vertices = points;
	        }

	        /**
	         * 修改指定索引下的顶点值
	         * @method revisePoint
	         * @param index {int} 索引位置>-1
	         * @param point {[[x,y,z]]} 点
	         */

	    }, {
	        key: 'revisePoint',
	        value: function revisePoint(index, point) {
	            if (!this._vertices) return;
	            this._vertices.revise(index, point);
	        }

	        /**
	         * 移除制定位置折点
	         * @method removePoint
	         * @param index {int} 折点索引
	         */

	    }, {
	        key: 'removePoint',
	        value: function removePoint(index) {
	            if (!this._vertices) return;
	            this._vertices.remove(index);
	        }

	        /**
	         * 添加一个或多个末尾折点
	         * @method addPoints
	         * @param point {[[x,y,z]]} 点
	         */

	    }, {
	        key: 'addPoints',
	        value: function addPoints(point) {
	            if (!this._vertices) return;
	            this._vertices.add(point);
	        }

	        /**
	         * 在指定位置添加一个折点
	         * @method insertPoint
	         * @param index {int} 索引位置>-1
	         * @param point {[[x,y,z]]} 点
	         */

	    }, {
	        key: 'insertPoint',
	        value: function insertPoint(index, point) {
	            if (!this._vertices) return;
	            this._vertices.insert(index, point);
	        }

	        // /**
	        //  * 贴地模式
	        //  * @property altitudeMode
	        //  * @type {GV.ALTITUDEMODE}
	        //  */
	        // set altitudeMode(altitudeMode) {
	        //     this._altitudeMode = altitudeMode;
	        //     this._updateProperty('altitudeMode');
	        // }

	        // get altitudeMode() {
	        //     return this._altitudeMode;
	        // }

	        // /**
	        //  * 衬色
	        //  * @property liningColor
	        //  * @type {String} #ffffffff
	        //  */
	        // set liningColor(liningColor) {
	        //     this._liningColor = liningColor;
	        //     this._updateProperty('liningColor');
	        // }

	        // get liningColor() {
	        //     return this._liningColor;
	        // }

	        // /**
	        //  * 厚度
	        //  * @property thickness
	        //  * @type {Number}
	        //  */
	        // set thickness(thickness) {
	        //     this._thickness = thickness;
	        //     this._updateProperty('thickness');
	        // }

	        // get thickness() {
	        //     return this._thickness;
	        // }

	        // /**
	        //  * 线条宽度
	        //  * @property width
	        //  * @type {Number}
	        //  */
	        // set width(width) {
	        //     this._width = width;
	        //     this._updateProperty(width);
	        // }

	        // get width() {
	        //     return this._width;
	        // }

	        // /**
	        //  * 线条样式
	        //  * @property linetype
	        //  * @type {GV.LINETYPE}
	        //  */
	        // set linetype(linetype) {
	        //     this._linetype = linetype;
	        //     this._updateProperty('linetype');
	        // }

	        // get linetype() {
	        //     return this._linetype;
	        // }

	    }, {
	        key: '_callBack',
	        value: function _callBack(msg) {
	            _get(JBLine.prototype.__proto__ || Object.getPrototypeOf(JBLine.prototype), '_callBack', this).call(this, msg);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.JBLine;
	        }

	        /**
	         * 设置几何要素
	         * @param vertices
	         */

	    }, {
	        key: 'vertices',
	        set: function set(vertices) {
	            this._vertices = new _Vertices2.default(vertices, this);
	            this._updateProperty('vertices');
	        },
	        get: function get() {
	            return this._vertices;
	        }
	    }]);

	    return JBLine;
	}(_JBBaseNode3.default);

	exports.default = JBLine;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "JBLine.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Icon.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-07-18 15:14:16
	 * 用途：图标
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 点符号(免费版无该标绘实体)
	 * @namespace GV
	 * @extends GV.PositionBaseNode
	 * @class Icon
	 * @constructor
	 * @param {Json} [params] 参数
	 * @show true
	 */
	var Icon = function (_PositionBaseNode) {
	    _inherits(Icon, _PositionBaseNode);

	    function Icon() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, Icon);

	        var _this = _possibleConstructorReturn(this, (Icon.__proto__ || Object.getPrototypeOf(Icon)).call(this, params));

	        if (!_this.icon) {
	            _this.icon = 'place_default.png';
	        }

	        return _this;
	    }

	    _createClass(Icon, [{
	        key: '_callBack',

	        /**
	         * 图片样式支持
	         * @property style
	         * @description 图片样式集<br>
	         * <pre>
	         *  'max-visible-distance': -1,  //最大可是距离
	         *   'min-visible-distance': -1,             //最小可是距离
	         *   'min-visible-range': -1,                    //最小可视相机高度
	         *   'max-visible-range': -1,                    //最大可视相机高度
	         *   'icon-scale': 1,                        //缩放
	         *   'icon-heading': 0,                      //偏转角
	         *   'icon-roll': 0,                         //翻滚角
	         *   'icon-pitch': 0,                        //俯仰角
	         *   'icon-size': 30,                        //大小
	         *   'icon-align': 'left-top',               //对其方式
	         *   'icon-mode': 'spirit',                  //图标显示模式
	         *   'icon-link-line': false,                //是否有连接线
	         *   'icon-alpha': 1                         //图片透明度
	         * </pre>
	         */

	        value: function _callBack(msg) {
	            _get(Icon.prototype.__proto__ || Object.getPrototypeOf(Icon.prototype), '_callBack', this).call(this, msg);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Icon;
	        }

	        /**
	         * 图标;
	         * @property url
	         * @type {String}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            if (url === this._url) return;
	            if (Util.isString(url)) {
	                this._url = url;
	                this._updateProperty('url');
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS, this.tag, 'url', 'string'));
	            }
	        },
	        get: function get() {
	            return this._url;
	        }
	    }]);

	    return Icon;
	}(_PositionBaseNode3.default);

	exports.default = Icon;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Icon.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：LocalMesh.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-05-3 13:51:16
	 * 用途：自定义几何体对象,支持地理坐标系
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Drawable = __webpack_require__(89);

	var _Drawable2 = _interopRequireDefault(_Drawable);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 自定义几何体对象,支持地理坐标系
	 * @namespace GV
	 * @extends GV.PositionBaseNode
	 * @class LocalMesh
	 * @constructor
	 */
	var LocalMesh = function (_PositionBaseNode) {
	    _inherits(LocalMesh, _PositionBaseNode);

	    function LocalMesh() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, LocalMesh);

	        return _possibleConstructorReturn(this, (LocalMesh.__proto__ || Object.getPrototypeOf(LocalMesh)).call(this, params));
	    }

	    _createClass(LocalMesh, [{
	        key: '_callBack',

	        /**
	         * @property style
	         * @description <br>
	         * <pre>
	         *       'max-visible-distance': -1,  //最大可是距离
	         *       'min-visible-distance': -1,              //最小可是距离
	         *       'min-visible-range': -1,                    //最小可视相机高度
	         *       'max-visible-range': -1,                    //最大可视相机高度
	         *       'render-lighting': true,                //是否开启渲染灯光(Pro版)
	         *       'render-transparent': true,             //是否开启透明
	         *       'render-backface-culling': true,        //是否剔除背面
	         *       'mesh-mode': 'fill',                    //填充方式
	         *       'mesh-roll': 0,                         //翻滚角
	         *       'mesh-scale': 1,                        //等比例缩放
	         *       'mesh-pitch': 0,                        //俯仰角
	         *       'meah-heading': 0                       //偏航角
	         * </pre>
	         */

	        value: function _callBack(msg) {
	            _get(LocalMesh.prototype.__proto__ || Object.getPrototypeOf(LocalMesh.prototype), '_callBack', this).call(this, msg);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.LocalMesh;
	        }

	        /**
	         * 设置几何体数据或数据路径
	         * @property drawable
	         * @type drawable{Object}
	         */

	    }, {
	        key: 'drawable',
	        set: function set(drawable) {
	            this._drawable = new _Drawable2.default(drawable);
	            this._updateProperty('drawable');
	        },
	        get: function get() {
	            return this._drawable;
	        }

	        /**
	         * 纹理贴图路径
	         * @property texture
	         * @type {String}
	         */

	    }, {
	        key: 'texture',
	        set: function set(url) {
	            this._texture = url;
	            this._updateProperty('texture');
	        },
	        get: function get() {
	            return this._texture;
	        }
	    }]);

	    return LocalMesh;
	}(_PositionBaseNode3.default);

	exports.default = LocalMesh;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "LocalMesh.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Drawable.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-05-2 16:14:16
	 * 用途：储存Mesh的颜色,顶点,基础数据
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	/**
	 * 储存mesh基础数据的类
	 * @module node
	 * @class Drawable
	 */
	var Drawable = function () {
	    function Drawable() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, Drawable);

	        if (params.url) {
	            this.url = params.url;
	        } else {
	            if (params.colors) this.colors = params.colors;
	            if (params.vertices) this.vertices = params.vertices;
	            if (params.type) this.type = params.type;
	            if (params.texturecoords) this.texturecoords = params.texturecoords;
	        }
	    }

	    _createClass(Drawable, [{
	        key: 'toXml',
	        value: function toXml() {
	            var innerXML = '';
	            if (this.url) {
	                innerXML = '<url>' + this.url + '</url>';
	            } else {
	                innerXML += '<colors>' + Util.arrayToStr(this.colors) + '</colors>';
	                innerXML += '<vertices>' + Util.arrayToStr(this.vertices) + '</vertices>';
	                innerXML += '<texturecoords>' + Util.arrayToStr(this.texturecoords) + '</texturecoords>';
	                innerXML += '<type>' + this.type + '</type>';
	            }

	            innerXML = '<' + this.tag + '>' + innerXML + '</' + this.tag + '>';
	            return innerXML;
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var obj = {};
	            if (this.url) {
	                obj.url = this.url;
	            } else {
	                if (this.colors) obj.colors = Util.arrayToStr(this._color);
	                if (this.vertices) obj.vertices = Util.arrayToStr(this._vertices);
	                if (this.texturecoords) obj.texturecoords = Util.arrayToStr(this._texturecoords);
	                if (this.type) obj.type = this.type;
	            }
	            return { drawable: obj };
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Drawable;
	        }

	        /**
	         * 数据路径
	         * @property url
	         * @type {String}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            this._url = url;
	        },
	        get: function get() {
	            return this._url;
	        }

	        /**
	         * 顶点数据
	         * @property vertices
	         * @type {Array}
	         */

	    }, {
	        key: 'vertices',
	        set: function set(vertices) {
	            if (typeof vertices === "string") {
	                vertices = Util.strToArray(vertices);
	            }
	            this._vertices = vertices;
	        },
	        get: function get() {
	            return this._vertices;
	        }

	        /**
	         * 数据组织的数据类型
	         * @property type
	         * @type {GV.DRAWABLETYPE}
	         */

	    }, {
	        key: 'type',
	        set: function set(type) {
	            this._type = type;
	        },
	        get: function get() {
	            return this._type;
	        }

	        /**
	         * 颜色数据
	         * @property color
	         * @type {Array}
	         */

	    }, {
	        key: 'colors',
	        set: function set(color) {
	            if (typeof color === "string") {
	                color = Util.strToArray(color, 'string');
	            }
	            this._color = color;
	        },
	        get: function get() {
	            return this._color;
	        }

	        /**
	         * 纹理坐标
	         * @property texturecoords
	         * @type {Array}
	         */

	    }, {
	        key: 'texturecoords',
	        set: function set(texturecoords) {
	            this._texturecoords = texturecoords;
	        },
	        get: function get() {
	            return this._texturecoords;
	        }
	    }]);

	    return Drawable;
	}();

	exports.default = Drawable;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Drawable.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：GeoMesh.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：自定义几何体对象,支持地理坐标系
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Node = __webpack_require__(61);

	var _Node2 = _interopRequireDefault(_Node);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Drawable = __webpack_require__(89);

	var _Drawable2 = _interopRequireDefault(_Drawable);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 自定义几何体对象,支持地理坐标系
	 * @namespace GV
	 * @extends GV.Node
	 * @class GeoMesh
	 * @constructor
	 */
	var GeoMesh = function (_BaseNode) {
	    _inherits(GeoMesh, _BaseNode);

	    function GeoMesh() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, GeoMesh);

	        return _possibleConstructorReturn(this, (GeoMesh.__proto__ || Object.getPrototypeOf(GeoMesh)).call(this, params));
	    }

	    _createClass(GeoMesh, [{
	        key: '_callBack',

	        /**
	         * @property style
	         * @description <br>
	         * <pre>
	         *       'max-visible-distance': -1,  //最大可是距离
	         *       'min-visible-distance': -1,              //最小可是距离
	         *       'min-visible-range': -1,                    //最小可视相机高度
	         *       'max-visible-range': -1,                    //最大可视相机高度
	         *       'render-lighting': true,                //是否开启渲染灯光(Pro版本)
	         *       'render-transparent': true,             //是否开启透明
	         *       'render-backface-culling': true,        //是否剔除背面
	         *       'mesh-mode': 'fill',                    //填充方式
	         * </pre>
	         */

	        value: function _callBack(msg) {
	            _get(GeoMesh.prototype.__proto__ || Object.getPrototypeOf(GeoMesh.prototype), '_callBack', this).call(this, msg);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.GeoMesh;
	        }

	        /**
	         * 设置几何体数据或数据路径
	         * @property drawable
	         * @type drawable{Object}
	         */

	    }, {
	        key: 'drawable',
	        set: function set(drawable) {
	            this._drawable = new _Drawable2.default(drawable);
	            this._updateProperty('drawable');
	        },
	        get: function get() {
	            return this._drawable;
	        }

	        /**
	         * GeoJson文件路径
	         * @property url
	         * @type {String}
	         */

	    }, {
	        key: 'geoJsonUrl',
	        set: function set(url) {
	            this._geoJsonUrl = url;
	        },
	        get: function get() {
	            return this._geoJsonUrl;
	        }

	        /**
	         * GeoJson字符串
	         * @property geoJson
	         * @type {String} geoJson字符串
	         */

	    }, {
	        key: 'geoJsonStr',
	        set: function set(string) {
	            this._geoJsonStr = string;
	        },
	        get: function get() {
	            return this._geoJsonStr;
	        }

	        /**
	         * 纹理贴图路径
	         * @property texture
	         * @type {String}
	         */

	    }, {
	        key: 'texture',
	        set: function set(url) {
	            this._texture = url;
	            this._updateProperty('texture');
	        },
	        get: function get() {
	            return this._texture;
	        }
	    }]);

	    return GeoMesh;
	}(_Node2.default);

	exports.default = GeoMesh;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "GeoMesh.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：PointCloud.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：点云类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 点云类(免费版无该标绘实体)
	 * @namespace GV
	 * @extends GV.PositionBaseNode
	 * @class PointCloud
	 * @constructor
	 * @param {Json} [params] 参数
	 */
	var PointCloud = function (_PositionBaseNode) {
	    _inherits(PointCloud, _PositionBaseNode);

	    function PointCloud() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, PointCloud);

	        return _possibleConstructorReturn(this, (PointCloud.__proto__ || Object.getPrototypeOf(PointCloud)).call(this, params));
	    }

	    _createClass(PointCloud, [{
	        key: '_callBack',

	        /**
	         * @property style
	         * @description 点云样式集 <br>
	         * <pre>
	         *   'max-visible-distance': -1,  //最大可是距离
	         *   'min-visible-distance': -1,              //最小可是距离
	         *   'min-visible-range': -1,                    //最小可视相机高度
	         *   'max-visible-range': -1,                    //最大可视相机高度
	         *   'point-size': 10,             //点的大小
	         *   'point-fill': '#FF0000FF',    //点的颜色
	         *   'mesh-roll': 0,                         //翻滚角
	         *   'mesh-scale': 1,                        //等比例缩放
	         *   'mesh-pitch': 0,                        //俯仰角
	         *   'meah-heading': 0                       //偏航角
	         * </pre>
	         */

	        value: function _callBack(msg) {
	            _get(PointCloud.prototype.__proto__ || Object.getPrototypeOf(PointCloud.prototype), '_callBack', this).call(this, msg);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.PointCloud;
	        }

	        /**
	         * 点云贴图url
	         * @property 
	         * @type {String}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            this._url = url;
	            this._updateProperty('url');
	        },
	        get: function get() {
	            return this._url;
	        }

	        /**
	         * 点云资源路径
	         * @property dataUrl
	         * @type {String}
	         */

	    }, {
	        key: 'dataUrl',
	        set: function set(dataUrl) {
	            this._dataUrl = dataUrl;
	            this._updateProperty('dataUrl');
	        },
	        get: function get() {
	            return this._dataUrl;
	        }
	    }]);

	    return PointCloud;
	}(_PositionBaseNode3.default);

	exports.default = PointCloud;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "PointCloud.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：PointEffect.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：点特效类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 点特效(免费版无该标绘实体)
	 * @namespace GV
	 * @extends GV.BaseNode
	 * @class PointEffect
	 * @constructor
	 * @param {Json} [params] 参数
	 * @param {Json} params.position 点特效位置
	 * @param {Json} params.resourcePath 点特效资源路径
	 */
	var PointEffect = function (_PositionBaseNode) {
	    _inherits(PointEffect, _PositionBaseNode);

	    function PointEffect() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, PointEffect);

	        return _possibleConstructorReturn(this, (PointEffect.__proto__ || Object.getPrototypeOf(PointEffect)).call(this, params));
	    }

	    /**
	     * @property tag
	     * @type TagsEnum
	     */

	    _createClass(PointEffect, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            console.log(msg);
	            _get(PointEffect.prototype.__proto__ || Object.getPrototypeOf(PointEffect.prototype), '_callBack', this).call(this, msg);
	        }

	        /**
	         * @property style
	         * @description 支持的样式类型及默认值: <br>
	         *      <pre>
	         *          'effect-size': 1,                           //设置大小
	         *          'effect-frequency': 1,                      //点特效一个周期的时长
	         *          'effect-duration': 100,                     //点特效次数
	         *          'effect-mode': GV.POINT_EFFECT_MODE.FLICKER //点特效模式
	         *          'rotation-direction': true                  //显示模式为旋转时，true表示顺时针旋转
	         *          'scale-type': GV.POINT_EFFECT_SCALE_MODE.LARGETOSMALL   //当显示模式为闪烁时，的闪烁模式
	         *      </pre>
	         * 
	         */

	        // /**
	        //  * 特效大小
	        //  * @property size
	        //  * @type {String}
	        //  */
	        // set size(size) {
	        //     this._size = size;
	        //     this._updateProperty('size');
	        // }

	        // get size() {
	        //     return this._size;
	        // }

	        // /**
	        //  * 闪烁 旋转 缩放 的频率(单位秒)
	        //  * @property frequency
	        //  * @type {Number}
	        //  */
	        // set frequency(frequency) {
	        //     this._frequency = frequency;
	        // }

	        // get frequency() {
	        //     return this._frequency;
	        // }

	        // /**
	        //  * 相对绑定对象中心的位置偏移量
	        //  * @property offset
	        //  * @type {x:, y:, z:}
	        //  */
	        // set offset(offset) {
	        //     this._offset = offset;
	        // }

	        // get offset() {
	        //     return this._offset;
	        // }

	        // /**
	        //  * 特效时长
	        //  * @property duration
	        //  * @type {Number}
	        //  */
	        // set duration(duration) {
	        //     this._duration = duration;
	        // }

	        // get duration() {
	        //     return this._duration;
	        // }

	        // /**
	        //  * 特效类型
	        //  * @property type
	        //  * @type {Number}
	        //  * @default 1
	        //  */
	        // set type(type) {
	        //     this._type = type;
	        // }

	        // get type() {
	        //     return this._type;
	        // }

	        // toXml() {
	        //     console.log(this.position)
	        //     const positionXml = this.position.toXml();
	        //     const innerXML = `${positionXml}`;
	        //     return this._toXml(innerXML);
	        // }

	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.PointEffect;
	        }

	        /**
	         * 特效大小
	         * @property size
	         * @type {String}
	         */

	    }, {
	        key: 'size',
	        set: function set(size) {
	            this._size = size;
	            this._updateProperty('size');
	        },
	        get: function get() {
	            return this._size;
	        }

	        /**
	         * 特效资源路径
	         * @property url
	         * @type {String}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            this._url = url;
	            this._updateProperty('resourcePath');
	        },
	        get: function get() {
	            return this._url;
	        }

	        /**
	         * 被绑定对象的id
	         * @property moveBy
	         * @type {String}
	         */

	    }, {
	        key: 'moveBy',
	        set: function set(id) {
	            this._moveBy = id;
	        },
	        get: function get() {
	            return this._moveBy;
	        }

	        /**
	         * 绑定标会对象的id
	         * @property bindingObject
	         * @type {String}
	         */

	    }, {
	        key: 'bindingObject',
	        set: function set(obj) {
	            if (obj === this._bindingObject) return;
	            if (obj === '' || obj === undefined || obj === null) {
	                this._bindingObject = '';
	                this._updateProperty('bindingObject');
	                return;
	            }

	            if (obj instanceof Object) {
	                obj = obj.id;
	            }

	            this._bindingObject = obj;
	            this._updateProperty('bindingObject');
	        },
	        get: function get() {
	            return this._bindingObject;
	        }
	    }]);

	    return PointEffect;
	}(_PositionBaseNode3.default);

	exports.default = PointEffect;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "PointEffect.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：RainEffect.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-07-18 20:14:16
	 * 用途：火效类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 火特效(免费版无该标绘实体)
	 * @namespace GV
	 * @extends GV.Node
	 * @class FireEffect
	 * @constructor
	 * @param {Json} [params] 参数
	 * @param {Json} params.position 火特效位置
	 * @param {Json} params.resourcePath 火特效资源路径
	 */
	var FireEffectNode = function (_PositionBaseNode) {
	    _inherits(FireEffectNode, _PositionBaseNode);

	    function FireEffectNode() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, FireEffectNode);

	        return _possibleConstructorReturn(this, (FireEffectNode.__proto__ || Object.getPrototypeOf(FireEffectNode)).call(this, params));
	    }

	    _createClass(FireEffectNode, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            _get(FireEffectNode.prototype.__proto__ || Object.getPrototypeOf(FireEffectNode.prototype), '_callBack', this).call(this, msg);
	        }

	        /**
	         * @property style
	         * @description 支持的样式类型及默认值: <br>
	         * <pre>
	         *  'effect-size': 1                           //设置大小
	         * </pre>
	         * 
	         */

	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.FireEffect;
	        }

	        /**
	         * 特效资源路径
	         * @property resourcePath
	         * @type {String}
	         */

	    }, {
	        key: 'resourcePath',
	        set: function set(resourcePath) {
	            this._resourcePath = resourcePath;
	            this._updateProperty('resourcePath');
	        },
	        get: function get() {
	            return this._resourcePath;
	        }

	        /**
	         * 绑定标会对象的id
	         * @property bindingObject
	         * @type {String}
	         */

	    }, {
	        key: 'bindingObject',
	        set: function set(obj) {
	            if (obj === this._bindingObject) return;
	            if (obj === '' || obj === undefined || obj === null) {
	                this._bindingObject = '';
	                this._updateProperty('bindingObject');
	                return;
	            }

	            if (obj instanceof Object) {
	                obj = obj.id;
	            }

	            this._bindingObject = obj;
	            this._updateProperty('bindingObject');
	        },
	        get: function get() {
	            return this._bindingObject;
	        }
	    }]);

	    return FireEffectNode;
	}(_PositionBaseNode3.default);

	exports.default = FireEffectNode;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "FireEffect.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：RainEffect.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-07-18 20:14:16
	 * 用途：雨效类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 雨特效(免费版无该标绘实体)
	 * @namespace GV
	 * @extends GV.Node
	 * @class RainEffect
	 * @constructor
	 * @param {Json} [params] 参数
	 * @param {Json} params.position 雨特效位置
	 * @param {Json} params.resourcePath 雨特效资源路径
	 */
	var RainEffectNode = function (_PositionBaseNode) {
	    _inherits(RainEffectNode, _PositionBaseNode);

	    function RainEffectNode() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, RainEffectNode);

	        return _possibleConstructorReturn(this, (RainEffectNode.__proto__ || Object.getPrototypeOf(RainEffectNode)).call(this, params));
	    }

	    _createClass(RainEffectNode, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            _get(RainEffectNode.prototype.__proto__ || Object.getPrototypeOf(RainEffectNode.prototype), '_callBack', this).call(this, msg);
	        }

	        /**
	         * @property style
	         * @description 支持的样式类型及默认值: <br>
	         * <pre>
	         *  'effect-size': 1                           //设置大小
	         * </pre>
	         * 
	         */

	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.RainEffect;
	        }

	        /**
	         * 特效资源路径
	         * @property resourcePath
	         * @type {String}
	         */

	    }, {
	        key: 'resourcePath',
	        set: function set(resourcePath) {
	            this._resourcePath = resourcePath;
	            this._updateProperty('resourcePath');
	        },
	        get: function get() {
	            return this._resourcePath;
	        }

	        /**
	         * 绑定标会对象的id
	         * @property bindingObject
	         * @type {String}
	         */

	    }, {
	        key: 'bindingObject',
	        set: function set(obj) {
	            if (obj === this._bindingObject) return;
	            if (obj === '' || obj === undefined || obj === null) {
	                this._bindingObject = '';
	                this._updateProperty('bindingObject');
	                return;
	            }

	            if (obj instanceof Object) {
	                obj = obj.id;
	            }

	            this._bindingObject = obj;
	            this._updateProperty('bindingObject');
	        },
	        get: function get() {
	            return this._bindingObject;
	        }
	    }]);

	    return RainEffectNode;
	}(_PositionBaseNode3.default);

	exports.default = RainEffectNode;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "RainEffect.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：SmokeEffect.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-07-18 20:14:16
	 * 用途：烟特效类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 烟特效(免费版无该标绘实体)
	 * @namespace GV
	 * @extends GV.Node
	 * @class SmokeEffect
	 * @constructor
	 * @param {Json} [params] 参数
	 * @param {Json} params.position 烟特效位置
	 * @param {Json} params.resourcePath 烟特效资源路径
	 */
	var SmokeEffectNode = function (_PositionBaseNode) {
	    _inherits(SmokeEffectNode, _PositionBaseNode);

	    function SmokeEffectNode() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, SmokeEffectNode);

	        return _possibleConstructorReturn(this, (SmokeEffectNode.__proto__ || Object.getPrototypeOf(SmokeEffectNode)).call(this, params));
	    }

	    _createClass(SmokeEffectNode, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            _get(SmokeEffectNode.prototype.__proto__ || Object.getPrototypeOf(SmokeEffectNode.prototype), '_callBack', this).call(this, msg);
	        }

	        /**
	         * @property style
	         * @description 支持的样式类型及默认值: <br>
	         * <pre>
	         *  'effect-size': 1                           //设置大小
	         * </pre>
	         * 
	         */

	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.SmokeEffect;
	        }

	        /**
	         * 特效资源路径
	         * @property resourcePath
	         * @type {String}
	         */

	    }, {
	        key: 'resourcePath',
	        set: function set(resourcePath) {
	            this._resourcePath = resourcePath;
	            this._updateProperty('resourcePath');
	        },
	        get: function get() {
	            return this._resourcePath;
	        }

	        /**
	         * 绑定标会对象的id
	         * @property bindingObject
	         * @type {String}
	         */

	    }, {
	        key: 'bindingObject',
	        set: function set(obj) {
	            if (obj === this._bindingObject) return;
	            if (obj === '' || obj === undefined || obj === null) {
	                this._bindingObject = '';
	                this._updateProperty('bindingObject');
	                return;
	            }

	            if (obj instanceof Object) {
	                obj = obj.id;
	            }

	            this._bindingObject = obj;
	            this._updateProperty('bindingObject');
	        },
	        get: function get() {
	            return this._bindingObject;
	        }
	    }]);

	    return SmokeEffectNode;
	}(_PositionBaseNode3.default);

	exports.default = SmokeEffectNode;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "SmokeEffect.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：WaveEffect.js
	 * 作者：liq
	 * 部门：产品研发中心
	 * 邮箱：liq@geovis.com.cn
	 * 日期：2017-08-01 09:33:00
	 * 用途：波束特效类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _Position = __webpack_require__(68);

	var _Position2 = _interopRequireDefault(_Position);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 波束特效{}
	 * @namespace GV
	 * @extends GV.Node
	 * @class FireEffect
	 * @constructor
	 * @param {Json} [params] 参数
	 * @param {Json} params.startPosition 波束特效开始位置
	 * @param {Json} params.targetPosition 波束特效结束位置
	 * @param {Json} params.type 波束特效类型
	 * @param {Json} params.loaderColor 波段锥颜色
	 * @param {Json} params.loaderColorSmall 波段内锥颜色
	 * @param {Json} params.radius 波束末端半径
	 * @param {Json} params.density 波束密度
	 * @param {Json} params.speed 波束速度
	 * @param {Json} params.interShinning 闪烁次数
	 * @param {Json} params.ratioInner 大扫射波和小扫射波比率
	 * @param {Json} params.horizonalScanAngle 横向扫描角
	 * @param {Json} params.verticalScanAngle 纵向扫描角
	 * @param {Json} params.showScanScope 是否显示扫描范围
	 * @param {Json} params.interShinning 闪烁次数
	 */
	var WaveEffectNode = function (_PositionBaseNode) {
	    _inherits(WaveEffectNode, _PositionBaseNode);

	    function WaveEffectNode() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, WaveEffectNode);

	        return _possibleConstructorReturn(this, (WaveEffectNode.__proto__ || Object.getPrototypeOf(WaveEffectNode)).call(this, params));
	    }

	    _createClass(WaveEffectNode, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            console.log(msg);
	            _get(WaveEffectNode.prototype.__proto__ || Object.getPrototypeOf(WaveEffectNode.prototype), '_callBack', this).call(this, msg);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.WaveEffect;
	        }

	        /**
	         * 波束特效起始位置
	         * @property position
	         * @param Object
	         * @description {lon: 经度, lat: 纬度, alt: 高度}
	         */

	    }, {
	        key: 'startPosition',
	        set: function set(position) {
	            if (Util.$.isPlainObject(position) && Util.$.isFunction(position.toJSON)) {
	                position = position.toJSON();
	            }
	            if (Util.isJson(position)) {
	                this._startPosition = new _Position2.default(position, this);
	                this._updateProperty('startPosition');
	            }
	        },
	        get: function get() {
	            return this._startPosition ? this._startPosition.toJSON() : null;
	        }

	        /**
	         * 波束特效结束位置
	         * @property position
	         * @param Object
	         * @description {lon: 经度, lat: 纬度, alt: 高度}
	         */

	    }, {
	        key: 'targetPosition',
	        set: function set(position) {
	            if (Util.$.isPlainObject(position) && Util.$.isFunction(position.toJSON)) {
	                position = position.toJSON();
	            }
	            if (Util.isJson(position)) {
	                this._targetPosition = new _Position2.default(position, this);
	                this._updateProperty('targetPosition');
	            }
	        },
	        get: function get() {
	            return this._targetPosition ? this._targetPosition.toJSON() : null;
	        }

	        /**
	         * 绑定标会开始对象的id
	         * @property bindingStartObject
	         * @type {String}
	         */

	    }, {
	        key: 'bindingStartObject',
	        set: function set(obj) {
	            if (obj === this._bindingStartObject) return;
	            if (obj === '' || obj === undefined || obj === null) {
	                this._bindingStartObject = '';
	                this._updateProperty('bindingStartObject');
	                return;
	            }

	            if (obj instanceof Object) {
	                obj = obj.id;
	            }

	            this._bindingStartObject = obj;
	            this._updateProperty('bindingStartObject');
	        },
	        get: function get() {
	            return this._bindingStartObject;
	        }

	        /**
	         * 绑定标会开始对象的id
	         * @property bindingTargetObject
	         * @type {String}
	         */

	    }, {
	        key: 'bindingTargetObject',
	        set: function set(obj) {
	            if (obj === this._bindingTargetObject) return;
	            if (obj === '' || obj === undefined || obj === null) {
	                this._bindingTargetObject = '';
	                this._updateProperty('bindingTargetObject');
	                return;
	            }

	            if (obj instanceof Object) {
	                obj = obj.id;
	            }

	            this._bindingTargetObject = obj;
	            this._updateProperty('bindingTargetObject');
	        },
	        get: function get() {
	            return this._bindingTargetObject;
	        }

	        /**
	         * 波束特效类型
	         * @property type
	         * @param Number
	         * @description 
	         */

	    }, {
	        key: 'type',
	        set: function set(type) {
	            this._type = type;
	        },
	        get: function get() {
	            return this._type;
	        }

	        // /**
	        //  * 波束特效的扫描半径
	        //  * @property radius
	        //  * @param Number
	        //  * @description 扫描半径
	        //  */
	        // set scanRadius(radius) {
	        //     this._scanRadius = radius;
	        //     this._updateProperty('scanRadius');
	        // }

	        // get scanRadius() {
	        //     return this._scanRadius;
	        // }

	        /**
	         * 波束特效锥的颜色
	         * @property color
	         * @param String
	         * @description 波段锥的颜色，每种波频对应一种颜色
	         */

	    }, {
	        key: 'loaderColor',
	        set: function set(color) {
	            this._loaderColor = color;
	            this._updateProperty('loaderColor');
	        },
	        get: function get() {
	            return this._loaderColor || '#FFFFFFFF';
	        }

	        /**
	         * 波束特效锥的内锥颜色
	         * @property color
	         * @param String
	         * @description 波段锥的内锥颜色
	         */

	    }, {
	        key: 'loaderColorSmall',
	        set: function set(color) {
	            this._loaderColorSmall = color;
	            this._updateProperty('loaderColorSmall');
	        },
	        get: function get() {
	            return this._loaderColorSmall || '#0000FFFF';
	        }

	        /**
	         * 波束特效的单位圆锥半径
	         * @property radius
	         * @param Number
	         * @description 单位圆锥半径
	         */

	    }, {
	        key: 'radius',
	        set: function set(radius) {
	            this._radius = radius;
	            this._updateProperty('radius');
	        },
	        get: function get() {
	            return this._radius;
	        }
	    }, {
	        key: 'scanRaduis',
	        set: function set(radius) {
	            this._scanRaduis = radius;
	            this._updateProperty('scanRaduis');
	        },
	        get: function get() {
	            return this._scanRaduis;
	        }

	        /**
	         * 波束特效的顶点个数
	         * @property number
	         * @param Number
	         * @description 顶点个数
	         */

	    }, {
	        key: 'pointNumber',
	        set: function set(number) {
	            this._pointNumber = number;
	            this._updateProperty('pointNumber');
	        },
	        get: function get() {
	            return this._pointNumber;
	        }

	        /**
	         * 大扫射波与小扫射波比率
	         * @property ratio
	         * @param Number
	         * @description 大扫射波与小扫射波比率
	         */

	    }, {
	        key: 'ratioInner',
	        set: function set(ratio) {
	            this._ratioInner = ratio;
	            this._updateProperty('ratioInner');
	        },
	        get: function get() {
	            return this._ratioInner;
	        }

	        /**
	         * 锥矩形波束的长宽比
	         * @property ratio
	         * @param Number
	         * @description 锥矩形波束的长宽比
	         */

	    }, {
	        key: 'ratioLengthAndWidth',
	        set: function set(ratio) {
	            this._ratioLengthAndWidth = ratio;
	            this._updateProperty('ratioLengthAndWidth');
	        },
	        get: function get() {
	            return this._ratioLengthAndWidth;
	        }

	        /**
	         * 波束宽度比
	         * @property ratio
	         * @param Number
	         * @description 波束宽度比
	         */

	    }, {
	        key: 'widthRatio',
	        set: function set(ratio) {
	            this._widthRatio = ratio;
	            this._updateProperty('widthRatio');
	        },
	        get: function get() {
	            return this._widthRatio;
	        }

	        /**
	         * 波束密度
	         * @property density
	         * @param Number
	         * @description 波束密度
	         */

	    }, {
	        key: 'density',
	        set: function set(density) {
	            this._density = density;
	            this._updateProperty(density);
	        },
	        get: function get() {
	            return this._density;
	        }

	        /**
	         * 波束速度
	         * @property speed
	         * @param Number
	         * @description 波束速度
	         */

	    }, {
	        key: 'speed',
	        set: function set(speed) {
	            this._speed = speed;
	            this._updateProperty('spped');
	        },
	        get: function get() {
	            return this._speed;
	        }

	        /**
	         * 横向扫描角
	         * @property angle
	         * @param Number
	         * @description 横向扫描角
	         */

	    }, {
	        key: 'horizonalScanAngle',
	        set: function set(angle) {
	            this._horizonalScanAngle = angle;
	            this._updateProperty('horizonalScanAngle');
	        },
	        get: function get() {
	            return this._horizonalScanAngle;
	        }

	        /**
	         * 纵向扫描角
	         * @property angle
	         * @param Number
	         * @description 纵向扫描角
	         */

	    }, {
	        key: 'verticalScanAngle',
	        set: function set(angle) {
	            this._verticalScanAngle = angle;
	            this._updateProperty('verticalScanAngle');
	        },
	        get: function get() {
	            return this._verticalScanAngle;
	        }

	        /**
	         * 是否显示扫描范围
	         * @property speed
	         * @param Boolean
	         * @description 是否显示扫描范围
	         */

	    }, {
	        key: 'showScanScope',
	        set: function set(show) {
	            this._showScanScope = show;
	            this._updateProperty('showScanScope');
	        },
	        get: function get() {
	            return this._showScanScope;
	        }

	        /**
	         * 闪烁次数
	         * @property count
	         * @param Number
	         * @description 闪烁次数
	         */

	    }, {
	        key: 'interShinning',
	        set: function set(count) {
	            this._interShinning = count;
	            this._updateProperty('interShinning');
	        },
	        get: function get() {
	            return this._interShinning;
	        }
	    }, {
	        key: 'waveXRotateAngle',
	        set: function set(angle) {
	            this._waveXRotateAngle = angle;
	            this._updateProperty('waveXRotateAngle');
	        },
	        get: function get() {
	            return this._waveXRotateAngle;
	        }
	    }]);

	    return WaveEffectNode;
	}(_PositionBaseNode3.default);

	exports.default = WaveEffectNode;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "WaveEffect.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * ExplosionEffect.js
	 * 作者：李强
	 * 部门：产品研发中心
	 * 邮箱：liq@geovis.com.cn
	 * 日期：2017-08-22 14:48:50
	 * 用途：爆炸特效类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 爆炸特效(免费版无该标绘实体)
	 * @namespace GV
	 * @extends GV.Node
	 * @class ExplosionEffect
	 * @constructor
	 * @param {Json} [params] 参数
	 * @param {Json} params.position 爆炸特效位置
	 * @param {Json} params.resourcePath 爆炸特效资源路径
	 */
	var ExplosionEffect = function (_PositionBaseNode) {
	    _inherits(ExplosionEffect, _PositionBaseNode);

	    function ExplosionEffect() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, ExplosionEffect);

	        return _possibleConstructorReturn(this, (ExplosionEffect.__proto__ || Object.getPrototypeOf(ExplosionEffect)).call(this, params));
	    }

	    _createClass(ExplosionEffect, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            _get(ExplosionEffect.prototype.__proto__ || Object.getPrototypeOf(ExplosionEffect.prototype), '_callBack', this).call(this, msg);
	        }

	        /**
	         * @property style
	         * @description 支持的样式类型及默认值: <br>
	         * <pre>
	         *  'effect-size': 1                           //设置大小
	         * </pre>
	         * 
	         */

	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.ExplosionEffect;
	        }

	        /**
	         * 特效资源路径
	         * @property resourcePath
	         * @type {String}
	         */

	    }, {
	        key: 'resourcePath',
	        set: function set(resourcePath) {
	            this._resourcePath = resourcePath;
	            this._updateProperty('resourcePath');
	        },
	        get: function get() {
	            return this._resourcePath;
	        }

	        /**
	         * 绑定标会对象的id
	         * @property bindingObject
	         * @type {String}
	         */

	    }, {
	        key: 'bindingObject',
	        set: function set(obj) {
	            if (obj === this._bindingObject) return;
	            if (obj === '' || obj === undefined || obj === null) {
	                this._bindingObject = '';
	                this._updateProperty('bindingObject');
	                return;
	            }

	            if (obj instanceof Object) {
	                obj = obj.id;
	            }

	            this._bindingObject = obj;
	            this._updateProperty('bindingObject');
	        },
	        get: function get() {
	            return this._bindingObject;
	        }
	    }]);

	    return ExplosionEffect;
	}(_PositionBaseNode3.default);

	exports.default = ExplosionEffect;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ExplosionEffect.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：DynTargetScene.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2016-07-19 09:32:05
	 * 用途：类
	 */

	'use strict';

	/**
	 * @module scene
	 */

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Scene2 = __webpack_require__(60);

	var _Scene3 = _interopRequireDefault(_Scene2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Util = __webpack_require__(6);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 场景类,对态势场景的控制(免费版无该标绘场景)
	 * @namespace GV
	 * @class DynTargetScene
	 * @extends GV.Scene
	 */
	var DynTargetScene = function (_Scene) {
	    _inherits(DynTargetScene, _Scene);

	    function DynTargetScene(param) {
	        _classCallCheck(this, DynTargetScene);

	        var _this = _possibleConstructorReturn(this, (DynTargetScene.__proto__ || Object.getPrototypeOf(DynTargetScene)).call(this, param));

	        _this._TargetMap = new Map();

	        _this._createDyntargetCallback = [];

	        _this._onCreateTargetUpdate = [];
	        _this._getAllTargetsInfo = new Map();
	        return _this;
	    }

	    _createClass(DynTargetScene, [{
	        key: '_parseNode',
	        value: function _parseNode(paramJson) {}
	    }, {
	        key: 'startloadzmq',
	        value: function startloadzmq() {
	            if (this._startloadzmq) return;
	            this.postMessage('startloadzmq');
	            this._startloadzmq = true;
	        }

	        /**
	         * 获取当前态势所有的数据信息
	         * @method getAllTargetsInfo
	         * @param {function}
	         */

	    }, {
	        key: 'getAllTargetsInfo',
	        value: function getAllTargetsInfo(fun) {
	            if (typeof fun !== 'function') return;
	            var id = (0, _Util.createGuid)();
	            this._getAllTargetsInfo.set(id, fun);
	            this.postMessage(_MessageSet2.default.DynTargetScene.getAllTargetsInfo, id);
	        }

	        /**
	         * 监听态势创建完成信息 （当initVisible = false时使用）
	         */

	    }, {
	        key: 'onCreateTargetUpdate',
	        value: function onCreateTargetUpdate(callback) {
	            if (typeof callback === 'function') _onCreateTargetUpdate.push(callback);
	        }

	        /**
	         * 取消监听态势创建完成信息
	         */

	    }, {
	        key: 'offCreateTargetUpdate',
	        value: function offCreateTargetUpdate(callback) {
	            var i = this._onCreateTargetUpdate.indexOf(callback);
	            if (i >= 0) {
	                this._onCreateTargetUpdate.splice(i, 1);
	            }
	        }

	        /**
	         * 清空态势创建接口监听
	         */

	    }, {
	        key: 'clearCreateTargetUpdate',
	        value: function clearCreateTargetUpdate() {
	            this._onCreateTargetUpdate = [];
	        }
	    }, {
	        key: 'radarUnionHeight',
	        value: function radarUnionHeight(data) {
	            // if(data === undefined) return;
	            this.postMessage('RadarUnionHeight', data);
	        }
	    }, {
	        key: 'radarUnionName',
	        value: function radarUnionName(data) {
	            // if(data === undefined) return;
	            this.postMessage('RadarUnionName', data);
	        }
	    }, {
	        key: 'radarModelChanged',
	        value: function radarModelChanged(data) {
	            // if(data === undefined) return;
	            this.postMessage('RadarModelChanged', data);
	        }

	        /**
	         * 获取态势中所有图层
	         * @method getLayersName
	         * @param {Function} fun  回调函数fun([layerName1, layerName2, layerName3,……])回调函数的参数是图层名称的数组， 未获取到图层则返回NULL
	         */

	    }, {
	        key: 'getLayersName',
	        value: function getLayersName(fun) {
	            if (_Util.$.isFunction(fun)) {
	                if (!this._getLayersName) this._getLayersName = new Map();
	                var id = (0, _Util.createGuid)();
	                this._getLayersName.set(id, fun);
	                this.postMessage(_MessageSet2.default.DynTargetScene.getLayersName, id);
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getLayersName', 'Function'));
	            }
	        }

	        /**
	         * 设置图层的显隐状态
	         * @method setLayerVisible
	         * @param {String} layerName  图层名称
	         * @param {Boolean} visible 显隐状态
	         */

	    }, {
	        key: 'setLayerVisible',
	        value: function setLayerVisible(layerName, visible) {
	            if (layerName !== undefined) {
	                if ((0, _Util.isTrueOrFalse)(visible)) {
	                    this.postMessage(_MessageSet2.default.DynTargetScene.setLayerVisible, {
	                        layerName: layerName,
	                        visible: visible
	                    });
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getLayersName', 'Boolean'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'setLayerVisible', 'String'));
	            }
	        }

	        /**
	         * 获得图层的显隐状态
	         * @method getLayerVisible
	         * @param {String} layerName  图层名称
	         * @param {Function} fun  回调函数fun(vsible)回调函数的参数是可见状态，可见为true，不可见为false，图层不存在返回undefined
	         */

	    }, {
	        key: 'getLayerVisible',
	        value: function getLayerVisible(layerName, fun) {
	            if (layerName !== undefined) {
	                if (_Util.$.isFunction(fun)) {
	                    if (!this._getLayerVisible) this._getLayerVisible = new Map();
	                    var id = (0, _Util.createGuid)();
	                    this._getLayerVisible.set(id, fun);
	                    this.postMessage(_MessageSet2.default.DynTargetScene.getLayerVisible, {
	                        key: id,
	                        layerName: layerName
	                    });
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getLayerVisible', 'Function'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'setLayerVisible', 'String'));
	            }
	        }

	        /**
	         * 删除图层
	         * @method removeLayer
	         * @param {String} layerName 图层名称
	         */

	    }, {
	        key: 'removeLayer',
	        value: function removeLayer(layerName) {
	            if (layerName !== undefined) {
	                this.postMessage(_MessageSet2.default.DynTargetScene.removeLayer, layerName);
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'removeLayer', 'String'));
	            }
	        }

	        /**
	         * 重命名图层
	         * @method renameLayer
	         * @param {String} layerName 图层名称
	         * @param {String} newLayerName 修改后图层的名称
	         */

	    }, {
	        key: 'renameLayer',
	        value: function renameLayer(layerName, newLayerName) {
	            if (layerName !== undefined && newLayerName !== undefined) {
	                this.postMessage(_MessageSet2.default.DynTargetScene.renameLayer, {
	                    oldLayerName: layerName,
	                    newLayerName: newLayerName
	                });
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'renameLayer', 'String'));
	            }
	        }

	        /**
	         * 获取图层所有目标
	         * @method getTargetsFromLayer
	         * @param {String} layerName  图层名称
	         * @param {Function} fun 回调函数fun([{name, id, batId}, {name, id, batId}, {name, id, batId},……])回调函数的参数是由目标id、名称、batId（批号）组成的对象数组,当图层为空时返回null
	         */

	    }, {
	        key: 'getTargetsFromLayer',
	        value: function getTargetsFromLayer(layerName, fun) {
	            if (layerName !== undefined) {
	                if (_Util.$.isFunction(fun)) {
	                    if (!this._getTargetsFromLayer) this._getTargetsFromLayer = new Map();
	                    var id = (0, _Util.createGuid)();
	                    this._getTargetsFromLayer.set(id, fun);
	                    this.postMessage(_MessageSet2.default.DynTargetScene.getTargetsFromLayer, {
	                        key: id,
	                        layerName: layerName
	                    });
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getTargetsFromLayer', 'Function'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getTargetsFromLayer', 'String'));
	            }
	        }

	        /**
	         * 删除所有图层
	         * @method clearLayers
	         */

	    }, {
	        key: 'clearLayers',
	        value: function clearLayers() {
	            this.postMessage(_MessageSet2.default.DynTargetScene.clearLayers, '');
	        }

	        /**
	         * 创建目标连接线
	         * @method createConnectLine
	         * @param {String} startTargetName  开始目标名称
	         * @param {String} endTargetName  结束目标名称
	         * @param {String} name  连接线名称(该值缺省则自动命名)
	         */

	    }, {
	        key: 'createConnectLine',
	        value: function createConnectLine(startTargetName, endTargetName, name) {
	            if (startTargetName !== undefined && endTargetName !== undefined) {
	                if (name !== undefined) {
	                    this.postMessage(_MessageSet2.default.DynTargetScene.createConnectLine, {
	                        from_name: startTargetName,
	                        to_name: endTargetName,
	                        name: name,
	                        pictype: 3
	                    });
	                } else {
	                    this.postMessage(_MessageSet2.default.DynTargetScene.createConnectLine, {
	                        from_name: startTargetName,
	                        to_name: endTargetName,
	                        pictype: 3
	                    });
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'createConnectLine', 'String'));
	            }
	        }

	        /**
	         * 删除连线
	         * @method clearLayers
	         * @param {String} name  线名称
	         */

	    }, {
	        key: 'removeConnetLine',
	        value: function removeConnetLine(name) {
	            if (name !== undefined) {
	                this.postMessage(_MessageSet2.default.DynTargetScene.removeConnetLine, {
	                    name_line: name
	                });
	            }
	        }

	        /**
	         * 设置线的显隐状态
	         * @method setConnectLineVisible
	         * @param {String} name  线名称
	         * @param {Boolean} visible  显隐状态
	         */

	    }, {
	        key: 'setConnectLineVisible',
	        value: function setConnectLineVisible(name, visible) {
	            if (name !== undefined && (0, _Util.isTrueOrFalse)(visible)) {
	                this.postMessage(_MessageSet2.default.DynTargetScene.setConnectLineVisible, {
	                    name_line: name,
	                    v_mask: visible
	                });
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'setConnectLineVisible', 'String\Boolean'));
	            }
	        }

	        /**
	         * 删除所有连接
	         * @method clearConnetLines
	         */

	    }, {
	        key: 'clearConnetLines',
	        value: function clearConnetLines() {
	            this.postMessage(_MessageSet2.default.DynTargetScene.clearConnetLines, '');
	        }

	        /**
	         * 设置预警目标
	         * @method setTargetWarn
	         * @param {String} name 目标名称
	         * @param {String} type  预警类型  GV.TARGETWARNTYPE.ROTATE（旋转报警）；GV.TARGETWARNTYPE.FLICKER（闪烁报警）
	         */

	    }, {
	        key: 'setTargetWarn',
	        value: function setTargetWarn(name) {
	            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	            if (name !== undefined && (0, _Util.isStrNumber)(type)) {
	                this.postMessage(_MessageSet2.default.DynTargetScene.setTargetWarn, {
	                    name_item: name,
	                    type: type
	                });
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'removeTargtetWarn', 'String\Number'));
	            }
	        }

	        /**
	         * 取消预警目标
	         * @method removeTargtetWarn
	         * @param {String} name  目标名称
	         */

	    }, {
	        key: 'removeTargtetWarn',
	        value: function removeTargtetWarn(name) {
	            if (name !== undefined) {
	                this.postMessage(_MessageSet2.default.DynTargetScene.removeTargtetWarn, {
	                    name_item: name
	                });
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'removeTargtetWarn', 'String'));
	            }
	        }

	        /**
	         * 清除所有预警目标
	         * @method clearWarn
	         */

	    }, {
	        key: 'clearWarn',
	        value: function clearWarn() {
	            this.postMessage(_MessageSet2.default.DynTargetScene.clearWarn);
	        }

	        /**
	         * 设置目标颜色
	         * @param {Object} targetId 
	         * @param {String} color                目标颜色
	         * @param {String} color.r    颜色r通道分量，取值范围[0, 1]
	         * @param {String} color.g    颜色g通道分量，取值范围[0, 1]
	         * @param {String} color.b    颜色b通道分量，取值范围[0, 1]
	         * @param {String} color.a    颜色透明分量，取值范围[0, 1]
	         */

	    }, {
	        key: 'setTaragetColor',
	        value: function setTaragetColor(targetId, color) {
	            if (targetId === undefined || (typeof color === 'undefined' ? 'undefined' : _typeof(color)) !== 'object') return;
	            this.postMessage(_MessageSet2.default.DynTargetScene.setTargetColor, {
	                id: targetId,
	                clr: color
	            });
	        }

	        /**
	         * 根据ID获取目标
	         * @method getTargetById
	         * @param {String} itemId  目标的itemID
	         * @param {Function} fun  回调函数fun({name, id, batId，layer，attribute，code，country})回调函数的参数是由目标id、名称、batId（批号）、图层名称、颜色属性、军标码、国家，获取不到返回undefined
	         */

	    }, {
	        key: 'getTargetById',
	        value: function getTargetById(targetmId, fun) {
	            if (targetmId !== undefined) {
	                if (_Util.$.isFunction(fun)) {
	                    if (!this._getTargetById) this._getTargetById = new Map();
	                    var id = (0, _Util.createGuid)();
	                    this._getTargetById.set(id, fun);
	                    this.postMessage(_MessageSet2.default.DynTargetScene.getTargetByItemId, {
	                        key: id,
	                        id: targetmId
	                    });
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getTargetById', 'Function'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getTargetById', 'String'));
	            }
	        }

	        /**
	         * 创建目标
	         * @param {Object} object 
	         * @param {String} object.id           目标id
	         * @param {String} object.name         目标名称
	         * @param {String} object.layername    图层名称，默认为""
	         * @param {String} object.attribute    颜色属性，可通过attributecode.xml文件进行配置，默认白色
	         * @param {String} object.libid        军标类别，可通过attributecode.xml文件进行配置
	         * @param {String} object.codeid       军标码
	         * @param {String} object.lon          目标位置经度，默认0
	         * @param {String} object.lat          目标位置维度，默认0
	         * @param {String} object.alt          目标位置高度，默认0
	         * @param {String} object.time         目标时间状态，默认0
	         * @param {String} object.moveType     目标移动类型，默认GV.TARGETMOVETYPE.TM_POSITION，GV.TARGETMOVETYPE.TM_TOEND表示目标在接收的新位置时从当前位置直接飞到最新位置；GV.TARGETMOVETYPE.TM_ORDER表示目标会按照接收到位置顺序依次飞行，该种方式与time属性结合使用；GV.TARGETMOVETYPE.TM_POSITION表示目标位置直接更新到最新位置，没有飞行动画；GV.TARGETMOVETYPE.TM_ORDERFAST保留无效
	         * @param {Number} object.trackPoints  目标路径上点数组
	         * @param {Number} object.heading      目标偏转角，默认0（NB备用）
	         * @param {Number} object.speed        目标速度，默认0（NB备用）
	         */

	    }, {
	        key: 'createTarget',
	        value: function createTarget(object) {
	            if (object === undefined) return;
	            var obj = {};
	            // if (object.id !== undefined) {
	            //     obj.id = object.id;
	            //     delete object.id;
	            // }
	            // if (object.name !== undefined) {
	            //     obj.name = object.name;
	            //     delete object.name;
	            // }
	            // if (object.layername !== undefined) {
	            //     obj.layername = object.layername;
	            //     delete object.layername;
	            // }
	            // if (object.attribute !== undefined) {
	            //     obj.attribute = object.attribute;
	            //     delete object.attribute;
	            // // }
	            // if (object.libid !== undefined) {
	            //     obj.libid = object.libid;
	            //     delete object.libid;
	            // }
	            // if (object.codeid !== undefined) {
	            //     obj.codeid = object.codeid;
	            //     delete object.codeid;
	            // }
	            // if (object.lon !== undefined) {
	            //     obj.lon = object.lon;
	            //     delete object.lon;
	            // }
	            // if (object.lat !== undefined) {
	            //     obj.lat = object.lat;
	            //     delete object.lat;
	            // }
	            // if (object.alt !== undefined) {
	            //     obj.alt = object.alt;
	            //     delete object.alt;
	            // }
	            // if (object.time !== undefined) {
	            //     obj.time = object.time;
	            //     delete object.time;
	            // }
	            if (object.heading !== undefined) {
	                obj.hx = object.heading;
	                // delete object.heading;
	            }
	            if (object.speed !== undefined) {
	                obj.hs = object.speed;
	                // delete object.speed;
	            }
	            if (object.moveType !== undefined) {
	                obj.trackmethod = object.moveType;
	                // delete object.moveType;
	            }
	            // if (object.trackPoints !== undefined) {
	            //     obj.trackPoints = object.trackPoints;
	            //     delete object.trackPoints;
	            // }
	            for (var extAttribute in object) {
	                obj[extAttribute] = object[extAttribute];
	            }

	            this.postMessage(_MessageSet2.default.DynTargetScene.createTarget, obj);
	        }
	    }, {
	        key: 'createTargetsByArray',
	        value: function createTargetsByArray(array) {
	            if (!(0, _Util.isArray)(array) || array.length < 1) return;
	            var messageObj = {
	                length: array.length
	            };
	            for (var i = 0; i < array.length; i++) {
	                var obj = {};
	                var object = array[i];
	                // if (object.id !== undefined) {
	                //     obj.id = object.id;
	                //     delete object.id;
	                // }
	                // if (object.name !== undefined) {
	                //     obj.name = object.name;
	                //     delete object.name;
	                // }
	                // if (object.layername !== undefined) {
	                //     obj.layername = object.layername;
	                //     delete object.layername;
	                // }
	                // if (object.attribute !== undefined) {
	                //     obj.attribute = object.attribute;
	                //     delete object.attribute;
	                // // }
	                // if (object.libid !== undefined) {
	                //     obj.libid = object.libid;
	                //     delete object.libid;
	                // }
	                // if (object.codeid !== undefined) {
	                //     obj.codeid = object.codeid;
	                //     delete object.codeid;
	                // }
	                // if (object.lon !== undefined) {
	                //     obj.lon = object.lon;
	                //     delete object.lon;
	                // }
	                // if (object.lat !== undefined) {
	                //     obj.lat = object.lat;
	                //     delete object.lat;
	                // }
	                // if (object.alt !== undefined) {
	                //     obj.alt = object.alt;
	                //     delete object.alt;
	                // }
	                // if (object.time !== undefined) {
	                //     obj.time = object.time;
	                //     delete object.time;
	                // }
	                if (object.heading !== undefined) {
	                    obj.hx = object.heading;
	                    // delete object.heading;
	                }
	                if (object.speed !== undefined) {
	                    obj.hs = object.speed;
	                    // delete object.speed;
	                }
	                if (object.moveType !== undefined) {
	                    obj.trackmethod = object.moveType;
	                    // delete object.moveType;
	                }
	                // if (object.trackPoints !== undefined) {
	                //     obj.trackPoints = object.trackPoints;
	                //     delete object.trackPoints;
	                // }
	                for (var extAttribute in object) {
	                    obj[extAttribute] = object[extAttribute];
	                }

	                messageObj[i] = obj;
	            }

	            this.postMessage(_MessageSet2.default.DynTargetScene.createTargets, messageObj);
	        }

	        /**
	         * 创建目标
	         * @param {Object} object 
	         * @param {String} object.layername    图层名称，默认为""
	         * @param {String} object.attribute    颜色属性，可通过attributecode.xml文件进行配置，默认白色
	         * @param {String} object.description  目标描述，通过JBResouces.xml文件配置的描述来创建目标      
	         * @param {String} object.lon          目标位置经度，默认0
	         * @param {String} object.lat          目标位置维度，默认0
	         * @param {String} object.alt          目标位置高度，默认0
	         * @param {String} object.time         目标时间状态，默认0
	         * @param {String} object.moveType     目标移动类型，默认GV.TARGETMOVETYPE.TM_POSITION，GV.TARGETMOVETYPE.TM_TOEND表示目标在接收的新位置时从当前位置直接飞到最新位置；GV.TARGETMOVETYPE.TM_ORDER表示目标会按照接收到位置顺序依次飞行，该种方式与time属性结合使用；GV.TARGETMOVETYPE.TM_POSITION表示目标位置直接更新到最新位置，没有飞行动画；GV.TARGETMOVETYPE.TM_ORDERFAST保留无效
	         * @param {Number} object.heading      目标偏转角，默认0（NB备用）
	         * @param {Number} object.speed        目标速度，默认0（NB备用）
	         */

	    }, {
	        key: 'createTargetByDescription',
	        value: function createTargetByDescription(object) {
	            if (object === undefined) return;
	            var obj = {};
	            if (object.layername !== undefined) obj.layername = object.layername;
	            if (object.attribute !== undefined) obj.attribute = object.attribute;
	            if (object.description !== undefined) obj.description = object.description;
	            if (object.lon !== undefined) obj.lon = object.lon;
	            if (object.lat !== undefined) obj.lat = object.lat;
	            if (object.alt !== undefined) obj.alt = object.alt;
	            if (object.time !== undefined) obj.time = object.time;
	            if (object.heading !== undefined) obj.hx = object.heading;
	            if (object.speed !== undefined) obj.hs = object.speed;
	            if (object.moveType !== undefined) obj.trackmethod = object.moveType;

	            this.postMessage(_MessageSet2.default.DynTargetScene.createTargetByDescription, obj);
	        }

	        /**
	         * 更新目标位置
	         * @param {Object} object    
	         * @param {String} object.id   目标ID
	         * @param {Number} object.lon  目标位置经度
	         * @param {Number} object.lat  目标位置维度
	         * @param {Number} object.alt  目标高度
	         * @param {Number} object.time    目标时间状态
	         * @param {Number} object.heading 目标偏转角
	         * @param {Number} object.speed   目标移动速度
	         */

	    }, {
	        key: 'updateTargetPosition',
	        value: function updateTargetPosition(object) {
	            if (!object || object.id === undefined) return;
	            var obj = {
	                id: object.id
	            };
	            if (object.lon !== undefined) obj.lon = object.lon;
	            if (object.lat !== undefined) obj.lat = object.lat;
	            if (object.alt !== undefined) obj.alt = object.alt;
	            if (object.heading !== undefined) obj.hx = object.heading;
	            if (object.speed !== undefined) obj.hs = object.speed;
	            if (object.time !== undefined) obj.time = object.time;

	            this.postMessage(_MessageSet2.default.DynTargetScene.updateTargetPosition, obj);
	        }

	        /**
	         * 设置目标显隐状态
	         * @param {String} id 目标ID
	         * @param {Boolean} visible 显隐状态
	         */

	    }, {
	        key: 'setTargetVisible',
	        value: function setTargetVisible(id, visible) {
	            if (id === undefined || !(0, _Util.isTrueOrFalse)(visible)) return;
	            this.postMessage(_MessageSet2.default.DynTargetScene.setTargetVisible, {
	                id: id,
	                visible: visible
	            });
	        }

	        /**
	         * 删除目标
	         * @param {String} id 
	         */

	    }, {
	        key: 'removeTarget',
	        value: function removeTarget(id) {
	            if (id === undefined) return;
	            this.postMessage(_MessageSet2.default.DynTargetScene.removeTarget, {
	                id: id
	            });
	        }

	        /**
	         * 清空目标
	         */

	    }, {
	        key: 'clearTarget',
	        value: function clearTarget() {
	            this.postMessage(_MessageSet2.default.DynTargetScene.clearTarget);
	        }

	        /**
	         * 设置目标图层
	         * @param {String} id 目标ID
	         * @param {String} layerName 图层名称
	         */

	    }, {
	        key: 'setTaragetLayer',
	        value: function setTaragetLayer(id, layerName) {
	            if (id === undefined || layerName === undefined) return;
	            this.postMessage(_MessageSet2.default.DynTargetScene.setTaragetLayer, {
	                id: id,
	                layerName: layerName
	            });
	        }

	        /**
	         * 获取目标军标码
	         * @param {String} id 目标ID
	         * @param {Function} fun 回调方法，参数为获取的军标码，未获取到返回undefined
	         */

	    }, {
	        key: 'getTargetSymbolCode',
	        value: function getTargetSymbolCode(id, fun) {
	            if (id !== undefined) {
	                if (_Util.$.isFunction(fun)) {
	                    if (!this._getLayersName) this._getTargetSymbolCode = new Map();
	                    var key = (0, _Util.createGuid)();
	                    this._getTargetSymbolCode.set(key, fun);
	                    this.postMessage(_MessageSet2.default.DynTargetScene.getTargetSymbolCode, {
	                        key: key,
	                        id: id
	                    });
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getTargetSymbolCode', 'Function'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getTargetSymbolCode', 'String/Number'));
	            }
	        }

	        /**
	         * 获取目标世界坐标
	         * @param {String} id 目标ID
	         * @param {Function} fun 回调方法，参数为{x: y: z:}，未获取到返回undefined
	         */

	    }, {
	        key: 'getTargetWorldPosition',
	        value: function getTargetWorldPosition(id, fun) {
	            if (id !== undefined) {
	                if (_Util.$.isFunction(fun)) {
	                    if (!this._getTargetWorldPosition) this._getTargetWorldPosition = new Map();
	                    var key = (0, _Util.createGuid)();
	                    this._getTargetWorldPosition.set(key, fun);
	                    this.postMessage(_MessageSet2.default.DynTargetScene.getTargetWorldPos, {
	                        key: key,
	                        id: id
	                    });
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getTargetWorldPosition', 'Function'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getTargetWorldPosition', 'String/Number'));
	            }
	        }

	        /**
	         * 获取目标Screen坐标
	         * @param {String} id 目标ID
	         * @param {Function} fun 回调方法，参数为{x: y: }，未获取到返回undefined
	         */

	    }, {
	        key: 'getTargetScreenPosition',
	        value: function getTargetScreenPosition(id, fun) {
	            if (id !== undefined) {
	                if (_Util.$.isFunction(fun)) {
	                    if (!this._getTargetScreenPosition) this._getTargetScreenPosition = new Map();
	                    var key = (0, _Util.createGuid)();
	                    this._getTargetScreenPosition.set(key, fun);
	                    this.postMessage(_MessageSet2.default.DynTargetScene.getTargetScreenPos, {
	                        key: key,
	                        id: id
	                    });
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getTargetScreenPosition', 'Function'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getTargetScreenPosition', 'String/Number'));
	            }
	        }

	        /**
	         * 获取目标地理坐标
	         * @param {String} id 目标ID
	         * @param {Function} fun 回调方法，参数为{lon: lat: alt}，未获取到返回undefined
	         */

	    }, {
	        key: 'getTargetGeoPosition',
	        value: function getTargetGeoPosition(id, fun) {
	            if (id !== undefined) {
	                if (_Util.$.isFunction(fun)) {
	                    if (!this._getTargetGeoPosition) this._getTargetGeoPosition = new Map();
	                    var key = (0, _Util.createGuid)();
	                    this._getTargetGeoPosition.set(key, fun);
	                    this.postMessage(_MessageSet2.default.DynTargetScene.getTargetGeoPos, {
	                        key: key,
	                        id: id
	                    });
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getTargetGeoPosition', 'Function'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getTargetGeoPosition', 'String/Number'));
	            }
	        }
	    }, {
	        key: 'onCreateDyntarget',
	        value: function onCreateDyntarget(fun) {
	            if (_Util.$.isFunction(fun)) {
	                this._createDyntargetCallback.push(fun);
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'onCreateDyntarget', 'Function'));
	            }
	        }
	    }, {
	        key: 'offCreateDyntarget',
	        value: function offCreateDyntarget(fun) {
	            if (!_Util.$.isFunction(fun)) return;

	            var i = this._createDyntargetCallback.indexOf(fun);
	            if (i >= 0) {
	                this._createDyntargetCallback.splice(i, 1);
	            }
	        }
	    }, {
	        key: 'offAllCreateDyntarget',
	        value: function offAllCreateDyntarget() {
	            this._createDyntargetCallback = [];
	        }
	    }, {
	        key: '_getLayersNameCallBack',
	        value: function _getLayersNameCallBack(para) {
	            if (!para || !this._getLayersName) return;
	            var callback = this._getLayersName.get(para.key);
	            var layerArray = void 0;
	            if (para.layers) {
	                layerArray = para.layers.split(',');
	            } else {
	                layerArray = undefined;
	            }

	            if (callback) {
	                if (layerArray === undefined) {
	                    callback(null);
	                } else {
	                    callback(layerArray);
	                }
	                this._getLayersName.delete(para.key);
	            }
	        }
	    }, {
	        key: '_getLayerVisibleCallBack',
	        value: function _getLayerVisibleCallBack(para) {
	            if (!para || !this._getLayerVisible) return;
	            var callback = this._getLayerVisible.get(para.key);
	            var visible = para.v;
	            if (callback) {
	                if (visible === '1') {
	                    callback(true);
	                } else if (visible === '0') {
	                    callback(false);
	                } else {
	                    callback(undefined);
	                }
	                this._getLayerVisible.delete(para.key);
	            }
	        }
	    }, {
	        key: '_getTargetsFromLayerCallBack',
	        value: function _getTargetsFromLayerCallBack(para) {
	            if (!para || !this._getTargetsFromLayer) return;
	            (0, _Util.parseConfig)(para);
	            var callback = this._getTargetsFromLayer.get(para.key);
	            var target = para.target;
	            if (callback) {
	                if (_Util.$.isPlainObject(target)) {
	                    callback([target]);
	                } else if ((0, _Util.isArray)(target)) {
	                    callback(target);
	                } else {
	                    callback(null);
	                }
	                this._getTargetsFromLayer.delete(para.key);
	            }
	        }
	    }, {
	        key: '_getTargetSymbolCodeCallBack',
	        value: function _getTargetSymbolCodeCallBack(para) {
	            if (!para || !this._getTargetSymbolCode) return;
	            var callback = this._getTargetSymbolCode.get(para.key);
	            var code = para.code;
	            if (callback) {
	                callback(code);
	                this._getTargetSymbolCode.delete(para.key);
	            }
	        }
	    }, {
	        key: '_getTargetWorldPositionCallBack',
	        value: function _getTargetWorldPositionCallBack(para) {
	            if (!para || !this._getTargetWorldPosition) return;
	            var callback = this._getTargetWorldPosition.get(para.key);
	            var position = para.pos;
	            if (callback) {
	                callback(position);
	                this._getTargetWorldPosition.delete(para.key);
	            }
	        }
	    }, {
	        key: '_getTargetScreenPositionCallBack',
	        value: function _getTargetScreenPositionCallBack(para) {
	            if (!para || !this._getTargetScreenPosition) return;
	            var callback = this._getTargetScreenPosition.get(para.key);
	            var position = para.pos;
	            if (callback) {
	                callback(position);
	                this._getTargetScreenPosition.delete(para.key);
	            }
	        }
	    }, {
	        key: '_getTargetGeoPositionCallBack',
	        value: function _getTargetGeoPositionCallBack(para) {
	            if (!para || !this._getTargetGeoPosition) return;
	            var callback = this._getTargetGeoPosition.get(para.key);
	            var position = para.pos;
	            if (callback) {
	                if (position) {
	                    callback({
	                        lon: position.x,
	                        lat: position.y,
	                        alt: position.z
	                    });
	                } else {
	                    callback(undefined);
	                }

	                this._getTargetGeoPosition.delete(para.key);
	            }
	        }
	    }, {
	        key: '_getTargetByIdCallBack',
	        value: function _getTargetByIdCallBack(para) {
	            console.log(para);
	            if (!para || !this._getTargetById) return;
	            var callback = this._getTargetById.get(para.key);
	            var item = para.attribute;
	            if (callback) {
	                callback(item);
	                this._getTargetById.delete(para.key);
	            }
	        }
	    }, {
	        key: '_getAllTargetsInfoCallback',
	        value: function _getAllTargetsInfoCallback(para) {
	            if (!para) return;
	            para = para.targetsinfo;
	            var fun = this._getAllTargetsInfo.get(para.id);
	            //解析获取的数据
	            var tempData = undefined;
	            if (para.childinfo__array__ && para.childinfo__array__.length !== 0) {
	                tempData = new Map();

	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (var _iterator = para.childinfo__array__[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var tempObj = _step.value;

	                        if (!tempObj) continue;
	                        var tempObjInfo = JSON.parse(tempObj.infor);
	                        tempObjInfo.id = tempObj.id;
	                        tempData.set(tempObj.id, tempObjInfo);
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	            }

	            fun(tempData);
	            this._getAllTargetsInfo.delete(para.id);
	        }
	    }, {
	        key: '_createTargetUpdateCallback',
	        value: function _createTargetUpdateCallback(para) {
	            if (!para) return;
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = this._onCreateTargetUpdate[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var fun = _step2.value;

	                    fun(para);
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }
	        }
	    }, {
	        key: '_callBack',
	        value: function _callBack(msg) {
	            console.log(msg);
	            switch (msg.para1) {
	                case _MessageSet2.default.DynTargetScene.createDyntarget:
	                    if (msg.para2) {
	                        for (var i = 0; i < this._createDyntargetCallback.length; i++) {
	                            this._createDyntargetCallback[i](msg.para2.data);
	                        }
	                    }
	                    break;
	                case _MessageSet2.default.DynTargetScene.getLayersName:
	                    if (msg.para2) {
	                        this._getLayersNameCallBack(msg.para2.get_layers_name);
	                    }
	                    break;
	                case _MessageSet2.default.DynTargetScene.getLayerVisible:
	                    if (msg.para2) {
	                        this._getLayerVisibleCallBack(msg.para2.get_layer_visible);
	                    }
	                    break;
	                case _MessageSet2.default.DynTargetScene.getTargetsFromLayer:
	                    if (msg.para2) {
	                        this._getTargetsFromLayerCallBack(msg.para2.get_targets_from_layer);
	                    }
	                    break;
	                case _MessageSet2.default.DynTargetScene.getTargetSymbolCode:
	                    if (msg.para2) {
	                        this._getTargetSymbolCodeCallBack(msg.para2.get_symbol_code);
	                    }
	                    break;
	                case _MessageSet2.default.DynTargetScene.getTargetWorldPos:
	                    if (msg.para2) {
	                        this._getTargetWorldPositionCallBack(msg.para2.get_target_world_pos);
	                    }
	                    break;
	                case _MessageSet2.default.DynTargetScene.getTargetScreenPos:
	                    if (msg.para2) {
	                        this._getTargetScreenPositionCallBack(msg.para2.get_target_screen_pos);
	                    }
	                    break;
	                case _MessageSet2.default.DynTargetScene.getTargetGeoPos:
	                    if (msg.para2) {
	                        this._getTargetGeoPositionCallBack(msg.para2.get_target_geo);
	                    }
	                    break;
	                case _MessageSet2.default.DynTargetScene.getTargetByItemId:
	                    if (msg.para2) {
	                        this._getTargetByIdCallBack(msg.para2.get_attribute_by_uid);
	                    }
	                    break;
	                case _MessageSet2.default.DynTargetScene.getAllTargetsInfo:
	                    if (msg.para2) {
	                        this._getAllTargetsInfoCallback(msg.para2);
	                    }
	                    break;
	                case _MessageSet2.default.DynTargetScene.createTargetUpdate:
	                    if (msg.para2) {
	                        this._createTargetUpdateCallback(msg.para2);
	                    }
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {

	            var drivesXML = void 0;
	            var xml = '<library>GVDynTarget</library>' + ('<name>' + this.name + '</name>');
	            xml += '<optimized>false</optimized>';

	            if (this.drives) {
	                var driveXML = '<drive>';
	                for (var i = 0; i < this.drives.length; i++) {
	                    driveXML += '<item libname=\'' + this.drives[i].libname + '\' filename=\'' + this.drives[i].filename + '\'></item>';
	                }
	                xml += driveXML + '</drive>';
	            }

	            if (this.lodConfig) {
	                var lodsXML = '<lod_config>';
	                for (var _i = 0; _i < this.lodConfig.length; _i++) {
	                    var lod = this.lodConfig[_i];
	                    lodsXML += '<lod id=\'' + lod['id'] + '\' min=\'' + lod['min'] + '\' max=\'' + lod['max'] + '\'></lod>';
	                }
	                xml += lodsXML + '</lod_config>';
	            }

	            // if(this.visual && this.visual.drawGroup && this.visual.drawGroup.length > 0) {
	            //     xml += `<visual type='${this.visual.type}' name='${this.visual.name === undefined ? '' : `${this.name}`}'>`;
	            //     for(let i = 0; i < this.visual.drawGroup.length; i++) {
	            //         const drawGroup = this.visual.drawGroup[i];
	            //         let drawGroupXML = `<draw_group type='${drawGroup.type}' lod_min='${drawGroup.lodMin}' lod_max='${drawGroup.lodMax}' symbol='${drawGroup.symbol}'>`;
	            //         if(drawGroup.showtype !== undefined) {
	            //             drawGroupXML += `<showtype>${drawGroup.showtype}</showtype>`;
	            //         }
	            //         if(drawGroup.showproperty !== undefined) {
	            //             drawGroupXML += `<showproperty>${drawGroup.showproperty}</showproperty>`;
	            //         }
	            //         xml += drawGroupXML + '</draw_group>';
	            //     }
	            //     xml += '</visual>';   
	            // }

	            if (this.visual) {
	                var visibleXml = (0, _Util.json2xmlAndaAToa_a)(this.visual);
	                xml += '<visual>' + visibleXml + '</visual>';
	            }

	            return _get(DynTargetScene.prototype.__proto__ || Object.getPrototypeOf(DynTargetScene.prototype), '_toXml', this).call(this, xml);
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var obj = _get(DynTargetScene.prototype.__proto__ || Object.getPrototypeOf(DynTargetScene.prototype), '_toJson', this).call(this);

	            if (this._library) obj[this.tag].library = 'GVDynTarget';
	            obj[this.tag].visible = this.visible;
	            obj[this.tag].optimized = false;
	            return obj;
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.DynTargetScene;
	        }
	    }, {
	        key: 'targetMap',
	        get: function get() {
	            return this._TargetMap;
	        }
	    }, {
	        key: 'drives',
	        set: function set(driveArray) {
	            this._drives = driveArray;
	        },
	        get: function get() {
	            return this._drives;
	        }
	    }, {
	        key: 'lodConfig',
	        set: function set(lods) {
	            this._lodConfig = lods;
	        },
	        get: function get() {
	            return this._lodConfig;
	        }
	    }, {
	        key: 'visual',
	        set: function set(visual) {
	            this._visual = visual;
	            if (this._visual.type === undefined) {
	                this.type = 'DynTargetGeoVisual';
	            }
	        },
	        get: function get() {
	            return this._visual;
	        }

	        /**
	         * 态势scene提供新建数据是显示还是隐藏接口
	         * @property initVisible
	         * @param {bool}
	         */

	    }, {
	        key: 'initVisible',
	        set: function set(initVisible) {
	            if (this._initVisible === initVisible) return;
	            this._initVisible = initVisible;
	            this.postMessage(_MessageSet2.default.DynTargetScene.initVisible, initVisible);
	        },
	        get: function get() {
	            return this._initVisible;
	        }

	        /**
	         * 动目标数据资源
	         */

	    }, {
	        key: 'resourcesPath',
	        set: function set(url) {
	            if (this._resourcesPath === undefined) this._resourcesPath = url;
	        },
	        get: function get() {
	            return this._resourcesPath;
	        }
	    }]);

	    return DynTargetScene;
	}(_Scene3.default);

	exports.default = DynTargetScene;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "DynTargetScene.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：MilScene.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-11-14 15:41:05
	 * 用途：类
	 */

	'use strict';

	/**
	 * @module scene
	 */

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Scene2 = __webpack_require__(60);

	var _Scene3 = _interopRequireDefault(_Scene2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _MilItem = __webpack_require__(100);

	var _MilItem2 = _interopRequireDefault(_MilItem);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 军标场景类,主要对标绘实体进行添加,删除,检索等操作
	 * @namespace GV
	 * @class MilScene
	 * @extends GV.Scene
	 */
	var MilScene = function (_Scene) {
	    _inherits(MilScene, _Scene);

	    _createClass(MilScene, [{
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.MilScene;
	        }
	    }]);

	    function MilScene(paramJson) {
	        _classCallCheck(this, MilScene);

	        var _this = _possibleConstructorReturn(this, (MilScene.__proto__ || Object.getPrototypeOf(MilScene)).call(this, paramJson));

	        if (!_this.library) _this._library = [];
	        _this.library = 'GVMilScene';
	        return _this;
	    }

	    _createClass(MilScene, [{
	        key: '_parseNode',
	        value: function _parseNode(paramJson) {
	            if (!paramJson) return;
	            for (var key in paramJson) {
	                // this._addNodesFromJson(paramJson[key], key);
	                // delete paramJson[key];
	                switch (key) {
	                    case _TagsEnum2.default.MilItem:
	                        this._addNodesFromJson(paramJson[key], key);
	                        delete paramJson[key];
	                        break;
	                    default:
	                }
	            }
	        }
	    }, {
	        key: '_addNodesFromJson',
	        value: function _addNodesFromJson(nodesJson, type) {
	            if (Util.isJson(nodesJson)) {
	                nodesJson = [nodesJson];
	            }
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = nodesJson[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var nodeJson = _step.value;

	                    var node = null;
	                    switch (type) {
	                        case _TagsEnum2.default.MilItem:
	                            node = new _MilItem2.default(nodeJson);
	                            break;
	                        default:
	                            break;
	                    }
	                    if (node) {
	                        this._nodes.set(node.id, node);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var strLibraries = '';
	            var libraries = this.library;
	            if (libraries) {
	                for (var i = 0; i < libraries.length; i++) {
	                    strLibraries = strLibraries + libraries[i];
	                    if (i !== libraries.length - 1) strLibraries = strLibraries + ',';
	                }
	            }

	            return _get(MilScene.prototype.__proto__ || Object.getPrototypeOf(MilScene.prototype), '_toXml', this).call(this, '<library>' + strLibraries + '</library><visible>' + this.visible + '</visible><optimized>false</optimized>');
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var obj = _get(MilScene.prototype.__proto__ || Object.getPrototypeOf(MilScene.prototype), '_toJson', this).call(this);

	            if (this._library) obj[this.tag].library = this.library;
	            obj[this.tag].visible = this.visible;
	            obj[this.tag].optimized = false;
	            return obj;
	        }

	        /**
	         * 获取军标树结构
	         * @method getMilTree
	         * @param {Function} fun  回调函数fun(object)回调函数的参数是军标树对象
	         */

	    }, {
	        key: 'getMilTree',
	        value: function getMilTree(fun) {
	            if (Util.$.isFunction(fun)) {
	                if (!this._getMilTreeMap) this._getMilTreeMap = new Map();
	                var id = Util.createGuid();
	                this._getMilTreeMap.set(id, fun);
	                this.postMessage(_MessageSet2.default.MilScene.milTree, id);
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getMilTree', 'Function'));
	            }
	        }
	    }, {
	        key: '_getMilTreeCallBack',
	        value: function _getMilTreeCallBack(para) {
	            if (!para || !this._getMilTreeMap) return;
	            var callback = this._getMilTreeMap.get(para.id);
	            if (callback) {
	                callback(JSON.parse(para.str));
	                this._getMilTreeMap.delete(para.id);
	            }
	        }

	        /**
	         * 获取军标目录图标
	         * @method getMilCategory
	         * @param {string} markid  军标code
	         * @param {Function} fun  回调函数fun(object)回调函数的参数是军标图标对象
	         */

	    }, {
	        key: 'getMilCategory',
	        value: function getMilCategory(markid, fun) {
	            if (Util.$.isFunction(fun)) {
	                if (!this._getMilCateMap) this._getMilCateMap = new Map();
	                var id = Util.createGuid();
	                this._getMilCateMap.set(id, fun);
	                this.postMessage(_MessageSet2.default.MilScene.milCategory, {
	                    key: id,
	                    markId: markid
	                });
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, this.tag, 'getMilCategory', 'Function'));
	            }
	        }
	    }, {
	        key: '_getMilCategoryCallBack',
	        value: function _getMilCategoryCallBack(para) {
	            if (!para || !this._getMilCateMap) return;
	            var callback = this._getMilCateMap.get(para.id);
	            if (callback) {
	                callback(JSON.parse(para.str));
	                this._getMilCateMap.delete(para.id);
	            }
	        }
	    }, {
	        key: '_callBack',
	        value: function _callBack(msg) {
	            switch (msg.para1) {
	                case _MessageSet2.default.MilScene.milTree:
	                    if (msg.para2) {
	                        this._getMilTreeCallBack(msg.para2.miltree);
	                    }
	                    break;
	                case _MessageSet2.default.MilScene.milCategory:
	                    if (msg.para2) {
	                        this._getMilCategoryCallBack(msg.para2.milcategory);
	                    }
	                    break;
	                default:
	                    break;
	            }
	        }
	    }]);

	    return MilScene;
	}(_Scene3.default);

	exports.default = MilScene;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "MilScene.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：MilItem.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-06-09 10:32:05.
	 * 用途：军标类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _GeometryNode2 = __webpack_require__(69);

	var _GeometryNode3 = _interopRequireDefault(_GeometryNode2);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _Exception = __webpack_require__(35);

	var _Exception2 = _interopRequireDefault(_Exception);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 军标类
	 * @module node
	 * @namespace GV
	 * @extends GV.Node
	 * @class MilItem
	 * @abstract
	 */
	var MilItem = function (_GeometryNode) {
	    _inherits(MilItem, _GeometryNode);

	    function MilItem(params) {
	        _classCallCheck(this, MilItem);

	        if (!params.libid) params.libid = 0;
	        if (!params.code) params.code = 0;
	        return _possibleConstructorReturn(this, (MilItem.__proto__ || Object.getPrototypeOf(MilItem)).call(this, params));
	    }

	    _createClass(MilItem, [{
	        key: 'getMaxCount',
	        value: function getMaxCount(fun) {
	            var _this2 = this;

	            if (!fun) return;
	            if (this._maxCount !== undefined) {
	                fun(this._maxCount);
	                return;
	            }

	            this._getMaxCountFun = fun;

	            setTimeout(function () {
	                if (_this2._getMaxCountFun) {
	                    _this2._getMaxCountFun();
	                    _this2._getMaxCountFun = undefined;
	                }
	            }, 100);
	        }
	    }, {
	        key: '_setMaxCount',
	        value: function _setMaxCount(maxCount) {
	            maxCount = parseInt(maxCount);
	            this._maxCount = isNaN(maxCount) ? -1 : maxCount;

	            if (this._getMaxCountFun) this._getMaxCountFun(this._maxCount);
	            this._getMaxCountFun = undefined;
	        }
	    }, {
	        key: '_callBack',
	        value: function _callBack(msg) {
	            switch (msg.para1) {
	                case _MessageSet2.default.Node.updateProperty:
	                    this._parseJson(msg.para2[this.tag]);
	                    break;
	                case 'update_max_count':
	                    this._setMaxCount(msg.para2);
	                    break;
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.MilItem;
	        }

	        /**
	         * 军标库
	         * @property libid {Number} //只能赋值一次
	         */

	    }, {
	        key: 'libid',
	        set: function set(libid) {
	            if (typeof parseInt(libid, 10) === 'number' && this._libid === undefined) {
	                this._libid = parseInt(libid, 10);
	                if (!this._libid) console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CUSTOM, 'libid', '参数类型为number或字符数值'));
	            } else {
	                this._libid = 0;
	            }
	        },
	        get: function get() {
	            return this._libid;
	        }

	        /**
	         * 军标编号
	         * @property code {Number} //只能赋值一次
	         */

	    }, {
	        key: 'code',
	        set: function set(code) {
	            if (typeof parseInt(code, 10) === 'number' && this._code === undefined) {
	                this._code = parseInt(code, 10);
	                if (!this._code) console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CUSTOM, 'code', '参数类型为number或字符数值'));
	            } else {
	                this._code = 0;
	            }
	        },
	        get: function get() {
	            return this._code;
	        }

	        /**
	         * 军标文字
	         * @property code {string} //只能赋值一次
	         */

	    }, {
	        key: 'text',
	        set: function set(text) {
	            this._text = text;
	            this._updateProperty('text');
	        },
	        get: function get() {
	            return this._text;
	        }
	    }]);

	    return MilItem;
	}(_GeometryNode3.default);

	exports.default = MilItem;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "MilItem.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：DynTargetScene.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2016-07-19 09:32:05
	 * 用途：类
	 */

	'use strict';

	/**
	 * @module scene
	 */

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Scene2 = __webpack_require__(60);

	var _Scene3 = _interopRequireDefault(_Scene2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Util = __webpack_require__(6);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 场景类,对态势场景的控制(Base版无该标绘场景)
	 * @namespace GV
	 * @class DynTargetScene
	 * @extends GV.Scene
	 */
	var PlaceNameScene = function (_Scene) {
	    _inherits(PlaceNameScene, _Scene);

	    function PlaceNameScene() {
	        _classCallCheck(this, PlaceNameScene);

	        return _possibleConstructorReturn(this, (PlaceNameScene.__proto__ || Object.getPrototypeOf(PlaceNameScene)).apply(this, arguments));
	    }

	    _createClass(PlaceNameScene, [{
	        key: '_parseNode',
	        value: function _parseNode(paramJson) {}
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '<library>GVPlaceScene</library><optimized>false</optimized>';
	            if (this._url !== undefined) {
	                xml = '<url>' + this.url + '</url>' + xml;
	            }
	            return _get(PlaceNameScene.prototype.__proto__ || Object.getPrototypeOf(PlaceNameScene.prototype), '_toXml', this).call(this, xml);
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var obj = _get(PlaceNameScene.prototype.__proto__ || Object.getPrototypeOf(PlaceNameScene.prototype), '_toJson', this).call(this);
	            if (this._library) obj[this.tag].library = 'GVPlaceScene';
	            obj[this.tag].visible = this.visible;
	            obj[this.tag].optimized = false;
	            return obj;
	        }
	    }, {
	        key: 'tag',

	        // constructor(param) {
	        //     super(param)
	        //     if (param.url) {
	        //         this._url = param.url;
	        //     }
	        // }

	        get: function get() {
	            return _TagsEnum2.default.PlaceNameScene;
	        }
	    }, {
	        key: 'url',
	        get: function get() {
	            return this._url;
	        },
	        set: function set(url) {
	            if (url && url !== this._url) {
	                this._url = url;
	                this.postMessage(_MessageSet2.default.PlaceNameScene.placeUrl, url);
	            }
	        }
	    }]);

	    return PlaceNameScene;
	}(_Scene3.default);

	exports.default = PlaceNameScene;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "PlaceNameScene.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：ObliqueScene.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2016-07-19 09:32:05
	 * 用途：类
	 */

	'use strict';

	/**
	 * @module scene
	 */

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Scene2 = __webpack_require__(60);

	var _Scene3 = _interopRequireDefault(_Scene2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _Style = __webpack_require__(62);

	var _Style2 = _interopRequireDefault(_Style);

	var _Position = __webpack_require__(68);

	var _Position2 = _interopRequireDefault(_Position);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 
	 * @namespace GV
	 * @class ObliqueScene
	 * @extends GV.Scene
	 */
	var ObliqueScene = function (_Scene) {
	    _inherits(ObliqueScene, _Scene);

	    function ObliqueScene() {
	        _classCallCheck(this, ObliqueScene);

	        return _possibleConstructorReturn(this, (ObliqueScene.__proto__ || Object.getPrototypeOf(ObliqueScene)).apply(this, arguments));
	    }

	    _createClass(ObliqueScene, [{
	        key: '_parseNode',
	        value: function _parseNode(paramJson) {}

	        /**
	         * @property style
	         */

	    }, {
	        key: '_callBack',
	        value: function _callBack(msg) {
	            switch (msg.para1) {
	                case _MessageSet2.default.ElecScene.createRadar:
	                    if (msg.para2) {
	                        if (this._elecMap.has(msg.para2)) {
	                            this._elecMap.delete(msg.para2);
	                        }
	                    }
	                    break;
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var tempXml = '';
	            if (this.style) tempXml = tempXml + this.style.toXml();
	            if (this.url) tempXml = tempXml + ('<url>' + this.url + '</url>');
	            if (this.position) tempXml = tempXml + this.position.toXml();
	            return _get(ObliqueScene.prototype.__proto__ || Object.getPrototypeOf(ObliqueScene.prototype), '_toXml', this).call(this, '<name>ObliqueScene</name><library>ObliqueScene</library>' + tempXml);
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var obj = _get(ObliqueScene.prototype.__proto__ || Object.getPrototypeOf(ObliqueScene.prototype), '_toJson', this).call(this);

	            obj[this.tag].library = 'ObliqueScene';
	            obj[this.tag].visible = this.visible;
	            obj[this.tag].optimized = false;
	            if (this.style) obj[this.tag].style = this.style.toJson().style;
	            if (this.position) obj[this.tag].position = this.position.toJson().position;
	            if (this.url) obj[this.tag].url = this.url;
	            return obj;
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.ObliqueScene;
	        }
	    }, {
	        key: 'style',
	        set: function set(style) {
	            if (!style) return;
	            this._style = new _Style2.default(style);
	        },
	        get: function get() {
	            return this._style;
	        }

	        /**
	         * @property position
	         */

	    }, {
	        key: 'position',
	        set: function set(position) {
	            if (!position) return;

	            this._position = new _Position2.default(position);
	        },
	        get: function get() {
	            return this._position;
	        }
	    }, {
	        key: 'url',
	        set: function set(url) {
	            if (!url) return;
	            this._url = url;
	        },
	        get: function get() {
	            return this._url;
	        }
	    }]);

	    return ObliqueScene;
	}(_Scene3.default);

	exports.default = ObliqueScene;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ObliqueScene.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gv5_gvml
	 * 文件：LISTENER.js
	 * 作者：钱晶
	 * 部门：产品研发中心
	 * 邮箱：jqian@mail.ie.ac.cn
	 * 日期：2017‎-‎07‎-08 18:16:30
	 * 用途：监听消息类型
	 */

	'use strict';

	/**
	 * 监听消息的几种类型
	 * @module global
	 * @submodule global-enum
	 * @namespace GV
	 * @class LISTENER
	 */

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  /**
	   * 当有图层添加的时候
	   * @property {GV.LISTENER} ADDLAYER
	   * @final
	   * @static
	   */
	  ADDLAYER: 'add_layer',
	  /**
	   * 当有标绘节点添加的时候
	   * @property {GV.LISTENER} ADDNODE
	   * @final
	   * @static
	   */
	  ADDNODE: 'add_node',
	  /**
	   * 当有标绘图层添加的时候
	   * @property {GV.LISTENER} ADDSCENE
	   * @final
	   * @static
	   */
	  ADDSCENE: 'add_scene',
	  /**
	   * 当有图层移除的时候
	   * @property {GV.LISTENER} REMOVELAYER
	   * @final
	   * @static
	   */
	  REMOVELAYER: 'remove_layer',
	  /**
	   * 当有标绘节点移除的时候
	   * @property {GV.LISTENER} REMOVENODE
	   * @final
	   * @static
	   */
	  REMOVENODE: 'remove_node',
	  /**
	   * 当有标绘图层移除的时候
	   * @property {GV.LISTENER} REMOVESCENE
	   * @final
	   * @static
	   */
	  REMOVESCENE: 'remove_scene'
	};

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "LISTENER.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：Camera.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2016-03-22 20:56:50
	 * 用途：相机类
	 */

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _Util = __webpack_require__(6);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	// import MathUtil from './../math/Math';


	/**
	 * @module core
	 * @namespace GV
	 */
	var Camera = function (_Class) {
	    _inherits(Camera, _Class);

	    /**
	     * 相机
	     * @class Camera
	     * @constructor
	     * @show true
	     * @chainable
	     */
	    function Camera(map, params) {
	        _classCallCheck(this, Camera);

	        var _this = _possibleConstructorReturn(this, (Camera.__proto__ || Object.getPrototypeOf(Camera)).call(this, params));

	        _this.setMap(map);

	        //相机改变监听列表
	        _this._cameraChangecallback = [];
	        _this._cameraChangeFinishCallback = [];

	        _this._tiles = [];

	        //比例尺
	        _this._scale = 0;

	        //相机最大最小范围，最小距离必须大于0，且最大距离大于最小距离
	        _this._minDistance = 1;

	        _this._maxDistance = 42816094;

	        //相机漫游
	        _this._roaming = false;

	        //跟随对象
	        _this._followObjId = undefined;

	        return _this;
	    }

	    _createClass(Camera, [{
	        key: '_parseJson',
	        value: function _parseJson(params) {
	            this._home = {
	                range: 20816200,
	                lon: 112.003,
	                lat: 23.9375,
	                pitch: -89,
	                height: 0,
	                heading: 0
	            };
	            if (params && params.viewpoint) {
	                this.home = params.viewpoint;
	            }
	        }

	        /**
	         * 获得相机默认姿态
	         * @property home
	         * @return vp{Object} 相机姿态{ 
	                range: 相机的视距,
	                lon: 经度(视点),
	                lat: 纬度(视点),
	                height: 高度(视点),
	                pitch: 俯仰角,
	                heading: 偏转角}
	         */

	    }, {
	        key: 'flyToHome',

	        /**
	         * 飞到相机默认位置
	         * @method flyToHome
	         * @param time{number} 飞到默认位置需要的时间
	         * @param {Function}  fun 飞行结束后的回调方法，飞行过程中按空格触发复位相机位置则自动调用该回调方法
	         */
	        value: function flyToHome() {
	            var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	            var fun = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

	            if (typeof time !== 'number') {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'camera', 'flyToHome', 'Number'));
	                return;
	            }
	            this._flyTo(this._home, time, fun);
	        }

	        /**
	         * 设置相机最大、最小距离
	         * @method setCameraDistance
	         * @param min {Number} 相机最小距离
	         * @param max {Number} 相机最大距离
	         */

	    }, {
	        key: 'setCameraDistance',
	        value: function setCameraDistance(min, max) {
	            if (parseFloat(min) < 1 || parseFloat(max) < 1) {
	                console.warn('参数错误：minDistance、maxDistance不能小于1');
	                this._maxDistance = max;
	                this._minDistance = min;
	                return;
	            }
	            if (max >= min) {
	                this._maxDistance = max;
	                this._minDistance = min;
	                this._setMinMaxDistance();
	            } else {
	                console.warn("\u53C2\u6570\u9519\u8BEF\uFF1A\u76F8\u673A\u6700\u5927\u8DDD\u79BB(" + max + ")\u5FC5\u987B\u5927\u4E8E\u76F8\u673A\u6700\u5C0F\u8DDD\u79BB(" + min + ')');
	            }
	        }

	        /**
	         * 监听相机变化
	         * @method onCameraChange
	         * @param fun(cameraChange) {Function}
	         * @param fun(cameraChange).camerachange 监听相机变化相机变化参数
	         * @param fun(cameraChange).camerachange.viewpoint {object}//相机姿态
	         *                  {
	         *                    range://视点距离
	         *                    lon://经度
	         *                    lat://纬度
	         *                    height：//高度
	         *                    pitch://俯仰角
	         *                    heading://偏航角}
	         * @param fun(cameraChange).camerachange.matrix {Array} //当前相机世界坐标转屏幕坐标的投影矩阵（四阶矩阵）
	         * @param fun(cameraChange).camerachange.focusRegion {Object} //{matLat:, minLat:, maxLon:, minLon:} 当前视口下经纬度范围 
	         * @param fun(cameraChange).camerachange.tiles {Array} //当前相机观测到的地理信息编码列表
	         * @param fun(cameraChange).camerachange.scale {Number} //比例尺
	         */

	    }, {
	        key: 'onCameraChange',
	        value: function onCameraChange(fun) {
	            if (!fun || typeof fun !== 'function') return;
	            this._cameraChangecallback.push(fun);
	        }

	        /**
	         * 取消监听相机变化
	         * @method offCameraChange
	         * @param fun
	         * @type {Function}
	         */

	    }, {
	        key: 'offCameraChange',
	        value: function offCameraChange(fun) {
	            if (!fun) return;
	            var i = this._cameraChangecallback.indexOf(fun);
	            if (i >= 0) {
	                this._cameraChangecallback.splice(i, 1);
	            }
	        }

	        /**
	         * 清除相机变化监听列表
	         * @method offAllCameraChange
	         */

	    }, {
	        key: 'offAllCameraChange',
	        value: function offAllCameraChange() {
	            this._cameraChangecallback = [];
	        }

	        /**
	         * 监听相机变化结束
	         * @method onCameraChangeFinish
	         * @param fun(cameraChange) {Function}
	         * @param fun(cameraChange).camerachange 监听相机变化相机变化参数
	         * @param fun(cameraChange).camerachange.viewpoint {object}//相机姿态
	         *                  {
	         *                    range://视点距离
	         *                    lon://经度
	         *                    lat://纬度
	         *                    height：//高度
	         *                    pitch://俯仰角
	         *                    heading://偏航角}
	         * @param fun(cameraChange).camerachange.matrix {Array} //当前相机世界坐标转屏幕坐标的投影矩阵（四阶矩阵）
	         * @param fun(cameraChange).camerachange.focusRegion {Object} //{matLat:, minLat:, maxLon:, minLon:} 当前视口下经纬度范围 
	         * @param fun(cameraChange).camerachange.tiles {Array} //当前相机观测到的地理信息编码列表
	         * @param fun(cameraChange).camerachange.scale {Number} //比例尺
	         */

	    }, {
	        key: 'onCameraChangeFinish',
	        value: function onCameraChangeFinish(fun) {
	            if (!fun || typeof fun !== 'function') return;
	            this._cameraChangeFinishCallback.push(fun);
	        }

	        /**
	         * 取消监听相机结束
	         * @method offCameraChangeFinish
	         * @param fun
	         * @type {Function}
	         */

	    }, {
	        key: 'offCameraChangeFinish',
	        value: function offCameraChangeFinish(fun) {
	            if (!fun) return;
	            var i = this._cameraChangeFinishCallback.indexOf(fun);
	            if (i >= 0) {
	                this._cameraChangeFinishCallback.splice(i, 1);
	            }
	        }

	        /**
	         * 清除相机变化结束监听列表
	         * @method offAllCameraChangeFinish
	         */

	    }, {
	        key: 'offAllCameraChangeFinish',
	        value: function offAllCameraChangeFinish() {
	            this._cameraChangeFinishCallback = [];
	        }

	        /**
	         * 改变相机姿态
	         * @method setViewpoint
	         * @param vp { range: ,lon: ,lat: ,pitch: ,height: ,heading: } 目标姿态（空缺参数使用当前相机参数）
	         * @param time {Number} 从当前姿态到目标姿态的时间
	         * @return vp 实际的目标相机姿态 （设置失败是返回{}）
	         * @param {Function}  fun 飞行结束后的回调方法，飞行过程中按空格触发复位相机位置则自动调用该回调方法
	         */

	    }, {
	        key: 'setViewpoint',
	        value: function setViewpoint(vp, time, fun) {
	            if (vp && (0, _Util.checkCameraViewPoint)(vp)) {
	                return this._flyTo(vp, time, fun);
	            } else {
	                console.warn("viewpoint\u4E3A\u65E0\u6548\u503C" + vp + "\u65E0\u6CD5\u98DE\u5230\u6307\u5B9A\u4F4D\u7F6E");
	                return {};
	            }
	        }

	        /**
	         * 相机姿态
	         * @property viewpoint
	         */

	    }, {
	        key: 'pan',

	        /**
	         * 相机平移
	         * @method pan
	         * @param x {Number} 相机前后平移量(平移量为当前位置与偏移后位置与球心构成的弧度角)
	         * @param y {Number} 相机左右平移量(平移量为当前位置与偏移后位置与球心构成的弧度角)
	         */
	        value: function pan(x, y) {
	            this.postMessage(_MessageSet2.default.Camera.pan, { dx: x, dy: y });
	        }

	        /**
	         * 相机缩放
	         * @method zoom
	         * @param y {Number} （range = （1+y）*range，range取值最小为1，最大为42816100, 该参数必须大于-1)
	         */

	    }, {
	        key: 'zoom',
	        value: function zoom(y) {
	            if (!(0, _Util.isNumber)(y)) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'camera', 'zoom', 'Number'));
	            } else if (y > -1) {
	                this.postMessage(_MessageSet2.default.Camera.zoom, { dy: y });
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONEDEFAULT, 'camera', 'zoom', '(-1, POSITIVE_INFINITY)'));
	            }
	        }

	        /**
	         * 相机旋转
	         * @method rotate
	         * @param x {Number} 相机的偏航角偏移量(单位是弧度角)
	         * @param y {Number} 相机的俯仰角偏移量(单位是弧度角)
	         */

	    }, {
	        key: 'rotate',
	        value: function rotate(x, y) {
	            this.postMessage(_MessageSet2.default.Camera.rotate, { dx: x, dy: y });
	        }

	        /**
	         * 根据屏幕坐标得到经纬度坐标
	         * @method screenToGeo
	         * @param screen {Object|Array} 当传入参数为对象类型(例{x:0, y: 0})进行一个点的转化，当出入参数为数据类型（例如：[[x, y], [x, y], ……]）进行多个点的转化，并且屏幕坐标以左上角为原点
	         * @param fun {Function} 回调函数fun([{x:, y:, lon:, lat:, alt}, {x:, y:, lon:, lat:, alt}, ……])回调函数的参数是请求的屏幕坐标(左上角为原点)和对应的经纬高
	         */

	    }, {
	        key: 'screenToGeo',
	        value: function screenToGeo(screen, fun) {
	            // if (!($.isArray(screenArray)) || !fun) return;
	            if (!screen || !fun) return;
	            if (!this.map) return;
	            //当传入参数为对象，则转化为数组
	            if (!_Util.$.isArray(screen) && _Util.$.isPlainObject(screen)) {
	                if (!isNaN(screen.x) && !isNaN(screen.y)) {
	                    screen = [[screen.x, screen.y]];
	                } else {
	                    console.warn('传入参数参数有误！');
	                    return;
	                }
	            }
	            for (var i = 0; i < screen.length; i++) {
	                screen[i][1] = this.map.parent.container[0].clientHeight - screen[i][1];
	            }
	            var screenArrayString = (0, _Util.arrayToStr)(screen);
	            if (!this._screenToGeo) this._screenToGeo = new Map();
	            var id = (0, _Util.createGuid)();
	            this._screenToGeo.set(id, { screenArray: screen, fun: fun });
	            this.postMessage(_MessageSet2.default.Camera.screenToGeo, { screenString: screenArrayString, id: id });
	        }

	        /**
	         * 根据经纬度坐标得到屏幕坐标
	         * @method geoToScreen
	         * @param geo {Object|Array}  当传入参数为对象类型(例{lon:0, lat: 0}或{lon:0, lat: 0, alt:0})进行一个点的转化，当传入参数为数组类型（例[[lon, lat, alt], [lon, lat, alt],……] 或 [[lon, lat], [lon, lat],……] alt默认为0）
	         * @param fun {Function} 回调函数fun([{x:, y:, lon:, lat:, alt:},{x:, y:, lon:, lat:, alt:},……])回调函数的参数是请求的屏幕坐标(左上角为原点)和对应的经纬高
	         */

	    }, {
	        key: 'geoToScreen',
	        value: function geoToScreen(geo, fun) {
	            if (!geo || !fun) return;

	            var geoT = null;
	            // 当传入的为经纬度对象时，转化为数组
	            if (!_Util.$.isArray(screen) && _Util.$.isPlainObject(geo)) {
	                if (!isNaN(geo.lon) && !isNaN(geo.lat)) {
	                    geoT = [[geo.lon, geo.lat]];
	                    if (geo.alt && !isNaN(geo.alt)) {
	                        geoT[0].push(geo.alt);
	                    } else {
	                        geoT[0].push(0);
	                    }
	                } else {
	                    console.warn('传入参数参数有误！');
	                    return;
	                }
	            }

	            // 设置默认高度
	            for (var i = 0; i < geo.length; i++) {
	                geoT = geo;
	                if (geoT[i].length === 2) {
	                    geoT[i].push(0);
	                }
	            }
	            var geoArrayString = (0, _Util.arrayToStr)(geoT);
	            if (!this._geoToScreen) this._geoToScreen = new Map();
	            var id = (0, _Util.createGuid)();
	            this._geoToScreen.set(id, { geoArray: geoT, fun: fun });
	            this.postMessage(_MessageSet2.default.Camera.geoToScreen, { id: id, geoString: geoArrayString });
	        }

	        /**
	         * 相机飞到指定位置或区域
	         * @method flyTo
	         * @param options {Object}
	         * @param options.location {Ayyay} 指定相机飞行后视点，[lon, lat]
	         * @param options.rectangle {Ayyay} 指定相机飞行后可视范围，[minlon, minlat, maxlon, maxlat]
	         * @param options.pitch {Number} 相机俯仰角
	         * @param options.heading {Number} 相机偏转角
	         * @param options.height {Number} 相机视点高度
	         * @param options.range {Number} 相机高度
	         * @param time 飞行时间
	         * @param {Function}  fun 飞行结束后的回调方法，飞行过程中按空格触发复位相机位置则自动调用该回调方法
	         */

	    }, {
	        key: 'flyTo',
	        value: function flyTo(options, time, fun) {
	            var _this2 = this;

	            if (!time) {
	                time = 0;
	            }
	            var vp = {
	                pitch: -89,
	                heading: 0,
	                height: 0,
	                lat: 120,
	                lon: 45,
	                range: 10000000
	            };

	            vp.pitch = options.pitch ? options.pitch : this._viewpoint.pitch;
	            vp.heading = options.heading ? options.heading : this._viewpoint.heading;
	            vp.height = options.height ? options.height : this._viewpoint.height;
	            if (options.location && !isNaN(options.location[0]) && !isNaN(options.location[1])) {
	                vp.lon = options.location[0];
	                vp.lat = options.location[1];
	                vp.range = options.range ? options.range : this._viewpoint.range;
	                this._flyTo(vp, time, fun);
	            } else if (options.rectangle && !isNaN(options.rectangle[0]) && !isNaN(options.rectangle[1]) && !isNaN(options.rectangle[2]) && !isNaN(options.rectangle[1])) {
	                vp.lon = (options.rectangle[0] + options.rectangle[2]) * 0.5;
	                vp.lat = (options.rectangle[1] + options.rectangle[3]) * 0.5;
	                var hDistance = 0; //经度方向距离
	                var vDistance = 0; //维度方向距离
	                // this.map._math.distance([[options.rectangle[0], vp.lat, 0], [options.rectangle[2], vp.lat, 0]], (dh) => {
	                this.map._math.distance([[options.rectangle[0], options.rectangle[1], 0], [options.rectangle[2], options.rectangle[1], 0]], function (dh) {
	                    hDistance = dh;
	                    _this2.map._math.distance([[vp.lon, options.rectangle[1], 0], [vp.lon, options.rectangle[3], 0]], function (dv) {
	                        vDistance = dv;
	                        if (hDistance >= vDistance) {
	                            vp.range = hDistance / (2 * (_this2.map.parent.container[0].clientWidth / _this2.map.parent.container[0].clientHeight) * Math.tan(15 * Math.PI / 180)) * 1.05;
	                        } else {
	                            vp.range = vDistance / (2 * Math.tan(15 * Math.PI / 180)) * 1.05;
	                        }
	                        _this2._flyTo(vp, time, fun);
	                    });
	                });
	            }
	        }

	        /**
	         * 相机按给定路径飞行
	         * @method flyByPath
	         * @param {Object} options
	         * @param {Number} options.range  相机高度，未设置则使用当前相机值
	         * @param {Number} options.height  相机高度，未设置则使用当前相机值
	         * @param {Number} options.pitch  相机俯仰角，未设置则使用当前相机值
	         * @param {Number} options.heading 相机偏转角，当开启第一视角模式时，该值无效，会自动计算保证相机始终向前飞行
	         * @param {Array}  options.points 飞行路径的点坐（地理坐标）标数组，路径点数量最小为2否则漫游无效，如：[[110, 30], [120, 30], [115, 46]]
	         * @param {Number}  options.transitionTime 飞行过程中，在每个转折点过渡的时间，默认为2秒，开启第一人称漫游时有效
	         * @param {Number}  options.time 飞行经历的时间，该值大于0，单位秒，否则漫游无效
	         * @param {Boolean}  options.first 是否开启第一视角，默认为false
	         * @param {Function}  fun 飞行结束后的回调方法
	         */

	    }, {
	        key: 'flyByPath',
	        value: function flyByPath(options, fun) {
	            this.closeFlyByPath();
	            var vp = {
	                pitch: options.pitch,
	                heading: options.heading,
	                height: options.height,
	                range: options.range
	            };
	            vp.lon = options.points[0][0];
	            vp.lat = options.points[0][1];
	            this._flyByPathLon = vp.lon;
	            this._flyByPathLat = vp.lat;
	            this._flyTo(vp);

	            var totalDistance = 0;
	            var distances = [];
	            var directions = [];
	            var that = this;
	            this.roaming = false;
	            for (var i = 0; i < options.points.length - 1; i++) {
	                if (options.points[i][1] < -89 || options.points[i][1] > 89) {
	                    console.warn('纬度取值范围有误，取值范围为[-89, 89]');
	                    return;
	                }
	                var dLon = options.points[i + 1][0] - options.points[i][0];
	                var dLat = options.points[i + 1][1] - options.points[i][1];
	                distances[i] = Math.sqrt(dLon * dLon + dLat * dLat);
	                totalDistance += distances[i];
	                // 计算路径上各段路径的前进方向和相机偏转角
	                if (options.first) {
	                    var headings = 90 - Math.atan2(dLat, dLon) * 180 / Math.PI;
	                    directions[i] = [dLon / distances[i], dLat / distances[i], headings];
	                } else {
	                    directions[i] = [dLon / distances[i], dLat / distances[i]];
	                }
	            }
	            // 根据总距离、总时间计算速度
	            var _transitionTime = void 0,
	                _time = void 0;
	            if (options.first) {
	                _transitionTime = options.transitionTime || 2;
	                _time = options.time - (options.points.length - 2) * _transitionTime - 0.2; //最后减去最后回调等待0.2s，用来接收最后的相机参数
	            } else {
	                _time = options.time - 0.2; //最后减去最后回调等待0.2s，用来接收最后的相机参数
	            }
	            if (_time <= 0) {
	                console.warn('飞行时间过短或过渡时间过长！');
	                return;
	            }
	            var speed = totalDistance / (_time * 1000);
	            var startTime = new Date();
	            var endTime = new Date();
	            var now = 0;

	            if (options.first) vp.heading = directions[0][2];
	            var animationID = void 0;
	            function _moveCamera() {
	                // console.log(that._flyByPathAnimationID)
	                // 当移动到最后一个点时，取消动画
	                if (now >= options.points.length - 1) {
	                    cancelAnimationFrame(that._flyByPathAnimationID);
	                    vp.lon = options.points[options.points.length - 1][0];
	                    vp.lat = options.points[options.points.length - 1][1];
	                    that._flyTo(vp);
	                    that.roaming = false;
	                    // fun();
	                    if (fun) {
	                        setTimeout(function () {
	                            fun();
	                        }, 200);
	                    }
	                    return;
	                }
	                endTime = new Date();
	                // 根据速度和时间计算相机当前状态
	                that._flyByPathLon += directions[now][0] * speed * (endTime - startTime);
	                that._flyByPathLat += directions[now][1] * speed * (endTime - startTime);
	                vp.lon = that._flyByPathLon;
	                vp.lat = that._flyByPathLat;
	                // vp.lon = vp.lon + directions[now][0] * speed * (endTime - startTime);
	                // vp.lat = vp.lat + directions[now][1] * speed * (endTime - startTime);
	                that._flyTo(vp);
	                startTime = endTime;
	                // 当相机距离每一段开始点的距离大于等于这段的长度，则该段移动结束，开始下一段
	                var dLon = options.points[now][0] - vp.lon;
	                var dLat = options.points[now][1] - vp.lat;
	                if (Math.sqrt(dLon * dLon + dLat * dLat) >= distances[now]) {
	                    now++;
	                    if (options.first && now < options.points.length - 1) {
	                        vp.heading = directions[now][2];
	                        that._flyByPathLon = options.points[now][0];
	                        that._flyByPathLat = options.points[now][1];
	                        vp.lon = options.points[now][0];
	                        vp.lat = options.points[now][1];
	                        cancelAnimationFrame(that._flyByPathAnimationID);
	                        that._flyTo(vp, _transitionTime - 0.2);
	                        setTimeout(function () {
	                            startTime = new Date();
	                            that._flyByPathAnimationID = requestAnimationFrame(_moveCamera);
	                        }, _transitionTime * 1000);
	                    } else {
	                        that._flyByPathAnimationID = requestAnimationFrame(_moveCamera);
	                    }
	                } else {
	                    that._flyByPathAnimationID = requestAnimationFrame(_moveCamera);
	                }
	            }
	            that._flyByPathAnimationID = requestAnimationFrame(_moveCamera); //开启动画
	        }

	        /**
	         * 取消相机按路径漫游动画
	         */

	    }, {
	        key: 'closeFlyByPath',
	        value: function closeFlyByPath() {
	            if (this._flyByPathAnimationID) {
	                cancelAnimationFrame(this._flyByPathAnimationID);
	                this._flyByPathAnimationID = null;
	            }
	        }

	        // /**
	        //  * 相机按给定路径飞行，通过C++方式
	        //  * @method flyByPath
	        //  * @param {Object} options
	        //  * @param {Number} options.range  相机高度
	        //  * @param {Number} options.height  相机高度
	        //  * @param {Number} options.pitch  相机俯仰角
	        //  * @param {Number} options.heading 相机偏转角,当开启第一视角模式时，该值无效
	        //  * @param {Array}  options.points 飞行路径的点坐标数组
	        //  * @param {Number}  options.time 飞行经历的时间
	        //  * @param {Function}  fun 飞行结束后的回调方法
	        //  */
	        // doFlyByPath(options = {
	        //     first: false,
	        //     time: 10,
	        //     height: 0,
	        //     pitch: -89,
	        //     header: 0,
	        //     range: 1111114,
	        //     points: [[110, 30], [120, 30], [115, 46]]
	        // }, fun) {
	        //     options.points = arrayToStr(options.points);
	        //     this.postMessage(MessageSet.Camera.flyByPath, options);
	        //     if (fun) {
	        //         this._flyByPathCallBack = fun;
	        //     }
	        // }

	        // /**
	        //  * 取消相机按路径漫游
	        //  */
	        // cancelFlyByPath() {
	        //     this.postMessage(MessageSet.Camera.cancelFlyByPath, '');
	        // }

	        // /**
	        //  * 暂停相机按路径漫游
	        //  */
	        // pauseFlyByPath() {
	        //     this.postMessage(MessageSet.Camera.pauseFlyByPath, '');
	        // }

	        // /**
	        //  * 重新开始相机按路径漫游，如相机飞行到路径尽头则重新开始
	        //  */
	        // restartFlyByPath() {
	        //     this.postMessage(MessageSet.Camera.restartFlyByPath, '');
	        // }

	    }, {
	        key: '_flyTo',
	        value: function _flyTo(vp, time) {
	            var _this3 = this;

	            var callBack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

	            if (!time) {
	                time = 0;
	            }
	            if (!isNaN(time) && time >= 0) {
	                if (this._viewpoint) {
	                    for (var key in this._viewpoint) {
	                        if (vp[key] === undefined) vp[key] = this._viewpoint[key];
	                    }
	                }
	                if (vp && (0, _Util.checkCameraViewPoint)(vp)) {

	                    if (vp.long === undefined) {
	                        vp.long = vp.lon;
	                    }
	                    this._actionFinishCallBack = callBack;
	                    this.postMessage(_MessageSet2.default.Camera.flyTo, { vp: vp, time: time });
	                    delete vp.long;

	                    var dHeight = Math.abs(vp.height - this._viewpoint.height);
	                    var dRange = Math.abs(vp.range - this._viewpoint.range);
	                    var dPitch = Math.abs(vp.pitch - this._viewpoint.pitch);
	                    var dHeading = Math.abs(vp.heading - this._viewpoint.heading);
	                    var dLon = Math.abs(vp.lon - this._viewpoint.lon);
	                    var dLat = Math.abs(vp.lat - this._viewpoint.lat);
	                    if (dHeight < 1 && dRange < 10 && dHeading < 0.0001 && dPitch < 0.0001 && dLat < 0.0001 && dLat < 0.0001) {
	                        if (this._actionFinishCallBack) {
	                            setTimeout(function () {
	                                var temoCallBack = _this3._actionFinishCallBack;
	                                _this3._actionFinishCallBack = undefined;
	                                temoCallBack();
	                            }, time * 1000 + 200);
	                        }
	                    }
	                } else {
	                    console.warn("viewpoint\u4E3A\u65E0\u6548\u503C" + vp + "\u65E0\u6CD5\u98DE\u5230\u6307\u5B9A\u4F4D\u7F6E");
	                    return {};
	                }
	            } else {
	                console.warn('参数错误，time不能小于0');
	            }
	        }
	    }, {
	        key: '_callBack',
	        value: function _callBack(msg) {
	            switch (msg.para1) {
	                case _MessageSet2.default.Camera.geoToScreen:
	                    this._updateGeoToScreen(msg.para2.geo_to_screen);
	                    break;
	                case _MessageSet2.default.Camera.screenToGeo:
	                    this._updateScreenToGeo(msg.para2.screen_to_geo);
	                    break;
	                case _MessageSet2.default.Camera.updateCamera:
	                    this._updateCamera(msg.para2.camera_change);
	                    break;
	                case _MessageSet2.default.Camera.flyByPathEnd:
	                    if (this._flyByPathCallBack) {
	                        this._flyByPathCallBack();
	                    }
	                    break;
	                case _MessageSet2.default.Camera.actionFinish:
	                    if (this._actionFinishCallBack) {
	                        var tempaAtionFinishCallBack = this._actionFinishCallBack;
	                        this._actionFinishCallBack = undefined;
	                        tempaAtionFinishCallBack();
	                    }
	                    if (this._cameraChangeFinishCallback.length > 0) {
	                        var tmpCameraChangeFinish = {
	                            viewpoint: this.viewpoint,
	                            focusRegion: this.focusRegion,
	                            tiles: this.tiles,
	                            scale: this.scale
	                        };

	                        this._cameraChangeFinishCallback.forEach(function (fun) {
	                            fun(tmpCameraChangeFinish);
	                        });
	                    }
	                    break;
	                default:
	                    break;
	            }
	        }

	        //相机变化回调函数

	    }, {
	        key: '_updateCamera',
	        value: function _updateCamera(cameraChange) {
	            if (!cameraChange) return;

	            if (!this._complete) {
	                this._complete = true;
	            }
	            var tempViewpoint = void 0;
	            var tempFocusRegion = void 0;
	            var tempTiles = void 0;

	            if (cameraChange.viewpoint) {
	                tempViewpoint = this._updateViewpoint(cameraChange.viewpoint);
	            }
	            if (cameraChange.focus_region) {
	                tempFocusRegion = this._updateFocusRegion(cameraChange.focus_region);
	            }
	            if (cameraChange.tiles) {
	                tempTiles = this._updateTiles(cameraChange.tiles);
	            }

	            var tmpCameraChange = {
	                viewpoint: tempViewpoint,
	                focusRegion: tempFocusRegion,
	                tiles: tempTiles,
	                scale: this._scale
	            };

	            this._cameraChangecallback.forEach(function (fun) {
	                fun(tmpCameraChange);
	            });
	        }

	        //相机姿态变化

	    }, {
	        key: '_updateViewpoint',
	        value: function _updateViewpoint(vp) {
	            if (!vp) return undefined;
	            var vpObj = vp;
	            this._viewpoint = {};
	            this._viewpoint.range = Number(vpObj.range.substr(0, vpObj.range.length - 1));
	            this._viewpoint.lon = Number(vpObj.long);
	            this._viewpoint.lat = Number(vpObj.lat);
	            this._viewpoint.pitch = Number(vpObj.pitch);
	            this._viewpoint.height = Number(vpObj.height);
	            this._viewpoint.heading = Number(vpObj.heading);
	            this._computeRangeToScale(this._viewpoint.range);

	            var tempViewpoint = {};
	            for (var key in this._viewpoint) {
	                tempViewpoint[key] = this._viewpoint[key];
	            }
	            return tempViewpoint;
	        }

	        // 监听当前视口下经纬度范围

	    }, {
	        key: '_updateFocusRegion',
	        value: function _updateFocusRegion(focusRegion) {
	            if (!focusRegion) return undefined;
	            this._focusRegion = {};
	            this._focusRegion.maxLat = parseFloat(focusRegion.max_lat);
	            this._focusRegion.minLat = parseFloat(focusRegion.min_lat);
	            this._focusRegion.maxLon = parseFloat(focusRegion.max_lon);
	            this._focusRegion.minLon = parseFloat(focusRegion.min_lon);

	            var tempFocusRegion = {};
	            for (var key in this._focusRegion) {
	                tempFocusRegion[key] = this._focusRegion[key];
	            }

	            return tempFocusRegion;
	        }

	        // 地理编码更新

	    }, {
	        key: '_updateTiles',
	        value: function _updateTiles(tiles) {
	            if (!(typeof tiles === 'string')) return undefined;

	            tiles = tiles.split(',');

	            var tempTiles = [];
	            for (var i = 0; i < tiles.length; i++) {
	                tempTiles.push(tiles[i]);
	            }

	            if (!this._tilesIsChange(tiles)) {
	                return tempTiles;
	            }

	            return tempTiles;
	        }

	        /**
	        * 更新地理编码
	        * @param tiles 最新的地理编码
	        * return true||false编码发生变化返回true没有发生变化返回false
	        */

	    }, {
	        key: '_tilesIsChange',
	        value: function _tilesIsChange(tiles) {
	            var _this4 = this;

	            var isChange = false;

	            //检测是否发生变化
	            if (tiles.length !== this._tiles.length) {
	                isChange = true;
	            } else {
	                for (var i = 0; i < tiles.length; i++) {
	                    var index = this._tiles.indexOf(tiles[i]);
	                    if (index < 0) {
	                        isChange = true;
	                        break;
	                    }
	                }
	            }

	            if (isChange) {
	                this._tiles = [];
	                tiles.forEach(function (value) {
	                    _this4._tiles.push(value);
	                });
	                return true;
	            }

	            return false;
	        }

	        /**
	         * 根据相机距离焦点位置计算当前比例尺
	         */

	    }, {
	        key: '_computeRangeToScale',
	        value: function _computeRangeToScale(range) {
	            var viewHeight = this.map.parent.container[0].offsetHeight;
	            this._scale = Math.tan(30 / 2 / 180 * Math.PI) * range * 2 / viewHeight;
	        }

	        /**
	         * 根据相机当前比例尺计算焦点位置
	         */

	    }, {
	        key: '_computeScaleToRange',
	        value: function _computeScaleToRange(scale) {
	            var viewHeight = this.map.parent.container[0].offsetHeight;
	            return scale * viewHeight / 2 / Math.tan(30 / 2 / 180 * Math.PI);
	        }

	        /**
	         * 改变相机最大最小范围
	         */

	    }, {
	        key: '_setMinMaxDistance',
	        value: function _setMinMaxDistance() {
	            if (this._maxDistance !== undefined && this._minDistance !== undefined && this._maxDistance > this._minDistance) {
	                this.postMessage(_MessageSet2.default.Camera.minMaxDistance, { min: this._minDistance, max: this._maxDistance });
	            }
	        }

	        /**
	         * 监听屏幕坐标转经纬度坐标
	         */

	    }, {
	        key: '_updateScreenToGeo',
	        value: function _updateScreenToGeo(para) {
	            if (!para || !this._screenToGeo) return;
	            var obj = this._screenToGeo.get(para.id);
	            var geoArray = (0, _Util.strToArray)(para.geo);
	            if (obj) {
	                var result = [];
	                for (var i = 0; i < geoArray.length; i++) {
	                    result.push({
	                        x: obj.screenArray[i][0],
	                        y: this.map.parent.container[0].clientHeight - obj.screenArray[i][1],
	                        lon: geoArray[i][0],
	                        lat: geoArray[i][1],
	                        alt: geoArray[i][2]
	                    });
	                }
	                // obj.fun({x: obj.x, y: obj.y, lon: Number(geo.lon), lat: Number(geo.lat), alt: Number(geo.alt)});
	                obj.fun(result);
	                this._screenToGeo.delete(result.id);
	            }
	        }

	        /**
	         * 监听经纬度坐标转屏幕坐标
	         */

	    }, {
	        key: '_updateGeoToScreen',
	        value: function _updateGeoToScreen(para) {
	            if (!para || !this._geoToScreen) return;
	            var obj = this._geoToScreen.get(para.id);
	            var screenArray = (0, _Util.strToArray)(para.screen);
	            if (obj) {
	                var result = [];
	                for (var i = 0; i < screenArray.length; i++) {
	                    result.push({
	                        x: Math.round(screenArray[i][0]),
	                        y: Math.round(this.map.parent.container[0].clientHeight - screenArray[i][1]),
	                        lon: obj.geoArray[i][0],
	                        lat: obj.geoArray[i][1],
	                        alt: obj.geoArray[i][2]
	                    });
	                }
	                obj.fun(result);
	                this._geoToScreen.delete(screen.id);
	            }

	            // let y = Number(screen.y);
	            // y = this.map.parent.container[0].clientHeight - y
	            // const obj = this._geoToScreen.get(screen.id);
	            // var result = [];
	            // if (obj) {
	            //     obj.fun({x: Number(screen.x), y: y, lon: obj.lon, lat: obj.lat, alt: obj.alt});
	            //     this._geoToScreen.delete(screen.id);
	            // }
	        }

	        /**
	         * 判断传入对象参数是否有效且均为数字类型
	         */

	    }, {
	        key: '_judgeParaValid',
	        value: function _judgeParaValid(obj) {
	            if (obj === null || obj === undefined) return false;
	            if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') return false;

	            for (var key in obj) {
	                var value = obj[key];
	                if (value === null || isNaN(value)) return false;
	            }
	            return true;
	        }

	        /**
	         * 导出默认相机姿态为Json
	         */

	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            return { viewpoint: this.home };
	        }

	        /**
	         * 导出默认相机姿态为xml
	         */

	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            return '<camera><viewpoint lon=' + this.home.lon + ' lat=' + this.home.lat + ' range=' + this.home.range + ' height=' + this.home.height + ' pitch=' + this.home.pitch + ' heading=' + this.home.heading + '></viewpoint></camera>';
	        }
	    }, {
	        key: 'home',
	        get: function get() {
	            var cameraHome = {};
	            for (var key in this._home) {
	                cameraHome[key] = this._home[key];
	            }
	            return cameraHome;
	        },
	        set: function set(vp) {
	            if (vp && (0, _Util.checkCameraViewPoint)(vp)) {
	                for (var key in this._home) {
	                    var value = parseFloat(vp[key]);
	                    if (isNaN(value)) continue;
	                    this._home[key] = value;
	                }
	                this.postMessage(_MessageSet2.default.Camera.home, { vp: this._home });
	            } else {
	                console.warn("viewpoint\u4E3A\u65E0\u6548\u503C");
	            }
	        }

	        /**
	         * 相机最大距离
	         * @property maxDistance
	         */

	    }, {
	        key: 'maxDistance',
	        set: function set(max) {
	            if (max === null || max === undefined || isNaN(max) || max === this._maxDistance) return;
	            if (max > this._minDistance) {
	                this._maxDistance = max;
	                this._setMinMaxDistance();
	            } else {
	                console.warn("maxDistance\u5FC5\u987B\u5927\u4E8EminDistance(" + this._minDistance + ')');
	            }
	        },
	        get: function get() {
	            return this._maxDistance;
	        }

	        /**
	         * 相机最小距离
	         * @property minDistance
	         */

	    }, {
	        key: 'minDistance',
	        set: function set(min) {
	            if (min === null || min === undefined || isNaN(min) || min === this._minDistance) return;
	            if (min < this._maxDistance) {
	                if (min < 0) {
	                    console.warn('参数错误：minDistance不能小于0');
	                    return;
	                }
	                this._minDistance = min;
	                this._setMinMaxDistance();
	            } else {
	                console.warn("minDistance\u5FC5\u987B\u5C0F\u4E8EmaxDistance(" + this._maxDistance + ')');
	            }
	        },
	        get: function get() {
	            return this._minDistance;
	        }

	        /**
	         * 相机比例尺
	         * @property scale
	         */

	    }, {
	        key: 'scale',
	        get: function get() {
	            return this._scale;
	        },
	        set: function set(scale) {
	            if (!scale) return;
	            //计算scale对应的相机高度
	            var range = this._computeScaleToRange(scale);
	            this.setViewpoint({ range: range });
	        }

	        /**
	         * 相机是否开启漫游（开启漫游后鼠标将无法控制相机）
	         * @property roaming
	         */

	    }, {
	        key: 'roaming',
	        set: function set(roaming) {
	            // if (roaming === undefined || roaming === this._roaming) return;
	            if (typeof roaming === 'boolean') {
	                // this._roaming = Boolean(roaming);
	                this._roaming = roaming;
	                this.postMessage(_MessageSet2.default.Camera.roaming, this._roaming);
	            } else {
	                console.warn('参数必须为Boolean类型');
	            }
	        },
	        get: function get() {
	            return this._roaming;
	        }

	        /**
	         * 相机跟随对象
	        * @property followObjId
	        */

	    }, {
	        key: 'followObjId',
	        set: function set(id) {
	            if (id === undefined) {
	                this.postMessage(_MessageSet2.default.Camera.bingdingFollowObject, '');
	            } else {
	                this.postMessage(_MessageSet2.default.Camera.bingdingFollowObject, id);
	            }
	            this._followObjId = id;
	        },
	        get: function get() {
	            return this._followObjId;
	        }
	    }, {
	        key: 'viewpoint',
	        set: function set(vp) {
	            if (vp && (0, _Util.checkCameraViewPoint)(vp)) {
	                return this._flyTo(vp, 0);
	            }
	            console.warn("viewpoint\u4E3A\u65E0\u6548\u503C" + vp + "\u65E0\u6CD5\u98DE\u5230\u6307\u5B9A\u4F4D\u7F6E");
	            return {};
	        },
	        get: function get() {
	            var viewpoint = {};
	            if (this._viewpoint) {
	                for (var key in this._viewpoint) {
	                    viewpoint[key] = this._viewpoint[key];
	                }
	            }
	            return viewpoint;
	        }

	        /**
	         * 当前地理层级编码(只读)
	         * @property tiles
	         * @return {Array} 地理层级编码列表
	         */

	    }, {
	        key: 'tiles',
	        get: function get() {
	            var tiles = [];
	            this._tiles.forEach(function (value) {
	                tiles.push(value);
	            });
	            return tiles;
	        }

	        /**
	         * 当前视口下的经纬度范围 (只读)
	         * @property focusRegion 
	         * @return focusRegion {Object} {maxLat:,minLat:,maxLon:,minLon:}
	         */

	    }, {
	        key: 'focusRegion',
	        get: function get() {
	            var focusRegion = {};
	            for (var key in this._focusRegion) {
	                focusRegion[key] = this._focusRegion[key];
	            }
	            return focusRegion;
	        }
	    }]);

	    return Camera;
	}(_Class3.default);

	exports.default = Camera;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Camera.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * 文件：Math.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-06-19 20:56:50
	 * 用途：数学运算相关
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _Util = __webpack_require__(6);

	var _Util2 = _interopRequireDefault(_Util);

	var _Vertices = __webpack_require__(70);

	var _Vertices2 = _interopRequireDefault(_Vertices);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module core
	 * @namespace GV
	 * @class Math
	 */
	var Math = function (_Class) {
	    _inherits(Math, _Class);

	    /**
	     * 数学
	     * @class Math
	     * @constructor
	     * @show true
	     * @chainable
	     */
	    function Math(map, params) {
	        _classCallCheck(this, Math);

	        var _this = _possibleConstructorReturn(this, (Math.__proto__ || Object.getPrototypeOf(Math)).call(this, params));

	        _this.setMap(map);

	        _this._callBackFuns = new Map();
	        return _this;
	    }

	    _createClass(Math, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            switch (msg.para1) {
	                case _MessageSet2.default.Math.distance:
	                case _MessageSet2.default.Math.area:
	                case _MessageSet2.default.Math.azimuthalAngle:
	                    this._measure(msg.para2.measure);
	                    break;
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: '_measure',
	        value: function _measure(data) {
	            if (data === undefined || data.id === undefined) return;

	            var res = this._callBackFuns.get(data.id);
	            if (res === undefined) return;

	            res(parseFloat(data.data));
	            this._callBackFuns.delete(data.id);
	        }

	        /**
	         * 距离测量
	         * @method distance
	         * @param geoArray {Object} 测量点数组[[lon,lat,alt],[lon,lat,alt],[lon,lat,alt],……]或[[lon,lat],[lon,lat],[lon,lat],……]，alt默认为0
	         * @param fun  {Function} 回调函数返回测量结果
	         * @return {Boolean} 数据是否有效
	         */

	    }, {
	        key: 'distance',
	        value: function distance(geoArray, fun) {
	            if (geoArray === undefined || fun === undefined) return false;
	            if (!_Util.$.isArray(geoArray)) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'distance', 'geoArray', 'Array'));
	                return false;
	            }

	            if (geoArray.length < 2) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_ARRAY_LENGHT, 'distance', 'geoArray', '>', '1', geoArray.length));
	                return false;
	            }

	            for (var i = 0; i < geoArray.length; i++) {
	                if (geoArray[i].length === 3 || geoArray[i].length === 2) {
	                    for (var j = 0; j < geoArray[i].length; j++) {
	                        if (!_Util.$.isNumeric(geoArray[i][j])) {
	                            console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_ARRAY_ELEMENT_TYPE, 'distance', 'geoArray', 'Number', '[' + i + '][' + j + ']', _Util.$.type(geoArray[i][j])));
	                            return false;
	                        }
	                    }
	                    if (geoArray[i][0] < -180 || geoArray[i][0] > 180) {
	                        console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_ARRAY_ELEMENT_PARAMS, 'distance', 'geoArray'));
	                        return false;
	                    }
	                    if (geoArray[i][1] < -90 || geoArray[i][1] > 90) {
	                        console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_ARRAY_ELEMENT_PARAMS, 'distance', 'geoArray'));
	                        return false;
	                    }
	                    if (geoArray[i].length === 2) {
	                        for (var _j = 0; _j < geoArray[i].length; _j++) {
	                            geoArray[i][2] = 0;
	                        }
	                    }
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_ARRAY_LENGHT, 'distance', 'geoArray', '=', '3', geoArray.length));
	                    return false;
	                }
	            }

	            var geoArrayString = (0, _Util.arrayToStr)(geoArray);
	            var id = (0, _Util.createGuid)();
	            this.postMessage(_MessageSet2.default.Math.distance, { geoArrayString: geoArrayString, id: id });
	            this._callBackFuns.set(id, fun);

	            return true;
	        }

	        /** 
	         * 面积测量
	         * @method area
	         * @param vertices {Array} 多边行的包围线关键点
	         * @param fun {Function} 回调函数返回测量结果
	         * @return {Boolean} 数据是否有效
	        */

	    }, {
	        key: 'area',
	        value: function area(vertices, fun) {
	            if (vertices === undefined || fun === undefined) return false;
	            if (!_Util.$.isArray(vertices)) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'area', 'vertices', 'Array'));
	                return false;
	            }

	            if (vertices.length < 3) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_ARRAY_LENGHT, 'area', 'vertices', '>', 2, vertices.length));
	                return false;
	            }
	            for (var i = 0; i < vertices.length; i++) {
	                if (vertices[i].length === 3) {
	                    for (var j = 0; j < 3; j++) {
	                        if (!_Util.$.isNumeric(vertices[i][j])) {
	                            console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_ARRAY_ELEMENT_TYPE, 'area', 'vertices', 'Number', '[' + i + '][' + j + ']', _Util.$.type(vertices[i][j])));
	                            return false;
	                        }
	                    }
	                    if (vertices[i][0] < -180 || vertices[i][0] > 180) {
	                        console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_ARRAY_ELEMENT_PARAMS, 'area', 'vertices'));
	                        return false;
	                    }
	                    if (vertices[i][1] < -90 || vertices[i][1] > 90) {
	                        console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_ARRAY_ELEMENT_PARAMS, 'area', 'vertices'));
	                        return false;
	                    }
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_ARRAY_LENGHT, 'area', 'vertices', '=', '3', vertices.length));
	                    return false;
	                }
	            }

	            var id = (0, _Util.createGuid)();
	            var tempVertices = new _Vertices2.default(vertices);
	            this.postMessage(_MessageSet2.default.Math.area, { vertices: tempVertices.toJson(), id: id });
	            this._callBackFuns.set(id, fun);
	            return true;
	        }

	        /**
	         * 方位角测量
	         * @method azimuthalAngle
	         * @param geo1 {Object} 第一个向量{lon:,lat:,alt}
	         * @param geo2 {Object} 第二个向量{lon:,lat:,alt}
	         * @param fun  {Function} 回调函数返回测量结果
	         * @return {Boolean} 数据是否有效
	         */

	    }, {
	        key: 'azimuthalAngle',
	        value: function azimuthalAngle(geo1, geo2, fun) {
	            if (geo1 === undefined || geo2 === undefined || fun === undefined) return false;

	            if (!_Util.$.isPlainObject(geo1)) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'area', 'geo1', 'Object'));
	                return false;
	            }

	            if (!_Util.$.isPlainObject(geo2)) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'area', 'geo2', 'Object'));
	                return false;
	            }

	            if (geo1.lon < -180 || geo1.lon > 180) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONE, 'azimuthalAngle', 'geo1', '[-180, 180]'));
	                return false;
	            }
	            if (geo1.lat < -90 || geo1.lat > 90) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONE, 'azimuthalAngle', 'geo1', '[-90, 90]'));
	                return false;
	            }

	            if (geo2.lon < -180 || geo2.lon > 180) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONE, 'azimuthalAngle', 'geo2', '[-180, 180]'));
	                return false;
	            }
	            if (geo2.lat < -90 || geo2.lat > 90) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONE, 'azimuthalAngle', 'geo2', '[-90, 90]'));
	                return false;
	            }

	            var id = (0, _Util.createGuid)();
	            this.postMessage(_MessageSet2.default.Math.azimuthalAngle, { geo1: geo1, geo2: geo2, id: id });
	            this._callBackFuns.set(id, fun);

	            return true;
	        }
	    }]);

	    return Math;
	}(_Class3.default);

	exports.default = Math;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Math.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * 文件：MapOptions.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com
	 * 日期：2017-03-03 20:55:29.
	 * 用途：地图环境变量类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Option2 = __webpack_require__(20);

	var _Option3 = _interopRequireDefault(_Option2);

	var _ProfileOption = __webpack_require__(107);

	var _ProfileOption2 = _interopRequireDefault(_ProfileOption);

	var _ProxyOption = __webpack_require__(108);

	var _ProxyOption2 = _interopRequireDefault(_ProxyOption);

	var _CacheOption = __webpack_require__(109);

	var _CacheOption2 = _interopRequireDefault(_CacheOption);

	var _CachePolicyOption = __webpack_require__(19);

	var _CachePolicyOption2 = _interopRequireDefault(_CachePolicyOption);

	var _TerrainOption = __webpack_require__(110);

	var _TerrainOption2 = _interopRequireDefault(_TerrainOption);

	var _SkyOption = __webpack_require__(111);

	var _SkyOption2 = _interopRequireDefault(_SkyOption);

	var _OceanOption = __webpack_require__(113);

	var _OceanOption2 = _interopRequireDefault(_OceanOption);

	var _WindOption = __webpack_require__(114);

	var _WindOption2 = _interopRequireDefault(_WindOption);

	var _GraticuleOption = __webpack_require__(115);

	var _GraticuleOption2 = _interopRequireDefault(_GraticuleOption);

	var _GridOption = __webpack_require__(116);

	var _GridOption2 = _interopRequireDefault(_GridOption);

	var _GalaxyG = __webpack_require__(117);

	var _GalaxyG2 = _interopRequireDefault(_GalaxyG);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	var _Util = __webpack_require__(6);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module mapOptions
	 * @namespace GV
	 */
	var MapOptions = function (_Option) {
	    _inherits(MapOptions, _Option);

	    /**
	     * @class MapOptions
	     * @constructor new GV.MapOptions(options);
	     * @param options {JSON} 环境变量参数配置
	     * @param options.cache {json} 缓存策略 （参数：参考GV.CacheOption初始化）
	     * @param options.cachePolicy {json} 缓存策略配置 （参数：GV.CachePolicy初始化）
	     * @param options.terrain {json} 图层配置（参数参考GV.TerrainOption初始化）
	     * @param options.sky {json} 天空配置（需要底层特效扩展包支持）
	     * @param options.ocean {json} 海水配置（需要底层特效扩展包支持）
	     * @param options.spaceInfo {bool} 是否获取太阳高度角与月亮角度等信息
	     */
	    function MapOptions(options) {
	        _classCallCheck(this, MapOptions);

	        var _this = _possibleConstructorReturn(this, (MapOptions.__proto__ || Object.getPrototypeOf(MapOptions)).call(this));

	        _this._profile = new _ProfileOption2.default(options.profile);
	        if (options.cache) _this._cache = new _CacheOption2.default(options.cache);
	        if (options.cachePolicy) _this._cachePolicy = new _CachePolicyOption2.default(options.cache_policy);
	        _this._terrain = new _TerrainOption2.default(options.terrain, _this);
	        _this._sky = new _SkyOption2.default(options.sky, _this);
	        _this._wind = new _WindOption2.default(options.wind, _this);
	        _this._ocean = new _OceanOption2.default(options.ocean, _this);
	        _this._graticule = new _GraticuleOption2.default(options.graticule, _this);
	        _this._grid = new _GridOption2.default(options.grid, _this);
	        _this._j2000 = new _GalaxyG2.default(options.j2000, _this);
	        _this._spaceInfo = options.spaceInfo === true || options.spaceInfo === 'true' ? true : false;
	        return _this;
	    }

	    _createClass(MapOptions, [{
	        key: 'toXml',

	        /**
	         * 转换成Map的初始化所需要的options
	         */
	        value: function toXml() {
	            var xml = _get(MapOptions.prototype.__proto__ || Object.getPrototypeOf(MapOptions.prototype), 'toXml', this).call(this);
	            xml = xml === '' ? '' : '<options>' + xml + '</options>';
	            return xml;
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var json = _get(MapOptions.prototype.__proto__ || Object.getPrototypeOf(MapOptions.prototype), 'toJson', this).call(this);
	            return { options: json };
	        }
	    }, {
	        key: 'spaceInfo',
	        set: function set(isOpen) {
	            isOpen = isOpen === true || isOpen === 'true' ? true : false;
	            if (isOpen === this._spaceInfo) return;
	            this._spaceInfo = isOpen;
	            this.postMessage("do_update_option", { spaceInfo: this._spaceInfo });
	        },
	        get: function get() {
	            return this._spaceInfo;
	        }
	    }, {
	        key: 'sky',
	        get: function get() {
	            return this._sky;
	        }
	    }, {
	        key: 'wind',
	        get: function get() {
	            return this._wind;
	        }
	    }, {
	        key: 'ocean',
	        get: function get() {
	            return this._ocean;
	        }
	    }, {
	        key: 'profile',
	        get: function get() {
	            return this._profile;
	        }
	    }, {
	        key: 'cache',
	        get: function get() {
	            return this._cache;
	        }
	    }, {
	        key: 'cachePolicy',
	        get: function get() {
	            return this._cachePolicy;
	        }
	    }, {
	        key: 'terrain',
	        get: function get() {
	            return this._terrain;
	        }
	    }, {
	        key: 'graticule',
	        get: function get() {
	            return this._graticule;
	        }
	    }, {
	        key: 'grid',
	        get: function get() {
	            return this._grid;
	        }
	    }, {
	        key: 'j2000',
	        get: function get() {
	            return this._j2000;
	        }
	    }]);

	    return MapOptions;
	}(_Option3.default);

	exports.default = MapOptions;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "MapOptions.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * 文件：ProfileOption.js
	 * 作者：巩志远、钱晶
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com, jqian@mail.ie.ac.cn
	 * 日期：2017-03-03 21:01:25.
	 * 用途：定义SRS,空间范围, 瓦片策略类
	 */

	'use strict';
	/**
	 * @module mapOptions
	 * @namespace GV
	 */

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Option2 = __webpack_require__(20);

	var _Option3 = _interopRequireDefault(_Option2);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var ProfileOption = function (_Option) {
	    _inherits(ProfileOption, _Option);

	    /**
	     * @class ProfileOption
	     * @constructor new GV.ProfileOption(options);
	     * @param options {JSON} 参数
	     */
	    function ProfileOption(options) {
	        _classCallCheck(this, ProfileOption);

	        if (typeof options === 'string') {
	            var _this = _possibleConstructorReturn(this, (ProfileOption.__proto__ || Object.getPrototypeOf(ProfileOption)).call(this));

	            _this._propValue = options;
	        } else {
	            var _this = _possibleConstructorReturn(this, (ProfileOption.__proto__ || Object.getPrototypeOf(ProfileOption)).call(this));

	            _this._propValue = 'plate-carre';
	        }
	        return _possibleConstructorReturn(_this);
	    }

	    _createClass(ProfileOption, [{
	        key: 'toXml',
	        value: function toXml() {
	            return this._propValue === undefined ? '' : '<profile>' + this._propValue + '</profile>';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            return this._propValue;
	        }
	    }]);

	    return ProfileOption;
	}(_Option3.default);

	exports.default = ProfileOption;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ProfileOption.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * 文件：ProxyOption.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com
	 * 日期：2017-03-03 21:05:22.
	 * 用途：网络相关配置类
	 */
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Option2 = __webpack_require__(20);

	var _Option3 = _interopRequireDefault(_Option2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var ProxyOption = function (_Option) {
	  _inherits(ProxyOption, _Option);

	  function ProxyOption() {
	    _classCallCheck(this, ProxyOption);

	    return _possibleConstructorReturn(this, (ProxyOption.__proto__ || Object.getPrototypeOf(ProxyOption)).apply(this, arguments));
	  }

	  return ProxyOption;
	}(_Option3.default);

	exports.default = ProxyOption;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ProxyOption.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * 文件：CacheOption.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com
	 * 日期：2017-03-03 21:07:18.
	 * 用途：缓存配置类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Exception = __webpack_require__(35);

	var _Exception2 = _interopRequireDefault(_Exception);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	var _Option2 = __webpack_require__(20);

	var _Option3 = _interopRequireDefault(_Option2);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module mapOptions
	 * @namespace GV
	 */
	var CacheOption = function (_Option) {
	    _inherits(CacheOption, _Option);

	    /**
	     * @class CacheOption
	     * @constructor new GV.CacheOption(options);
	     * @param options {JSON} 环境变量参数配置
	     * @param options.driver {string} 缓存使用插件现只支持两种filesystem|leveldb
	     * @param options.driver {string} 缓存文件或文件夹所在的路径
	     */
	    function CacheOption(options) {
	        _classCallCheck(this, CacheOption);

	        if (options && options.driver !== 'filesystem' && options.driver !== 'leveldb') {
	            throw new _Exception2.default(_ExceptionMessage2.default.UNDEFINED_CACHE_OPTION_PARAM, _ExceptionMessage2.default.UNDEFINED_CACHE_OPTION_PARAM.type);
	        }
	        return _possibleConstructorReturn(this, (CacheOption.__proto__ || Object.getPrototypeOf(CacheOption)).call(this, options));
	    }

	    _createClass(CacheOption, [{
	        key: 'toXml',
	        value: function toXml() {
	            var props = _get(CacheOption.prototype.__proto__ || Object.getPrototypeOf(CacheOption.prototype), 'toXml', this).call(this);
	            return props === '' ? '' : '<cache>' + props + '</cache>';
	        }
	    }, {
	        key: 'path',
	        set: function set(path) {
	            this._path = path;
	        },
	        get: function get() {
	            return this._path;
	        }
	    }, {
	        key: 'driver',
	        set: function set(driver) {
	            this._driver = driver;
	        },
	        get: function get() {
	            return this._driver;
	        }
	    }]);

	    return CacheOption;
	}(_Option3.default);

	exports.default = CacheOption;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "CacheOption.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * 文件：TerrainOption.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com
	 * 日期：2017-03-03 21:09:45.
	 * 用途：地形相关的配置类
	 */
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Option2 = __webpack_require__(20);

	var _Option3 = _interopRequireDefault(_Option2);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _Exception = __webpack_require__(35);

	var _Exception2 = _interopRequireDefault(_Exception);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module mapOptions
	 * @namespace GV
	 */
	var TerrainOption = function (_Option) {
	    _inherits(TerrainOption, _Option);

	    function TerrainOption(options, parent) {
	        _classCallCheck(this, TerrainOption);

	        var tempOptions = {
	            driver: 'mp',
	            elevation_smoothing: false,
	            incremental_update: false,
	            max_lod: 23,
	            min_lod: 0,
	            first_lod: 0,
	            tile_size: 17,
	            vertical_scale: 1,
	            sample_ratio: 1.0,
	            min_tile_range_factor: 7.0,
	            normalize_edges: true,
	            range_mode: 'DISTANCE_FROM_EYE_POINT',
	            skirt_ratio: 0.05,
	            debug: false
	        };
	        if (Util.isObject(options)) {
	            for (var key in tempOptions) {
	                if (options[key] !== undefined) {
	                    tempOptions[key] = options[key];
	                }
	            }
	        }

	        var _this = _possibleConstructorReturn(this, (TerrainOption.__proto__ || Object.getPrototypeOf(TerrainOption)).call(this, tempOptions, parent));

	        if (_this._minLod > _this._maxLod) {
	            _this._minLod = 0;
	            _this._maxLod = 23;
	            console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CUSTOM, 'TerrainOption', 'min_lod不可大于max_lod'));
	        }
	        if (_this._minLod < _this._firstLod) {
	            _this._firstLod = 0;
	            console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CUSTOM, 'TerrainOption', '属性first_lod不可大于min_lod'));
	        }
	        return _this;
	    }
	    /**
	     * map地形配置
	     *  <pre>其作用主要进行地形相关配置</pre>
	     * @extends Option
	     * @class TerrainOption
	     * @constructor
	     * @param  {object} options 参数详情如下：<br>
	     * @param options.driver {string} 
	     * @param options.min_tile_range_factor {number} 地形调度时所加载的数据块范围系数，该值须大于0，默认参数为7，如果块的半径为10Km，系数为8，则地形加载的范围为80Km.
	     * @param options.min_lod {number} 最小可视层级，数据源在上一个层级即使存在无效的数据，地形细分也将细分到这个层级，保证这个层级的数据是可以看见的，该值不可为负，默认参数为0
	     * @param options.max_lod {number} 最大可视层级，地形渲染的最大层级数，即使数据源的分辨率更高，也不会渲染大于这一层级的数据.该值须大于0，默认参数为23
	     * @param options.first_lod {number} 数据源显示的最低层级，即比这个层级更小的层级数据不会再显示.该值不可为负，默认参数为1
	     * @param options.tile_size {number} 地形块的尺寸大小，每个地形块大小是tile_size * tile_size.该值位整数，须大于1，默认参数为17
	     * @param options.sample_ratio {number} 瓦片数据的采样率，通过设定不同的采样率以得到不同精细程度的地形瓦片，默认是1.0
	     * @param options.skirt_ratio {number} 地形瓦片边缘率，瓦片之间绘制边缘以防止不同的瓦片之间出现缝隙。值太小，在不同瓦片之间可能会出现缝隙，如果太大，可能会造成不必要的渲染而影响系统的渲染性能，对于高度变化比较大的地形或者 是做了高程夸张的地形可以尽量将该值设的大一些，以免出现缝隙，建议范围（0,0.2），默认0.05
	     * @param options.vertical_scale {number} 高程夸张系数，该值须大于0，默认是1.0，也就是正常渲染高程的真实高度
	     * @param options.edge_buffer_ratio {number} 边缘缓冲率，就是地形瓦片的延展率，比如将地形做镶嵌或者重投影时为了能够准确覆盖到所有的瓦片数据需要将瓦片范围进行适当的放宽，如果设定0.2，放宽的倍数就是1.02b
	     * @param options.incremental_update {boolean} 是否采用增量模式。开启这个状态，影像数据图层发生更改时，不需要全局刷新，只刷新当前显示的区域，能提高刷新速度，默认为关闭状态
	     * @param options.normalize_edges {boolean} 地形块边缘计算法线，在光照效果下使得块之间的过度看起来比较平滑
	     * @param options.elevation_smoothing {boolean} 地形平滑，不同地形高度之间平滑过渡，但是导致了地形高度不准确，默认值是false
	     * @param options.range_mode {enum} range的计算模式
	     * @param options.mag_filter {enum} 影像块近视角纹理重采样算法
	     * @param options.min_filter {enum} 影像块远视角纹理重采样算法
	     * @param options.cluster_culling {number} 集群剔除，设为true似于把像机放在地下
	     * @param options.mercator_fast_path {boolean} 墨卡托快速路径允许渲染器显示墨卡托投影图像，而不需要重新投影。可以通过将此设置为false来禁用此技术(并允许重新投影)
	     * @param options.blending {boolean} 将此设置为true，就可使地球的部分透明。这对于看到地下物体很方便
	     * @param options.normal_maps {boolean} 是否要生成和使用正常的地图来代替几何法线。普通地图使用照明来创造高分辨率地形，而不是用三角形来表示。默认是引擎附件
	     * @param options.min_expiry_frames {number} 地形瓦的框架的数量。默认= 0
	     * @param options.min_expiry_time {number} 一个地形瓷砖还没有被挑选出来的秒数可以被考虑到过期。默认= 0
	     */

	    /**
	     * 设置getter和setter
	     */

	    /**
	     * 地形调度模式，默认值为mp模式.
	     * @param driver {string}
	     */

	    _createClass(TerrainOption, [{
	        key: '_propsTypeJudge',

	        /**
	         * 判断属性值类型
	         */
	        value: function _propsTypeJudge(param, paraType) {
	            var value = parseFloat(param, 10);
	            if (isNaN(value)) {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'TerrainOption', paraType, 'number'));
	                return undefined;
	            } else {
	                return value;
	            }
	        }
	    }, {
	        key: '_updateProperty',
	        value: function _updateProperty(property, value) {
	            var obj = {};
	            obj.terrain = {};
	            obj.terrain[property] = value;
	            this._updateOptionProperty(obj);
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var props = _get(TerrainOption.prototype.__proto__ || Object.getPrototypeOf(TerrainOption.prototype), 'toXml', this).call(this);
	            return props === '' ? '' : '<terrain>' + props + '</terrain>';
	        }
	    }, {
	        key: 'driver',
	        set: function set(driver) {
	            if (driver === 'mp') {
	                this._driver = driver;
	            } else {
	                this._driver = 'mp';
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CUSTOM, 'TerrainOption', '属性driver现在只支持"mp"'));
	            }
	        },
	        get: function get() {
	            return this._driver;
	        }

	        /*
	         * 指定地形是否开启光照，一般不要设置这个值，光照模式直接从场景中继承即可.
	         * @param lilghting {boolean}
	         */

	    }, {
	        key: 'lighting',
	        set: function set(lighting) {
	            this._lighting = lighting;
	        },
	        get: function get() {
	            return this._lighting;
	        }
	    }, {
	        key: 'debug',
	        set: function set(debug) {
	            this._debug = debug;
	        },
	        get: function get() {
	            return this._debug;
	        }

	        /**
	         * 地形调度时所加载的数据块范围系数，默认参数为6，如果块的半径为10Km，系数为8，则地形加载的范围为80Km.
	         * @param min_tile_range_factor {number}
	         */

	    }, {
	        key: 'minTileRangeFactor',
	        set: function set(min_tile_range_factor) {
	            var temp = this._propsTypeJudge(min_tile_range_factor, 'min_tile_range_factor');
	            if (temp > 0) {
	                this._minTileRangeFactor = temp;
	            } else {
	                this._minTileRangeFactor = 7.0;
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, 'TerrainOption', 'min_tile_range_factor', '> 0', 'none', 7.0));
	            }
	        },
	        get: function get() {
	            return this._minTileRangeFactor;
	        }

	        /**
	         * 最小可视层级，数据源在上一个层级即使存在无效的数据，地形细分也将细分到这个层级，保证这个层级的数据是可以看见的.
	         * @param minLod {number}
	         */

	    }, {
	        key: 'minLod',
	        set: function set(min_lod) {
	            var temp = this._propsTypeJudge(min_lod, 'min_lod');
	            if (temp >= 0) {
	                this._minLod = temp;
	            } else {
	                this._minLod = 0;
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, 'TerrainOption', 'min_lod', '>= 0', 'none', 0));
	            }
	        },
	        get: function get() {
	            return this._minLod;
	        }

	        /**
	         * 最大可视层级，地形渲染的最大层级数，即使数据源的分辨率更高，也不会渲染大于这一层级的数据.
	         * @param maxLod {number}
	         */

	    }, {
	        key: 'maxLod',
	        set: function set(max_lod) {
	            var temp = this._propsTypeJudge(max_lod, 'max_lod');
	            if (temp > 0) {
	                this._maxLod = temp;
	            } else {
	                this._maxLod = 23;
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, 'TerrainOption', 'max_lod', '> 0', 'none', 23));
	            }
	        },
	        get: function get() {
	            return this._maxLod;
	        }

	        /**
	         * 数据源显示的最低层级，即比这个层级更小的层级数据不会再显示.
	         * @param firstLod {number}
	         */

	    }, {
	        key: 'firstLod',
	        set: function set(first_lod) {
	            var temp = this._propsTypeJudge(first_lod, 'first_lod');
	            if (temp >= 0) {
	                this._firstLod = temp;
	            } else {
	                this._firstLod = 0;
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, 'TerrainOption', 'first_lod', '>= 0', 'none', 0));
	            }
	        },
	        get: function get() {
	            return this._firstLod;
	        }

	        /**
	         * 地形块的尺寸大小，每个地形块大小是tile_size * tile_size.
	         * @param tileSize {number}
	         */

	    }, {
	        key: 'tileSize',
	        set: function set(tile_size) {
	            var temp = this._propsTypeJudge(tile_size, 'tile_size');
	            if (temp > 1) {
	                this._tileSize = parseInt(temp, 10);
	            } else {
	                this._tileSize = 17;
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, 'TerrainOption', 'tile_size', ' 大于1的整数 ', 'none', 17));
	            }
	        },
	        get: function get() {
	            return this._tileSize;
	        }

	        /**
	         * 瓦片数据的采样率，通过设定不同的采样率以得到不同精细程度的地形瓦片，默认是1.0
	         * @param sampleRatio {number}
	         */

	    }, {
	        key: 'sampleRatio',
	        set: function set(sample_ratio) {
	            var temp = this._propsTypeJudge(sample_ratio, 'sample_ratio');
	            if (temp >= 0) {
	                this._sampleRatio = temp;
	            } else {
	                this._sampleRatio = 1.0;
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, 'TerrainOption', 'sample_ratio', '> 0', 'none', 1.0));
	            }
	        },
	        get: function get() {
	            return this._sampleRatio;
	        }

	        /**
	         * 地形瓦片边缘率，瓦片之间绘制边缘以防止不同的瓦片之间出现缝隙。值太小，在不同瓦片之间可能会出现缝隙，如果太大，可能会造成不必要的渲染而影响系统的渲染性能，对于高度变化比较大的地形或者 是做了高程夸张的地形可以尽量将该值设的大一些，以免出现缝隙，默认0.02
	         * @param skirtRatio {number}
	         */

	    }, {
	        key: 'skirtRatio',
	        set: function set(skirt_ratio) {
	            var temp = this._propsTypeJudge(skirt_ratio, 'skirt_ratio');
	            if (temp > 0 && temp < 0.2) {
	                this._skirtRatio = temp;
	            } else {
	                this._skirtRatio = 0.01;
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, 'TerrainOption', 'skirt_ratio', ' (0, 0.2) ', 'none', 0.01));
	            }
	        },
	        get: function get() {
	            return this._skirtRatio;
	        }

	        /**
	         * 高程夸张系数，默认是1.0，也就是正常渲染高程的真实高度
	         * @param verticalScale {number}
	         */

	    }, {
	        key: 'verticalScale',
	        set: function set(vertical_scale) {
	            var temp = this._propsTypeJudge(vertical_scale, 'vertical_scale');
	            if (temp > 0) {
	                this._verticalScale = temp;
	            } else {
	                this._verticalScale = 1;
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE, 'TerrainOption', 'vertical_scale', ' 大于0 ', 'none', 1));
	            }
	            this._updateProperty('vertical_scale', this._verticalScale);
	        },
	        get: function get() {
	            return this._verticalScale;
	        }

	        /**
	         * 边缘缓冲率，就是地形瓦片的延展率，比如将地形做镶嵌或者重投影时为了能够准确覆盖到所有的瓦片数据需要将瓦片范围进行适当的放宽，如果设定0.2，放宽的倍数就是1.02
	         * @param edgeBufferRatio {number}
	         */

	    }, {
	        key: 'edgeBufferRatio',
	        set: function set(edge_buffer_ratio) {
	            this._edgeBufferRatio = edge_buffer_ratio;
	        },
	        get: function get() {
	            return this._edgeBufferRatio;
	        }

	        /**
	         * 是否采用增量模式。开启这个状态，影像数据图层发生更改时，不需要全局刷新，只刷新当前显示的区域，能提高刷新速度，默认为关闭状态
	         * @param incrementalUpdate {boolean}
	         */

	    }, {
	        key: 'incrementalUpdate',
	        set: function set(incremental_update) {
	            this._incrementalUpdate = incremental_update;
	        },
	        get: function get() {
	            return this._incrementalUpdate;
	        }

	        /**
	         * 地形块边缘计算法线，在光照效果下使得块之间的过度看起来比较平滑
	         * @param normalizeEdges {boolean}
	         */

	    }, {
	        key: 'normalizeEdges',
	        set: function set(normalize_edges) {
	            this._normalizeEdges = normalize_edges;
	        },
	        get: function get() {
	            return this._normalizeEdges;
	        }

	        /**
	         * 地形平滑，不同地形高度之间平滑过渡，但是导致了地形高度不准确，默认值是false
	         * @param elevationSmoothing {boolean}
	         */

	    }, {
	        key: 'elevationSmoothing',
	        set: function set(elevation_smoothing) {
	            this._elevationSmoothing = elevation_smoothing;
	        },
	        get: function get() {
	            return this._elevationSmoothing;
	        }

	        /**
	         * range的计算模式
	         * @param rangeMode {enum}
	         */

	    }, {
	        key: 'rangeMode',
	        set: function set(range_mode) {
	            this._rangeMode = range_mode;
	        },
	        get: function get() {
	            return this._rangeMode;
	        }

	        /**
	         * 影像块近视角纹理重采样算法
	         * @param  magFilter {enum}
	         */

	    }, {
	        key: 'magFilter',
	        set: function set(mag_filter) {
	            this._magFilter = mag_filter;
	        },
	        get: function get() {
	            return this._magFilter;
	        }
	        /**
	         * 影像块远视角纹理重采样算法
	         * @param minFilter {enum}
	         */

	    }, {
	        key: 'minFilter',
	        set: function set(min_filter) {
	            this._minFilter = min_filter;
	        },
	        get: function get() {
	            return this._minFilter;
	        }

	        /**
	         * 集群剔除，设为true似于把像机放在地下
	         */

	    }, {
	        key: 'clusterCulling',
	        set: function set(cluster_culling) {
	            this._clusterCulling = cluster_culling;
	        },
	        get: function get() {
	            return this._clusterCulling;
	        }

	        /**
	         * 墨卡托快速路径允许渲染器显示墨卡托投影图像，而不需要重新投影。可以通过将此设置为false来禁用此技术(并允许重新投影)
	         * @param mercatorFastPath {boolean}
	         */

	    }, {
	        key: 'mercatorFastPath',
	        set: function set(mercator_fast_path) {
	            this._mercatorFastPath = mercator_fast_path;
	        },
	        get: function get() {
	            return this._mercatorFastPath;
	        }

	        /**
	         * 将此设置为true，就可使地球的部分透明。这对于看到地下物体很方便
	         * @param blending {boolean}
	         */

	    }, {
	        key: 'blending',
	        set: function set(blending) {
	            this._blending = blending;
	        },
	        get: function get() {
	            return this._blending;
	        }

	        /**
	         * 是否要生成和使用正常的地图来代替几何法线。普通地图使用照明来创造高分辨率地形，而不是用三角形来表示。默认是引擎附件
	         * @param normalMaps {boolean}
	         */

	    }, {
	        key: 'normalMaps',
	        set: function set(normal_maps) {
	            this._normalMaps = normal_maps;
	        },
	        get: function get() {
	            return this._normalMaps;
	        }

	        /**
	         * 地形瓦的框架的数量。默认= 0
	         * @param minExpiryFrames {number}
	         */

	    }, {
	        key: 'minExpiryFrames',
	        set: function set(min_expiry_frames) {
	            this._minExpiryFrames = min_expiry_frames;
	        },
	        get: function get() {
	            return this._minExpiryFrames;
	        }

	        /**
	         * 一个地形瓷砖还没有被挑选出来的秒数可以被考虑到过期。默认= 0
	         * @param minExpiryTime {number}
	         */

	    }, {
	        key: 'minExpiryTime',
	        set: function set(min_expiry_time) {
	            this._minExpiryTime = min_expiry_time;
	        },
	        get: function get() {
	            return this._minExpiryTime;
	        }
	    }]);

	    return TerrainOption;
	}(_Option3.default);

	exports.default = TerrainOption;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "TerrainOption.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * 文件：SkyOption.js
	 * 作者：李强
	 * 部门：产品研发中心
	 * 邮箱：liq@geovis.com
	 * 日期：2017-10-13 21:10:22.
	 * 用途：天空特效配置类
	 */
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Option2 = __webpack_require__(20);

	var _Option3 = _interopRequireDefault(_Option2);

	var _CloudOption = __webpack_require__(112);

	var _CloudOption2 = _interopRequireDefault(_CloudOption);

	var _Util = __webpack_require__(6);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module mapOptions
	 * @namespace GV
	 */
	var SkyOption = function (_Option) {
	    _inherits(SkyOption, _Option);

	    function SkyOption(options, parent) {
	        _classCallCheck(this, SkyOption);

	        var _this = _possibleConstructorReturn(this, (SkyOption.__proto__ || Object.getPrototypeOf(SkyOption)).call(this, options, parent));

	        if (options) {
	            _this._cloud = new _CloudOption2.default(options.cloud, parent);
	        }
	        return _this;
	    }

	    _createClass(SkyOption, [{
	        key: '_updateOptionProperty',
	        value: function _updateOptionProperty(property, options) {
	            var obj = {};
	            obj.sky = {};
	            obj.sky[property] = options;
	            _get(SkyOption.prototype.__proto__ || Object.getPrototypeOf(SkyOption.prototype), '_updateOptionProperty', this).call(this, obj);
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            _get(SkyOption.prototype.__proto__ || Object.getPrototypeOf(SkyOption.prototype), '_updateOptionProperty', this).call(this, {
	                sky: {
	                    visible: this.visible,
	                    lighting: this.lighting,
	                    // cloud_visible: this.cloudVisible,
	                    // cloud_type: this.cloudType,
	                    // cloud_height: this.cloudHeight,
	                    cloud_visible: this.cloud.visible,
	                    cloud_type: this.cloud.type,
	                    cloud_height: this.cloud.height,
	                    rain_level: this.rain,
	                    sleet_level: this.sleet,
	                    snow_level: this.snow
	                }
	            });
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var props = _get(SkyOption.prototype.__proto__ || Object.getPrototypeOf(SkyOption.prototype), 'toXml', this).call(this);
	            return props === '' ? '' : '<sky>' + props + '</sky>';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var json = _get(SkyOption.prototype.__proto__ || Object.getPrototypeOf(SkyOption.prototype), 'toJson', this).call(this);
	            return { sky: json };
	        }
	    }, {
	        key: 'visible',
	        set: function set(visible) {
	            if ((0, _Util.isTrueOrFalse)(visible)) {
	                var tempVisible = (0, _Util.toBooleanTrueOrFlse)(visible);
	                if (tempVisible !== undefined) {
	                    if (tempVisible === this._visible) return;
	                    this._visible = tempVisible;
	                    this._updateOptionProperty('visible', tempVisible);
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'SkyOption', 'visible', 'Boolean'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'SkyOption', 'visible', 'Boolean'));
	            }
	        },
	        get: function get() {
	            return this._visible === undefined ? false : this._visible;
	        }
	    }, {
	        key: 'lighting',
	        set: function set(lighting) {
	            if ((0, _Util.isTrueOrFalse)(lighting)) {
	                if (lighting === this._lighting) return;
	                this._lighting = lighting;
	                this._updateOptionProperty('lighting', lighting);
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'SkyOption', 'lighting', 'Boolean'));
	            }
	        },
	        get: function get() {
	            return this._lighting === undefined ? false : this._lighting;
	        }
	    }, {
	        key: 'cloud',
	        get: function get() {
	            if (this._cloud === undefined) {
	                this._cloud = new _CloudOption2.default({}, this._parent);
	            }
	            return this._cloud;
	        }
	    }, {
	        key: 'rain',
	        set: function set(rain) {
	            if ((0, _Util.isStrNumber)(rain)) {
	                if (rain === this._rain) return;
	                this._rain = rain;
	                this._updateOptionProperty('rain_level', rain);
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'SkyOption', 'rain', 'Number'));
	            }
	        },
	        get: function get() {
	            return this._rain === undefined ? 0 : this._rain;
	        }
	    }, {
	        key: 'snow',
	        set: function set(snow) {
	            if ((0, _Util.isStrNumber)(snow)) {
	                if (snow === this._snow) return;
	                this._snow = snow;
	                this._updateOptionProperty('snow_level', snow);
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'SkyOption', 'snow', 'Number'));
	            }
	        },
	        get: function get() {
	            return this._snow === undefined ? 0 : this._snow;
	        }
	    }, {
	        key: 'sleet',
	        set: function set(sleet) {
	            if ((0, _Util.isStrNumber)(sleet)) {
	                if (sleet === this._sleet) return;
	                this._sleet = sleet;
	                this._updateOptionProperty('sleet_level', sleet);
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'SkyOption', 'sleet', 'Number'));
	            }
	        },
	        get: function get() {
	            return this._sleet === undefined ? 0 : this._sleet;
	        }
	    }]);

	    return SkyOption;
	}(_Option3.default);

	exports.default = SkyOption;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "SkyOption.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * CloudOption.js
	 * 作者：李强
	 * 部门：产品研发中心
	 * 邮箱：liq@geovis.com
	 * 日期：2017-10-13 21:10:22.
	 * 用途：天空特效的云配置类
	 */
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Option2 = __webpack_require__(20);

	var _Option3 = _interopRequireDefault(_Option2);

	var _Util = __webpack_require__(6);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module CloudOption
	 * @namespace GV
	 */
	var CloudOption = function (_Option) {
	    _inherits(CloudOption, _Option);

	    function CloudOption() {
	        _classCallCheck(this, CloudOption);

	        return _possibleConstructorReturn(this, (CloudOption.__proto__ || Object.getPrototypeOf(CloudOption)).apply(this, arguments));
	    }

	    _createClass(CloudOption, [{
	        key: '_updateOptionProperty',
	        value: function _updateOptionProperty(property, options) {
	            var obj = {};
	            obj.sky = {};
	            obj.sky[property] = options;
	            _get(CloudOption.prototype.__proto__ || Object.getPrototypeOf(CloudOption.prototype), '_updateOptionProperty', this).call(this, obj);
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var props = _get(CloudOption.prototype.__proto__ || Object.getPrototypeOf(CloudOption.prototype), 'toXml', this).call(this);
	            return props === '' ? '' : '<cloud>' + props + '</cloud>';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var json = _get(CloudOption.prototype.__proto__ || Object.getPrototypeOf(CloudOption.prototype), 'toJson', this).call(this);
	            return { cloud: json };
	        }
	    }, {
	        key: 'visible',
	        set: function set(visible) {
	            if ((0, _Util.isTrueOrFalse)(visible)) {
	                var tempVisible = (0, _Util.toBooleanTrueOrFlse)(visible);
	                if (tempVisible !== undefined) {
	                    if (tempVisible === this._visible) return;
	                    this._visible = tempVisible;
	                    this._updateOptionProperty('cloud_visible', tempVisible);
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'CloudOption', 'visible', 'Boolean'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'CloudOption', 'visible', 'Boolean'));
	            }
	        },
	        get: function get() {
	            return this._visible === undefined ? false : this._visible;
	        }
	    }, {
	        key: 'type',
	        set: function set(type) {
	            if ((0, _Util.isStrNumber)(type)) {
	                if (type === this._type) return;
	                this._type = type;
	                this._updateOptionProperty('cloud_type', type);
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'CloudOption', 'type', 'Number'));
	            }
	        },
	        get: function get() {
	            return this._type === undefined ? 4 : this._type;
	        }
	    }, {
	        key: 'height',
	        set: function set(height) {
	            if ((0, _Util.isStrNumber)(height)) {
	                height = parseFloat(height);
	                if (height < 20000) {
	                    if (height === this._height) return;
	                    this._height = height;
	                    this._updateOptionProperty('cloud_height', height);
	                } else {
	                    console.warn('云高度不能大于20000米');
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'CloudOption', 'cloud_height', 'Number'));
	            }
	        },
	        get: function get() {
	            return this._height === undefined ? 2000 : this._height;
	        }
	    }]);

	    return CloudOption;
	}(_Option3.default);

	exports.default = CloudOption;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "CloudOption.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * 文件：OceanOption.js
	 * 作者：李强
	 * 部门：产品研发中心
	 * 邮箱：liq@geovis.com
	 * 日期：2017-10-17 14:30:00.
	 * 用途：海水特效配置类
	 */
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Option2 = __webpack_require__(20);

	var _Option3 = _interopRequireDefault(_Option2);

	var _Util = __webpack_require__(6);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module mapOptions
	 * @namespace GV
	 */
	var OceanOption = function (_Option) {
	    _inherits(OceanOption, _Option);

	    function OceanOption() {
	        _classCallCheck(this, OceanOption);

	        return _possibleConstructorReturn(this, (OceanOption.__proto__ || Object.getPrototypeOf(OceanOption)).apply(this, arguments));
	    }

	    _createClass(OceanOption, [{
	        key: '_updateOptionProperty',
	        value: function _updateOptionProperty(property, options) {
	            var obj = {};
	            obj.ocean = {};
	            obj.ocean[property] = options;
	            _get(OceanOption.prototype.__proto__ || Object.getPrototypeOf(OceanOption.prototype), '_updateOptionProperty', this).call(this, obj);
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            _get(OceanOption.prototype.__proto__ || Object.getPrototypeOf(OceanOption.prototype), '_updateOptionProperty', this).call(this, {
	                ocean: {
	                    visible: this.visible,
	                    wave_size: this.waveSize
	                }
	            });
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var props = _get(OceanOption.prototype.__proto__ || Object.getPrototypeOf(OceanOption.prototype), 'toXml', this).call(this);
	            return props === '' ? '' : '<ocean>' + props + '</ocean>';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var json = _get(OceanOption.prototype.__proto__ || Object.getPrototypeOf(OceanOption.prototype), 'toJson', this).call(this);
	            return { ocean: json };
	        }
	    }, {
	        key: 'visible',
	        set: function set(visible) {
	            if ((0, _Util.isTrueOrFalse)(visible)) {
	                var tempVisible = (0, _Util.toBooleanTrueOrFlse)(visible);
	                if (tempVisible !== undefined) {
	                    if (tempVisible === this._visible) return;
	                    this._visible = tempVisible;
	                    this._updateOptionProperty('visible', tempVisible);
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'OceanOption', 'visible', 'Boolean'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'OceanOption', 'visible', 'Boolean'));
	            }
	        },
	        get: function get() {
	            return this._visible === undefined ? false : this._visible;
	        }
	    }, {
	        key: 'waveSize',
	        set: function set(size) {
	            if ((0, _Util.isStrNumber)(size)) {
	                size = parseFloat(size);
	                if (size < 0 || size > 3) {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONEDEFAULT, 'OceanOption', 'waveSize', '[0, 3]'));
	                } else {
	                    if (size === this._waveSize) return;
	                    this._waveSize = size;
	                    this._updateOptionProperty('wave_size', size);
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'OceanOption', 'waveSize', 'Number'));
	            }
	        },
	        get: function get() {
	            return this._waveSize === undefined ? 3 : this._waveSize;
	        }
	    }]);

	    return OceanOption;
	}(_Option3.default);

	exports.default = OceanOption;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "OceanOption.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * 文件：SkyOption.js
	 * 作者：李强
	 * 部门：产品研发中心
	 * 邮箱：liq@geovis.com
	 * 日期：2017-12-06 16:42:00.
	 * 用途：风效配置类，会影响海浪和云的运动和运动方向
	 */
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Option2 = __webpack_require__(20);

	var _Option3 = _interopRequireDefault(_Option2);

	var _Util = __webpack_require__(6);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module mapOptions
	 * @namespace GV
	 */
	var WindOption = function (_Option) {
	    _inherits(WindOption, _Option);

	    function WindOption() {
	        _classCallCheck(this, WindOption);

	        return _possibleConstructorReturn(this, (WindOption.__proto__ || Object.getPrototypeOf(WindOption)).apply(this, arguments));
	    }

	    _createClass(WindOption, [{
	        key: '_updateOptionProperty',
	        value: function _updateOptionProperty(property, options) {
	            var obj = {};
	            obj.wind = {};
	            obj.wind[property] = options;
	            _get(WindOption.prototype.__proto__ || Object.getPrototypeOf(WindOption.prototype), '_updateOptionProperty', this).call(this, obj);
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            _get(WindOption.prototype.__proto__ || Object.getPrototypeOf(WindOption.prototype), '_updateOptionProperty', this).call(this, {
	                wind: {
	                    wind_level: this.level,
	                    wind_direction: this.direction
	                }
	            });
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var props = _get(WindOption.prototype.__proto__ || Object.getPrototypeOf(WindOption.prototype), 'toXml', this).call(this);
	            return props === '' ? '' : '<wind>' + props + '</wind>';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var json = _get(WindOption.prototype.__proto__ || Object.getPrototypeOf(WindOption.prototype), 'toJson', this).call(this);
	            return { wind: json };
	        }
	    }, {
	        key: 'level',
	        set: function set(level) {
	            if ((0, _Util.isStrNumber)(level)) {
	                level = parseFloat(level);
	                if (level < 0 || level > 17) {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_RANGE_NONE, 'WindOption', 'level', '[0, 17]', this.level));
	                } else {
	                    if (level === this._level) return;
	                    this._level = level;
	                    this._updateOptionProperty('wind_level', level);
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'WindOption', 'level', 'Number'));
	            }
	        },
	        get: function get() {
	            return this._level === undefined ? 3 : this._level;
	        }
	    }, {
	        key: 'direction',
	        set: function set(direction) {
	            if ((0, _Util.isStrNumber)(direction)) {
	                if (direction === this._direction) return;
	                this._direction = direction;
	                this._updateOptionProperty('wind_direction', direction);
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'WindOption', 'direction', 'Number'));
	            }
	        },
	        get: function get() {
	            return this._direction || 0;
	        }
	    }]);

	    return WindOption;
	}(_Option3.default);

	exports.default = WindOption;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "WindOption.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * 文件：GraticuleOption.js
	 * 作者：李强
	 * 部门：产品研发中心
	 * 邮箱：liq@geovis.com
	 * 日期：2017-12-19 17:22:00.
	 * 用途：经纬网配置类
	 */
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Option2 = __webpack_require__(20);

	var _Option3 = _interopRequireDefault(_Option2);

	var _Util = __webpack_require__(6);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module mapOptions
	 * @namespace GV
	 */
	var GraticuleOption = function (_Option) {
	    _inherits(GraticuleOption, _Option);

	    function GraticuleOption() {
	        _classCallCheck(this, GraticuleOption);

	        return _possibleConstructorReturn(this, (GraticuleOption.__proto__ || Object.getPrototypeOf(GraticuleOption)).apply(this, arguments));
	    }

	    _createClass(GraticuleOption, [{
	        key: '_updateOptionProperty',
	        value: function _updateOptionProperty(property, options) {
	            var obj = {};
	            obj.graticule = {};
	            obj.graticule[property] = options;
	            _get(GraticuleOption.prototype.__proto__ || Object.getPrototypeOf(GraticuleOption.prototype), '_updateOptionProperty', this).call(this, obj);
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            _get(GraticuleOption.prototype.__proto__ || Object.getPrototypeOf(GraticuleOption.prototype), '_updateOptionProperty', this).call(this, {
	                graticule: {
	                    visible: this._visible
	                }
	            });
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var props = _get(GraticuleOption.prototype.__proto__ || Object.getPrototypeOf(GraticuleOption.prototype), 'toXml', this).call(this);
	            return props === '' ? '' : '<graticule>' + props + '</graticule>';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var json = _get(GraticuleOption.prototype.__proto__ || Object.getPrototypeOf(GraticuleOption.prototype), 'toJson', this).call(this);
	            return { graticule: json };
	        }
	    }, {
	        key: 'visible',
	        set: function set(visible) {
	            if ((0, _Util.isTrueOrFalse)(visible)) {
	                var tempVisible = (0, _Util.toBooleanTrueOrFlse)(visible);
	                if (tempVisible !== undefined) {
	                    if (tempVisible === this._visible) return;
	                    this._visible = tempVisible;
	                    this._updateOptionProperty('visible', tempVisible);
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'GraticuleOption', 'visible', 'Boolean'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'GraticuleOption', 'visible', 'Boolean'));
	            }
	        },
	        get: function get() {
	            return this._visible === undefined ? false : this._visible;
	        }
	    }]);

	    return GraticuleOption;
	}(_Option3.default);

	exports.default = GraticuleOption;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "GraticuleOption.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * GridOption.js
	 * 作者：李强
	 * 部门：产品研发中心
	 * 邮箱：liq@geovis.com
	 * 日期：2017-12-20 15:46:00.
	 * 用途：网格配置类
	 */
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Option2 = __webpack_require__(20);

	var _Option3 = _interopRequireDefault(_Option2);

	var _Util = __webpack_require__(6);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module mapOptions
	 * @namespace GV
	 */
	var GridOption = function (_Option) {
	    _inherits(GridOption, _Option);

	    function GridOption() {
	        _classCallCheck(this, GridOption);

	        return _possibleConstructorReturn(this, (GridOption.__proto__ || Object.getPrototypeOf(GridOption)).apply(this, arguments));
	    }

	    _createClass(GridOption, [{
	        key: '_updateOptionProperty',
	        value: function _updateOptionProperty(property, options) {
	            var obj = {};
	            obj.grid = {};
	            obj.grid[property] = options;
	            _get(GridOption.prototype.__proto__ || Object.getPrototypeOf(GridOption.prototype), '_updateOptionProperty', this).call(this, obj);
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            _get(GridOption.prototype.__proto__ || Object.getPrototypeOf(GridOption.prototype), '_updateOptionProperty', this).call(this, {
	                grid: {
	                    visible: this._visible
	                }
	            });
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var props = _get(GridOption.prototype.__proto__ || Object.getPrototypeOf(GridOption.prototype), 'toXml', this).call(this);
	            return props === '' ? '' : '<grid>' + props + '</grid>';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var json = _get(GridOption.prototype.__proto__ || Object.getPrototypeOf(GridOption.prototype), 'toJson', this).call(this);
	            return { grid: json };
	        }
	    }, {
	        key: 'visible',
	        set: function set(visible) {
	            if ((0, _Util.isTrueOrFalse)(visible)) {
	                var tempVisible = (0, _Util.toBooleanTrueOrFlse)(visible);
	                if (tempVisible !== undefined) {
	                    if (tempVisible === this._visible) return;
	                    this._visible = tempVisible;
	                    this._updateOptionProperty('visible', tempVisible);
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'GridOption', 'visible', 'Boolean'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'GridOption', 'visible', 'Boolean'));
	            }
	        },
	        get: function get() {
	            return this._visible === undefined ? false : this._visible;
	        }
	    }]);

	    return GridOption;
	}(_Option3.default);

	exports.default = GridOption;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "GridOption.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * 文件：GalaxyG2000.js
	 * 作者：lvs
	 * 部门：产品研发中心
	 * 邮箱：lvs@geovis.com
	 * 日期：2018-1-10 21:10:22.
	 * 用途：星空配置类
	 */
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Option2 = __webpack_require__(20);

	var _Option3 = _interopRequireDefault(_Option2);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module mapOptions
	 * @namespace GV
	 */
	var GalaxyG2000 = function (_Option) {
	    _inherits(GalaxyG2000, _Option);

	    function GalaxyG2000() {
	        _classCallCheck(this, GalaxyG2000);

	        return _possibleConstructorReturn(this, (GalaxyG2000.__proto__ || Object.getPrototypeOf(GalaxyG2000)).apply(this, arguments));
	    }

	    _createClass(GalaxyG2000, [{
	        key: '_updateOptionProperty',
	        value: function _updateOptionProperty(property, options) {
	            var obj = {};
	            obj.j2000 = {};
	            obj.j2000[property] = options;
	            _get(GalaxyG2000.prototype.__proto__ || Object.getPrototypeOf(GalaxyG2000.prototype), '_updateOptionProperty', this).call(this, obj);
	        }
	    }, {
	        key: 'init',
	        value: function init() {
	            _get(GalaxyG2000.prototype.__proto__ || Object.getPrototypeOf(GalaxyG2000.prototype), '_updateOptionProperty', this).call(this, {
	                j2000: {
	                    enable: this.enable,
	                    showDiagrams: this.showDiagrams,
	                    orbit: this.orbit,
	                    goTo: this.goTo,
	                    timeScale: this.timeScale
	                }
	            });
	        }

	        /**
	         * 是否开启j2000坐标系(初始化设置一次，后面只读)
	         * @property enable
	         * @type {Boolean}
	         */

	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var props = _get(GalaxyG2000.prototype.__proto__ || Object.getPrototypeOf(GalaxyG2000.prototype), 'toXml', this).call(this);
	            return props === '' ? '' : '<j2000>' + props + '</j2000>';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var json = _get(GalaxyG2000.prototype.__proto__ || Object.getPrototypeOf(GalaxyG2000.prototype), 'toJson', this).call(this);
	            return { j2000: json };
	        }
	    }, {
	        key: 'enable',
	        set: function set(value) {
	            if (this._enable !== undefined) return;
	            if (Util.isTrueOrFalse(value)) {
	                this._enable = Util.toBooleanTrueOrFlse(value);
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'GalaxyG2000', 'astroEnable', 'Boolean'));
	            }
	        },
	        get: function get() {
	            return this._enable === undefined ? false : true;
	        }

	        /**
	         * 是否开启太空碎片
	         * @property spaceDebris
	         * @type {Boolean}
	         */

	    }, {
	        key: 'spaceDebris',
	        set: function set(value) {
	            if (Util.isTrueOrFalse(value)) {
	                var temp = Util.toBooleanTrueOrFlse(value);
	                if (temp !== undefined) {
	                    if (this._spaceDebris === undefined) this._spaceDebris = temp;else if (temp !== this._spaceDebris) {
	                        this._spaceDebris = temp;
	                        this._updateOptionProperty('space_debris', temp);
	                    } else return;
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'GalaxyG2000', 'spaceDebris', 'Boolean'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'GalaxyG2000', 'spaceDebris', 'Boolean'));
	            }
	        },
	        get: function get() {
	            return this._spaceDebris === undefined ? '' : this._spaceDebris;
	        }

	        /**
	         * 是否开启星图
	         * @property astroConstellation
	         * @type {Boolean}
	         */

	    }, {
	        key: 'showDiagrams',
	        set: function set(value) {
	            if (Util.isTrueOrFalse(value)) {
	                var temp = Util.toBooleanTrueOrFlse(value);
	                if (temp !== undefined) {
	                    if (this._showDiagrams === undefined) this._showDiagrams = temp;else if (temp !== this._showDiagrams) {
	                        this._showDiagrams = temp;
	                        this._updateOptionProperty('show_diagrams', temp);
	                    } else return;
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'GalaxyG2000', 'showDiagrams', 'Boolean'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'GalaxyG2000', 'showDiagrams', 'Boolean'));
	            }
	        },
	        get: function get() {
	            return this._showDiagrams === undefined ? '' : this._showDiagrams;
	        }

	        /**
	         * 是否开启天体轨迹线
	         * @property astroPath
	         * @type {Boolean}
	         */

	    }, {
	        key: 'orbit',
	        set: function set(value) {
	            if (Util.isTrueOrFalse(value)) {
	                var temp = Util.toBooleanTrueOrFlse(value);
	                if (temp !== undefined) {
	                    if (this._orbit === undefined) this._orbit = temp;else if (temp !== this._orbit) {
	                        this._orbit = temp;
	                        this._updateOptionProperty('orbit', temp);
	                    } else return;
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'GalaxyG2000', 'orbit', 'Boolean'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'GalaxyG2000', 'orbit', 'Boolean'));
	            }
	        },
	        get: function get() {
	            return this._orbit === undefined ? '' : this._orbit;
	        }

	        /**
	         * 当前星体
	         * @property astrObject
	         * @type {String}
	         */

	    }, {
	        key: 'goTo',
	        set: function set(value) {
	            if (Util.isString(value)) {
	                if (!this._goTo) this._goTo = value;else if (this._goTo !== value) {
	                    this._goTo = value;
	                    this._updateOptionProperty('go_to', value);
	                } else return;
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'GalaxyG2000', 'goTo', 'String'));
	            }
	        },
	        get: function get() {
	            return this._goTo === undefined ? '' : this._goTo;
	        }

	        /**
	         * 星体旋转
	         * @property astroRotation
	         * @type {Boolean}
	         */

	    }, {
	        key: 'timeScale',
	        set: function set(value) {
	            if (Util.isNumber(value) || Util.isStrNumber(value)) {
	                if (value < 10 && value > 0) {
	                    if (!this._timeScale) this._timeScale = value;else if (this._timeScale !== value) {
	                        this._timeScale = value;
	                        this._updateOptionProperty('time_scale', value);
	                    } else return;
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CUSTOM, 'GalaxyG2000', 'timeScale范围为(0, 10)'));
	                }
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_PARAMS_NONE, 'GalaxyG2000', 'timeScale', 'Number'));
	            }
	        },
	        get: function get() {
	            return this._timeScale === undefined ? '' : this._timeScale;
	        }
	    }]);

	    return GalaxyG2000;
	}(_Option3.default);

	exports.default = GalaxyG2000;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "GalaxyG2000.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * 文件：Option.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com
	 * 日期：2017-12-03 21:00:15.
	 * 用途：环境配置基类
	 */

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	var _Exception = __webpack_require__(35);

	var _Exception2 = _interopRequireDefault(_Exception);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Clock = function (_Class) {
	    _inherits(Clock, _Class);

	    function Clock(map, params) {
	        _classCallCheck(this, Clock);

	        var _this = _possibleConstructorReturn(this, (Clock.__proto__ || Object.getPrototypeOf(Clock)).call(this, params));

	        _this.setMap(map);
	        _this.setClock(params);
	        _this._callBackFuns = new Map();
	        return _this;
	    }

	    /**
	     * 时间运行开始
	     * @param none
	     */

	    _createClass(Clock, [{
	        key: 'startClock',
	        value: function startClock() {
	            this.postMessage(_MessageSet2.default.Clock.post.startClock);
	        }

	        /**
	         * 时间运行暂停
	         * @param none
	         */

	    }, {
	        key: 'pauseClock',
	        value: function pauseClock() {
	            this.postMessage(_MessageSet2.default.Clock.post.pauseClock);
	        }

	        /**
	         * 时间加速运行
	         * @param value
	         * @type Number
	         */

	    }, {
	        key: 'speedClock',
	        value: function speedClock(para) {
	            if (Util.isStrNumber(para)) this.postMessage(_MessageSet2.default.Clock.post.speedClock, { speed: para });else console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CUSTOM, 'speedClock(para)', '参数须为Number类型!'));
	        }

	        /**
	         * 重置时间(如在对时间加速1000倍后，可重置为正常运行的时间)
	         * @param none
	         */

	    }, {
	        key: 'resetClock',
	        value: function resetClock() {
	            this.postMessage(_MessageSet2.default.Clock.post.resetClock);
	        }

	        /**
	         * @method setClock 设置时间发送消息
	         * @param {object|string} options 
	         */

	    }, {
	        key: 'setClock',
	        value: function setClock(options) {
	            this.postMessage(_MessageSet2.default.Clock.post.setCurrentClock, this._fromString(options));
	        }

	        /**
	         * @method getClock 获取当前时间
	         * @param {object|string} options 
	         */

	    }, {
	        key: 'getClock',
	        value: function getClock(fun, type) {
	            if (Util.$.isFunction(fun)) {
	                // if (!this._getClockFun) this._getClockFun = new Map();
	                var id = Util.createGuid();
	                this._callBackFuns.set(id, fun);
	                this._callBackFuns.set('type', type);
	                this.postMessage(_MessageSet2.default.Clock.post.getCurrentClock, { id: id });
	            } else {
	                console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CUSTOM, 'getClock(fun, type)', 'fun为回调函数; type可选，为string或object,默认"string"'));
	            }
	        }

	        /*
	         * 获取当前时间，输出C++返回的时间消息，如果未设置，则返回程序统一时间
	         */

	    }, {
	        key: '_getClockCallBack',
	        value: function _getClockCallBack(para) {
	            if (!para || !this._callBackFuns) return;
	            var callback = this._callBackFuns.get(para.id);
	            var type = this._callBackFuns.get('type');
	            if (type === 'string') {
	                var content = this._toString(para);
	                callback(content);
	            } else if (type === 'object') {
	                callback(para);
	            }
	            this._callBackFuns.delete(para.id);
	        }
	    }, {
	        key: '_callBack',
	        value: function _callBack(para) {
	            switch (para.para1) {
	                case _MessageSet2.default.Clock.post.getCurrentClock:
	                    this._getClockCallBack(para.para2.get_current_clock);
	                    break;
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: '_fromString',
	        value: function _fromString(str) {
	            if (typeof str === 'string') {
	                var reg = new RegExp(/^\d{4}(-\d{1,2}){2} \d{1,2}(:\d{1,2}){2}$/);
	                if (!reg.test(str)) {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.WARN_CUSTOM, 'setClock(clock)', 'clock参数的字符串形式如"2002-12-3 23:38:18"'));
	                }
	                var clock = {
	                    year: str.slice(0, str.indexOf('-')),
	                    month: str.slice(str.indexOf('-') + 1, str.lastIndexOf('-')),
	                    day: str.slice(str.lastIndexOf('-') + 1, str.indexOf(' ')),
	                    hour: str.slice(str.indexOf(' ') + 1, str.indexOf(':')),
	                    minute: str.slice(str.indexOf(':') + 1, str.lastIndexOf(':')),
	                    second: str.slice(str.lastIndexOf(':') + 1)
	                };
	                return this._timeInital(clock);
	            } else {
	                return this._timeInital(str);
	            }
	        }
	    }, {
	        key: '_timeInital',
	        value: function _timeInital(para) {
	            var date = new Date();
	            var tempClock = {
	                year: date.getFullYear(),
	                month: date.getMonth() + 1,
	                day: date.getDate(),
	                hour: date.getHours(),
	                minute: date.getMinutes(),
	                second: date.getSeconds()
	            };
	            if (Util.isObject(para)) {
	                for (var key in tempClock) {
	                    if (parseInt(para[key])) {
	                        tempClock[key] = para[key];
	                    }
	                }
	            }
	            return tempClock;
	        }
	    }, {
	        key: '_toString',
	        value: function _toString(options) {
	            var str;
	            if (!options || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') return undefined;
	            for (var key in options) {
	                if (options[key] < 10) options[key] = '0' + options[key];
	            }
	            str = options.year + '-' + options.month + '-' + options.day + ' ' + options.hour + ':' + options.minute + ':' + options.second;
	            return str;
	        }
	    }]);

	    return Clock;
	}(_Class3.default);

	exports.default = Clock;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Clock.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	var _ENUM = __webpack_require__(120);

	var _ENUM2 = _interopRequireDefault(_ENUM);

	var _Exception = __webpack_require__(35);

	var _Exception2 = _interopRequireDefault(_Exception);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _Util = __webpack_require__(6);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：PluginManager.js
	   * 作者：巩志远、钱晶
	   * 部门：产品研发中心
	   * 邮箱：gongzy@geovis.com, jqian@mail.ie.ac.cn
	   * 日期：2017-03-03 21:37:02.
	   * 用途：插件管理类
	   */

	var PluginManager = function (_Class) {
	    _inherits(PluginManager, _Class);

	    function PluginManager(earth, initPlugins) {
	        _classCallCheck(this, PluginManager);

	        // 用来存放用户已经定制的插件信息
	        var _this = _possibleConstructorReturn(this, (PluginManager.__proto__ || Object.getPrototypeOf(PluginManager)).call(this));

	        _this._centerPlugins = new Map();
	        // 用来存放用户已经初始化（加载）了的widgets
	        _this._widgets = new Map();
	        // 用来存放用户已经初始化（加载）了的tools
	        _this._tools = new Map();
	        // 用来存放用户当前正在使用的tool
	        _this._currentTool = undefined;
	        _this._earth = earth;
	        if (earth.plugincenter) _this._initCenter(earth.plugincenter);
	        _this._initPlugins(initPlugins);
	        return _this;
	    }

	    /**
	     * 设置当前激活的Tool
	     * @param currentTool 可以string或者object
	     */

	    _createClass(PluginManager, [{
	        key: '_initCenter',

	        /**
	         * 初始化用户已经定制的插件
	         *
	         */
	        value: function _initCenter(url) {
	            if (!url) return; // 说明没有 配置 插件中心
	            var json = (0, _Util.jsonSyncPromise)(url).responseJSON;
	            if (!json) return; // 插件中心获取消息失败
	            // 我这里只会管是否是插件中心以及本地
	            var data = json.results;
	            this._centerPlugins = new Map();
	            for (var i in data) {
	                this._centerPlugins.set(data[i].name, data[i]);
	            }
	            // console.log(data);
	            this._data = data;
	        }

	        /**
	         * 初始化：加载默认插件
	         * @param initPlugins {tool: [{id: ''}...], widget: [{id: ''}...]}
	         */

	    }, {
	        key: '_initPlugins',
	        value: function _initPlugins(initPlugins) {
	            var _this2 = this;

	            var plugins = []; // [{id, type}...]
	            var centers = this._centerPlugins;
	            if (initPlugins.tool && initPlugins.tool.constructor === Array) initPlugins.tool.forEach(function (value) {
	                plugins.push({ id: value.id, type: 'tool' });
	            });else if (initPlugins.tool) plugins.push({ id: initPlugins.tool.id, type: 'tool' });
	            if (initPlugins.widget && initPlugins.widget.constructor === Array) initPlugins.widget.forEach(function (value) {
	                plugins.push({ id: value.id, type: 'widget' });
	            });else if (initPlugins.widget) plugins.push({ id: initPlugins.widget.id, type: 'widget' });
	            plugins.forEach(function (item) {
	                var pluginInfo = centers.get(item.id);
	                if (pluginInfo) {
	                    // 从插件中心获取到该插件
	                    if (item.type !== pluginInfo.type) {
	                        throw new _Exception2.default(_ExceptionMessage2.default.ERROR_PLUGIN_TYPE);
	                    }
	                    _this2.addPlugin(pluginInfo);
	                    if (pluginInfo.type === _ENUM2.default.PLUGINTYPE.WIDGET) _this2.usingWidget(pluginInfo);
	                } else {
	                    // 未能获取该插件
	                    throw new _Exception2.default(item.id + ' : ' + _ExceptionMessage2.default.UNDEFINED_PLUGIN);
	                }
	            });
	        }

	        /**
	         * 添加插件根节点
	         * @param key {string}
	         */

	    }, {
	        key: '_addRootDOM',
	        value: function _addRootDOM(key) {
	            var container = this._earth.container;
	            var isAdded = function isAdded(id) {
	                var children = (0, _Util.$)(container).children();
	                for (var i = 0; i < children.length; i += 1) {
	                    if (children[i].id === id) return true;
	                }
	                return false;
	            };
	            var pid = this._earth.container[0].id + '_of_' + key;
	            if (isAdded(pid) === true) return undefined;
	            var pluginDOM = document.createElement('div');
	            pluginDOM.id = pid;
	            pluginDOM.style.position = 'relative';
	            pluginDOM.style.top = '-100%';
	            // pluginDOM.style.width = '0';
	            pluginDOM.style.height = '0';
	            (0, _Util.$)(container).append(pluginDOM);
	            return pluginDOM;
	        }

	        /**
	         * 删除界面根节点
	         * @param key {string}
	         */

	    }, {
	        key: '_removeRootDOM',
	        value: function _removeRootDOM(key) {
	            var containerID = this._earth.container[0].id;
	            var container = document.getElementById(containerID);
	            var dom = document.getElementById(containerID + '_of_' + key);
	            container.removeChild(dom);
	        }

	        /**
	         * 添加script标签
	         * @param path 路径
	         * @param fileName 插件文件名
	         */

	    }, {
	        key: '_appendScript',
	        value: function _appendScript(plugin, path, fileName) {
	            var container = this._earth.container;
	            // 判断当前url的插件是否被引入
	            var isAppended = function isAppended(name) {
	                var scripts = document.getElementsByTagName('script');
	                for (var i = 0; i < scripts.length; i += 1) {
	                    if (scripts[i].getAttribute('pluginId') === name) return true;
	                }
	                return false;
	            };
	            var script = document.createElement('script');
	            script.setAttribute('pluginId', plugin);
	            if (isAppended(plugin) === false) {
	                var response = _Util.$.ajax({
	                    async: false,
	                    url: '' + path + fileName + '.js',
	                    dataType: 'text'
	                });
	                if (response.readyState === 4 && response.status === 200) {
	                    // $(container).before(script);
	                    document.head.appendChild(script);
	                    script.innerHTML = response.responseText.replace('<br>', '\n');
	                    return fileName;
	                }
	                return undefined;
	            }
	            return fileName;
	        }

	        /**
	         * 移除script标签
	         * @param url 路径
	         */

	    }, {
	        key: '_removeScript',
	        value: function _removeScript(plugin) {
	            // 判断当前url的插件是否被引入
	            var appendedScript = function appendedScript(name) {
	                var scripts = document.getElementsByTagName('script');
	                for (var i = 0; i < scripts.length; i += 1) {
	                    if (scripts[i].getAttribute('pluginId') === name) return scripts[i];
	                }
	                return undefined;
	            };
	            var removeScript = appendedScript(plugin);
	            if (removeScript) document.head.removeChild(removeScript);
	            return this;
	        }

	        /**
	         * 根据名称获取plugin
	         * @return {Plugin}
	         */

	    }, {
	        key: 'getPluginByName',
	        value: function getPluginByName(name) {
	            var realPlugin = void 0;
	            realPlugin = this._widgets.get(name);
	            if (!realPlugin) {
	                realPlugin = this._tools.get(name);
	                if (realPlugin) return realPlugin;
	            }
	            return realPlugin;
	        }

	        /**
	         * 根据名称获取plugin信息
	         * @return {object}
	         */

	    }, {
	        key: 'getPluginInfoByName',
	        value: function getPluginInfoByName(name) {
	            return this._centerPlugins.get(name);
	        }

	        /**
	         * 获取当前所有已经加载的plugins
	         * @param {Array<Plugin>}
	         */

	    }, {
	        key: 'getInstalledPlugins',
	        value: function getInstalledPlugins() {
	            var plugins = [];
	            this._widgets.forEach(function (value) {
	                plugins.push(value);
	            });
	            this._tools.forEach(function (value) {
	                plugins.push(value);
	            });
	            return plugins;
	        }

	        /**
	         * 获取所有的plugins信息
	         * @return {Map}
	         */

	    }, {
	        key: 'getAllPlugins',
	        value: function getAllPlugins() {
	            return this._centerPlugins;
	        }

	        /**
	         * 添加插件
	         * @param plugin {Plugin|string} 即将加载的插件
	         */

	    }, {
	        key: 'addPlugin',
	        value: function addPlugin(plugin) {
	            console.log('addPlugin: ', plugin);
	            if (typeof plugin === 'string') plugin = this._centerPlugins.get(plugin);
	            if (!plugin) {
	                throw new _Exception2.default(_ExceptionMessage2.default.UNDEFINED_PLUGIN, _ExceptionMessage2.default.UNDEFINED_PLUGIN.type);
	            }
	            var realPlugin = void 0;
	            switch (plugin.type) {
	                case _ENUM2.default.PLUGINTYPE.WIDGET:
	                    // 挂件
	                    realPlugin = this._widgets.get(plugin.name);
	                    break;
	                case _ENUM2.default.PLUGINTYPE.TOOL:
	                    // 工具
	                    realPlugin = this._tools.get(plugin.name);
	                    break;
	                default:
	                    throw new _Exception2.default(_ExceptionMessage2.default.UNDEFINED_PLUGIN_TYPE, _ExceptionMessage2.default.UNDEFINED_PLUGIN_TYPE.type);
	            }
	            if (!realPlugin) {
	                // 添加plugin <script pluginid=''>
	                var pluginClass = this._appendScript(plugin.name, plugin.url, plugin.js);
	                if (!pluginClass) {
	                    throw new _Exception2.default(_ExceptionMessage2.default.UNDEFINED_PLUGIN_TYPE, _ExceptionMessage2.default.UNDEFINED_PLUGIN_TYPE.type);
	                }
	                // 添加DOM <div id='pluginDOM_of_plugin'></div>
	                var panel = this._addRootDOM(plugin.name);
	                if (!panel) return undefined;
	                realPlugin = new (eval(pluginClass))({
	                    name: plugin.name,
	                    container: panel,
	                    url: plugin.url,
	                    js: plugin.js,
	                    type: plugin.type,
	                    img: plugin.img,
	                    earth: this._earth,
	                    language: plugin.language
	                });
	                this._add(realPlugin); // Add To Map
	            } else {
	                throw new _Exception2.default(_ExceptionMessage2.default.ADDED_PLUGIN, _ExceptionMessage2.default.ADDED_PLUGIN.type);
	                // return undefined;
	            }
	            return realPlugin;
	        }

	        /**
	         * 移除插件
	         * @param plugin {Plugin|string} 即将卸载的插件
	         */

	    }, {
	        key: 'removePlugin',
	        value: function removePlugin(plugin) {
	            // 根据info从Map中获取plugin
	            var name = void 0;
	            // if (typeof (plugin) === 'string') { // id
	            //     name = plugin;
	            // } else if ($.isPlainObject(plugin)) {
	            //     if (plugin.name) {
	            //         name = plugin.name;
	            //     } else {
	            //         throw new Exception(ExceptionMessage.UNDEFINED_PLUGIN,
	            //             ExceptionMessage.UNDEFINED_PLUGIN.type);
	            //     }
	            // } else {
	            //     throw new Exception(ExceptionMessage.UNDEFINED_PLUGIN,
	            //         ExceptionMessage.UNDEFINED_PLUGIN.type);
	            // }
	            if (plugin) {
	                if (typeof plugin === 'string') {
	                    // id
	                    name = plugin;
	                } else if (plugin.name !== undefined) {
	                    name = plugin.name;
	                } else {
	                    throw new _Exception2.default(_ExceptionMessage2.default.UNDEFINED_PLUGIN, _ExceptionMessage2.default.UNDEFINED_PLUGIN.type);
	                }
	                var realPlugin = this._widgets.get(name);
	                if (!realPlugin) realPlugin = this._tools.get(name);
	                if (realPlugin) {
	                    // 查到即将删除的插件
	                    console.log('remove: ', realPlugin);
	                    this._remove(realPlugin); // remove from map
	                    // this._removeScript(realPlugin.name);  // remove <script>
	                    this._removeRootDOM(realPlugin.name); // remove DOM of pluginContainer
	                } else {
	                    // throw new Exception(`${name} : ${ExceptionMessage.UNDEFINED_PLUGIN}`);
	                    throw new _Exception2.default(_ExceptionMessage2.default.UNDEFINED_PLUGIN, _ExceptionMessage2.default.UNDEFINED_PLUGIN.type);
	                }
	            } else {
	                throw new _Exception2.default(_ExceptionMessage2.default.UNDEFINED_PLUGIN, _ExceptionMessage2.default.UNDEFINED_PLUGIN.type);
	            }
	        }

	        /**
	         * 打开widget
	         * @param widget {Widget|string} 即将使用的挂件
	         */

	    }, {
	        key: 'usingWidget',
	        value: function usingWidget(widget) {
	            if (!widget) return;
	            var name = void 0;
	            if (typeof widget === 'string') {
	                // id
	                name = widget;
	            } else {
	                name = widget.name;
	            }
	            var realWidget = this._widgets.get(name); // 在已经加载了的插件列表里找到了该widget
	            if (realWidget) {
	                if (realWidget.isUsing === false) {
	                    realWidget._init();
	                    realWidget.isUsing = true;
	                } else {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.USING_WIDGET));
	                }
	            } else {
	                // 没有找到
	                realWidget = this.addPlugin(name);
	                if (realWidget) realWidget = this.usingWidget(realWidget);
	            }
	            return realWidget;
	        }

	        /**
	         * 关闭widget
	         * @param widget {Widget|string} 即将弃用的挂件
	         */

	    }, {
	        key: 'unusingWidget',
	        value: function unusingWidget(widget) {
	            if (!widget) return;
	            var name = void 0;
	            if (typeof widget === 'string') {
	                // id
	                name = widget;
	            } else {
	                name = widget.name;
	            }
	            var realWidget = this._widgets.get(name);
	            if (realWidget) {
	                realWidget._remove();
	                realWidget.isUsing = false;
	            }
	        }

	        /**
	         * 设置当前激活Tool
	         * @param tool {Tool} 即将使用的工具
	         */

	    }, {
	        key: '_setCurrentTool',
	        value: function _setCurrentTool(tool) {
	            var name = void 0;

	            if (!tool) {
	                // 如果传入的值是undefined，则关闭currentTool
	                this._turnOffTools();
	                return undefined;
	            }
	            if (typeof tool === 'string') {
	                // id
	                name = tool;
	            } else {
	                name = tool.name;
	            }
	            var realTool = this._tools.get(name);

	            if (realTool) {
	                // 找到该tool
	                if (this._currentTool) {
	                    this._currentTool._remove();
	                    this._currentTool.isCurrentTool = false;
	                }
	                realTool._init();
	            } else {
	                if (this._widgets.get(name)) {
	                    console.warn(warn.WarnException(_ExceptionMessage2.default.IS_WIDGET_NOT_TOOL));
	                    return undefined;
	                }
	                // 在插件列表中没有找到该tool
	                realTool = this.addPlugin(name);
	                if (realTool) realTool = this._setCurrentTool(realTool);
	            }
	            if (realTool) realTool.isCurrentTool = true;
	            return realTool; // currentTool 保持不变
	        }

	        /**
	         * 关闭所有tool
	         */

	    }, {
	        key: '_turnOffTools',
	        value: function _turnOffTools() {
	            if (this._currentTool) {
	                this._currentTool._remove();
	                this._currentTool.isCurrentTool = false;
	            }

	            this._currentTool = undefined;
	        }

	        /**
	         * 加载插件实现
	         * @param plugin
	         */

	    }, {
	        key: '_add',
	        value: function _add(plugin) {
	            if (!plugin) return;
	            switch (plugin.type) {
	                case _ENUM2.default.PLUGINTYPE.WIDGET:
	                    // 挂件
	                    this._addToMap(plugin, this._widgets);
	                    break;
	                case _ENUM2.default.PLUGINTYPE.TOOL:
	                    // 工具
	                    this._addToMap(plugin, this._tools);
	                    break;
	                default:
	                    throw new _Exception2.default(_ExceptionMessage2.default.UNDEFINED_PLUGIN_TYPE, _ExceptionMessage2.default.UNDEFINED_PLUGIN_TYPE.type);
	            }
	            plugin._manager = this;
	        }

	        /**
	         * 移除插件实现
	         * @param plugin
	         */

	    }, {
	        key: '_remove',
	        value: function _remove(plugin) {
	            if (!plugin) return;
	            switch (plugin.type) {
	                case _ENUM2.default.PLUGINTYPE.WIDGET:
	                    // 挂件
	                    this._removeFormMap(plugin, this._widgets);
	                    break;
	                case _ENUM2.default.PLUGINTYPE.TOOL:
	                    // 工具
	                    this._removeFormMap(plugin, this._tools);
	                    break;
	                default:
	                    break;
	            }
	            plugin._remove();
	        }
	    }, {
	        key: '_removeFormMap',
	        value: function _removeFormMap(plugin, mapObject) {
	            if (mapObject.has(plugin.key)) {
	                mapObject.delete(plugin.key);
	            }
	            return this;
	        }
	    }, {
	        key: '_addToMap',
	        value: function _addToMap(plugin, mapObject) {
	            if (mapObject.has(plugin.key)) {
	                throw new _Exception2.default(_ExceptionMessage2.default.ADDED_PLUGIN, _ExceptionMessage2.default.ADDED_PLUGIN.type);
	            } else {
	                mapObject.set(plugin.key, plugin);
	            }
	            return this;
	        }
	    }, {
	        key: 'toTags',
	        value: function toTags() {
	            var widgets = '';
	            var tools = '';
	            this._widgets.forEach(function (item) {
	                if (item) {
	                    widgets += '<widget><id>' + item.key + '</id></widget>';
	                }
	            });
	            this._tools.forEach(function (item) {
	                if (item) {
	                    tools += '<tool><id>' + item.key + '</id></tool>';
	                }
	            });
	            return '<plugins>' + widgets + tools + '</plugins>';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var plugins = [];
	            this._widgets.forEach(function (item) {
	                if (item) {
	                    plugins.push({ widget: { id: item.key } });
	                }
	            });
	            this._tools.forEach(function (item) {
	                if (item) {
	                    plugins.push({ tool: { id: item.key } });
	                }
	            });
	            return plugins;
	        }
	    }, {
	        key: 'currentTool',
	        set: function set(currentTool) {
	            this._currentTool = this._setCurrentTool(currentTool);
	        }

	        /**
	         * 获取当前激活的Tool
	         * @return {Tool}
	         */

	        , get: function get() {
	            return this._currentTool;
	        }
	    }]);

	    return PluginManager;
	}(_Class3.default);

	exports.default = PluginManager;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "PluginManager.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * 项目：gvml
	 * 文件：ENUM.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com
	 * 日期：2017-03-03 21:43:25.
	 * 用途：枚举类
	 */

	/**
	 * @module global
	 */
	/**
	 * gvml常用枚举类
	 * @module global
	 * @submodule global-enum
	 * @namespace GV
	 * @class ENUM
	 */
	exports.default = {
	    PLUGINTYPE: {
	        WIDGET: 'widget',
	        TOOL: 'tool'
	    },

	    VIEWMODE: {
	        VIEWMODE_2D: '2D',
	        VIEWMODE_3D: '3D'
	    },
	    POLYGONMODEL: {
	        LINE: true,
	        FILL: false
	    },
	    /**
	     * mesh数据type类型 
	     * @property {String} DRAWABLETYPE
	     * @description 标绘场景标签
	     * @static
	     * @final
	     */
	    DRAWABLETYPE: {
	        POINTS: 'POINTS',
	        LINES: 'LINES',
	        LINE_LOOP: 'LINE_LOOP',
	        LINE_STRIP: 'LINE_STRIP',
	        TRIANGLES: 'TRIANGLES',
	        TRIANGLE_STRIP: 'TRIANGLE_STRIP',
	        TRIANGLE_FAN: 'TRIANGLE_FAN',
	        QUADS: 'QUADS',
	        QUAD_STRIP: 'QUAD_STRIP',
	        POLYGON: 'POLYGON'
	    },

	    /**
	     * 广告牌数据类型
	     * @property {String} 
	     */
	    BUBBLETYPE: {
	        SCREEN_BUBBLE: 'SCREEN_BUBBLE',
	        GEO_BUBBLE: 'GEO_BUBBLE'
	    }

	};

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ENUM.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gv5_gvml
	 * 文件：VIEWMODE.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2017-05-18 14:37:04.
	 * 用途：类
	 */

	'use strict';

	/**
	 * @module global
	 * @submodule global-enum
	 * @namespace GV
	 * @class SHOW_MODE
	 */

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  /**
	   * 二维显示
	   * @property 2D
	   * @type {string}
	   * @default 2D
	   * @final
	   * @static
	   */
	  '2D': '2D',
	  /**
	   * 三维显示
	   * @property 3D
	   * @type {string}
	   * @final
	   * @static
	   * @default 3D
	   */
	  '3D': '3D',
	  /**
	   * 二三维显示
	   * @property 23D
	   * @type {string}
	   * @final
	   * @static
	   * @default 23D
	   */
	  '23D': '23D'
	};

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "SHOW_MODE.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _CreateMilItem = __webpack_require__(123);

	var _CreateMilItem2 = _interopRequireDefault(_CreateMilItem);

	var _CreatePointNode = __webpack_require__(125);

	var _CreatePointNode2 = _interopRequireDefault(_CreatePointNode);

	var _CreateGeometryNode = __webpack_require__(126);

	var _CreateGeometryNode2 = _interopRequireDefault(_CreateGeometryNode);

	var _BuiltInTool2 = __webpack_require__(127);

	var _BuiltInTool3 = _interopRequireDefault(_BuiltInTool2);

	var _Util = __webpack_require__(6);

	var _Util2 = _interopRequireDefault(_Util);

	var _ENUM = __webpack_require__(14);

	var _ENUM2 = _interopRequireDefault(_ENUM);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：Create.js
	   * 作者：董波
	   * 部门：产品研发中心
	   * 邮箱：dongb@mail.ie.ac.cn
	   * 日期：2018-1-29
	   * 用途：类
	   */
	//import CreateGeometryNode from './createNode/CreateGeometryNode';


	var Create = function (_BuiltInTool) {
	    _inherits(Create, _BuiltInTool);

	    function Create(earth) {
	        _classCallCheck(this, Create);

	        //创建各类node的创建工具
	        var _this = _possibleConstructorReturn(this, (Create.__proto__ || Object.getPrototypeOf(Create)).call(this, earth));

	        _this._CreateGeometryNode = new _CreateGeometryNode2.default(earth);
	        _this._CreateGeometryNode.onStatusChange(_this._statusChange.bind(_this));

	        _this._CreateMilItem = new _CreateMilItem2.default(earth);
	        _this._CreateMilItem.onStatusChange(_this._statusChange.bind(_this));

	        _this._CreatePointNode = new _CreatePointNode2.default(earth);
	        _this._CreatePointNode.onStatusChange(_this._statusChange.bind(_this));

	        _this._currentCreat = undefined;
	        return _this;
	    }

	    /**
	     * 设置创建鼠标样式
	     * @method setCreateCursorStyle
	     * @param {url:, x:, y:} 
	     */

	    _createClass(Create, [{
	        key: 'setCreateCursorStyle',
	        value: function setCreateCursorStyle(style) {
	            if (!style || !style.url) return;
	            this._cursorStyle = {
	                url: style.url,
	                offsetx: style.x !== undefined ? style.x : 16,
	                offsety: style.y !== undefined ? style.y : 16
	            };
	        }

	        /**
	         * 设置要创建的节点类型（名称为类名)创建工具开启时使用
	         * @method startCreateNode
	         * @param nodeType {type:, key:, data:}
	         */

	    }, {
	        key: 'startCreateNode',
	        value: function startCreateNode(nodeType) {
	            if ((typeof nodeType === 'undefined' ? 'undefined' : _typeof(nodeType)) !== 'object') return;
	            if (!this._isSelect) reutrn;

	            if (this._currentCreat) this._currentCreat.reset();

	            if (this._CreateMilItem.startCreateNode(nodeType)) {
	                this._currentCreat = this._CreateMilItem;
	            } else if (this._CreateGeometryNode.startCreateNode(nodeType)) {
	                this._currentCreat = this._CreateGeometryNode;
	            } else if (this._CreatePointNode.startCreateNode(nodeType)) {
	                this._currentCreat = this._CreatePointNode;
	            } else {
	                console.log("reatNode\uFF1A" + nodeType + "\u7C7B\u578B\u9519\u8BEF");
	                return;
	            }

	            //改变鼠标样式
	            if (this._cursorStyle) {
	                this.earth.map.cursorStyle = this._cursorStyle;
	            }
	        }
	    }, {
	        key: 'onCreatEnd',
	        value: function onCreatEnd(listener) {
	            if (!listener) return;
	            this.on('creatEnd', listener);
	        }
	    }, {
	        key: '_statusChange',
	        value: function _statusChange(statusInfo) {
	            if (statusInfo === 'creatEnd') {
	                this.fire('creatEnd', statusInfo);
	                this.earth.map.cursorStyle = { mct: _ENUM2.default.CURSOR_STYLE.POINTER };
	            }
	        }
	    }, {
	        key: '_remove',
	        value: function _remove() {
	            if (this._currentCreat) this._currentCreat.reset();
	            this._isSelect = false;
	            this.earth.map.cursorStyle = { mct: _ENUM2.default.CURSOR_STYLE.POINTER };
	        }
	    }]);

	    return Create;
	}(_BuiltInTool3.default);

	exports.default = Create;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Create.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _MilScene = __webpack_require__(99);

	var _MilScene2 = _interopRequireDefault(_MilScene);

	var _MilItem = __webpack_require__(100);

	var _MilItem2 = _interopRequireDefault(_MilItem);

	var _CreateNode = __webpack_require__(124);

	var _CreateNode2 = _interopRequireDefault(_CreateNode);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：CreateMilItem.js
	   * 作者：董波
	   * 部门：产品研发中心
	   * 邮箱：dongb@mail.ie.ac.cn
	   * 日期：2018-1-29
	   * 用途：类
	   */

	var CreateMilItem = function (_CreatNode) {
	    _inherits(CreateMilItem, _CreatNode);

	    function CreateMilItem(earth) {
	        _classCallCheck(this, CreateMilItem);

	        var _this = _possibleConstructorReturn(this, (CreateMilItem.__proto__ || Object.getPrototypeOf(CreateMilItem)).call(this, earth));

	        _this._initEvent();
	        return _this;
	    }

	    _createClass(CreateMilItem, [{
	        key: '_initEvent',
	        value: function _initEvent() {
	            var that = this;
	            this._mouseMove = function () {
	                if (!that.earth.location) return;
	                if (!that._eidtNode) return;
	                if (that.needAddPoint) {
	                    that._addLinePoint(that.earth.location);
	                    that.needAddPoint = false;
	                }
	                that._updateLine(that.earth.location);
	            };

	            this._mouseup = function (event) {

	                if (event.button === 0 && that.earth.location) {
	                    if (that._eidtNode) {
	                        that.needAddPoint = true;
	                    } else {
	                        that._addNode();
	                    }
	                } else if (event.button === 2) {
	                    //右键停止创建
	                    that._statusChange('creatEnd');
	                    that._endCreate();
	                }
	            };
	        }
	    }, {
	        key: 'startCreateNode',
	        value: function startCreateNode(nodeType) {
	            var tempType = nodeType.type;
	            switch (tempType) {
	                case 'GV.MilItem':
	                    this._nodeType = _MilItem2.default;
	                    break;
	                default:
	                    return false;
	            }

	            this._eidtNode = undefined;
	            this._className = tempType;
	            this._libid = nodeType.data.libid;
	            this._code = nodeType.data.code;

	            this._startCreate();

	            return true;
	        }
	    }, {
	        key: '_addLinePoint',
	        value: function _addLinePoint(location) {
	            if (!this._eidtNode) return;
	            if (this._eidtNode.maxCount && this._eidtNode.maxCount !== -1 && this._eidtNode.getPointCount() >= this._eidtNode.maxCount) {
	                this._eidtNode = undefined;
	                return;
	            }
	            this._eidtNode.addPoints([location.lon, location.lat, location.alt]);
	        }
	    }, {
	        key: '_updateLine',
	        value: function _updateLine(location) {
	            if (!this._eidtNode) return;
	            this._eidtNode.revisePoint(this._eidtNode.getPointCount() - 1, [location.lon, location.lat, location.alt]);
	        }
	    }, {
	        key: '_addNode',
	        value: function _addNode() {
	            var _this2 = this;

	            var jsonData = this.earth.getDefaultNode(this._className);
	            if (!jsonData) jsonData = {};
	            jsonData.libid = this._libid;
	            jsonData.code = this._code;
	            jsonData.vertices = [this.earth.location.lon, this.earth.location.lat, this.earth.location.alt];
	            var node = new this._nodeType(jsonData);
	            var scene = this.earth.getEditScene('MilScene');
	            if (!scene) {
	                scene = new _MilScene2.default();
	                this.earth.addScene(scene);
	                this.earth.setEditScene(scene);
	            }
	            scene.addNode(node);
	            var that = this;
	            node.getMaxCount(function (maxCount) {
	                if (maxCount === 1) return;
	                that._eidtNode = node;
	                that._eidtNode.maxCount = maxCount;
	                _this2._addLinePoint(node.getPoint(0));
	            });
	        }
	    }, {
	        key: '_startCreate',
	        value: function _startCreate() {
	            this.earth.earthdiv[0].addEventListener('mouseup', this._mouseup);
	            this.earth.earthdiv[0].addEventListener('mousemove', this._mouseMove);
	        }
	    }, {
	        key: '_endCreate',
	        value: function _endCreate() {
	            this.earth.earthdiv[0].removeEventListener('mouseup', this._mouseup);
	            this.earth.earthdiv[0].removeEventListener('mousemove', this._mouseMove);
	            this._createType = undefined;
	            this._nodeType = undefined;
	            this._eidtNode = undefined;
	        }
	    }, {
	        key: '_statusChange',
	        value: function _statusChange(type) {
	            if (this._callback) this._callback(type);
	        }
	    }, {
	        key: 'reset',
	        value: function reset() {
	            this._endCreate();
	        }
	    }, {
	        key: 'onStatusChange',
	        value: function onStatusChange(listener) {
	            this._callback = listener;
	        }
	    }]);

	    return CreateMilItem;
	}(_CreateNode2.default);

	exports.default = CreateMilItem;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "CreateMilItem.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	/**
	 * 项目：gvml
	 * 文件：CreateNode.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@mail.ie.ac.cn
	 * 日期：2018-1-29
	 * 用途：创建节点的基类
	 */

	var CreateNode = function () {
	    function CreateNode(earth) {
	        _classCallCheck(this, CreateNode);

	        this.earth = earth;
	    }

	    /**
	     * 开始创建节点
	     * @method startCreateNode
	     * @param nodeType 节点创建需要的数据数据
	     * @param nodeType.type 类名
	     * @param nodeType.key  id值
	     * @param nodeType.data 描述数据
	     */

	    _createClass(CreateNode, [{
	        key: "startCreateNode",
	        value: function startCreateNode(nodeType) {}

	        /**
	         * 重置
	         */

	    }, {
	        key: "reset",
	        value: function reset() {}

	        /**
	         * 监听接口
	         * @method onStatusChange
	         * @param listener {Function}
	         */

	    }, {
	        key: "onStatusChange",
	        value: function onStatusChange(listener) {
	            this._callback = listener;
	        }
	    }]);

	    return CreateNode;
	}();

	exports.default = CreateNode;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "CreateNode.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _CreateNode = __webpack_require__(124);

	var _CreateNode2 = _interopRequireDefault(_CreateNode);

	var _GraphicScene = __webpack_require__(59);

	var _GraphicScene2 = _interopRequireDefault(_GraphicScene);

	var _Place = __webpack_require__(66);

	var _Place2 = _interopRequireDefault(_Place);

	var _Label = __webpack_require__(71);

	var _Label2 = _interopRequireDefault(_Label);

	var _Model = __webpack_require__(73);

	var _Model2 = _interopRequireDefault(_Model);

	var _Circle = __webpack_require__(74);

	var _Circle2 = _interopRequireDefault(_Circle);

	var _Cone = __webpack_require__(75);

	var _Cone2 = _interopRequireDefault(_Cone);

	var _Cube = __webpack_require__(76);

	var _Cube2 = _interopRequireDefault(_Cube);

	var _Ellipse = __webpack_require__(77);

	var _Ellipse2 = _interopRequireDefault(_Ellipse);

	var _Ellipsoid = __webpack_require__(78);

	var _Ellipsoid2 = _interopRequireDefault(_Ellipsoid);

	var _Sphere = __webpack_require__(82);

	var _Sphere2 = _interopRequireDefault(_Sphere);

	var _Icon = __webpack_require__(87);

	var _Icon2 = _interopRequireDefault(_Icon);

	var _GeoMesh = __webpack_require__(90);

	var _GeoMesh2 = _interopRequireDefault(_GeoMesh);

	var _PointCloud = __webpack_require__(91);

	var _PointCloud2 = _interopRequireDefault(_PointCloud);

	var _PointEffect = __webpack_require__(92);

	var _PointEffect2 = _interopRequireDefault(_PointEffect);

	var _FireEffect = __webpack_require__(93);

	var _FireEffect2 = _interopRequireDefault(_FireEffect);

	var _RainEffect = __webpack_require__(94);

	var _RainEffect2 = _interopRequireDefault(_RainEffect);

	var _SmokeEffect = __webpack_require__(95);

	var _SmokeEffect2 = _interopRequireDefault(_SmokeEffect);

	var _ExplosionEffect = __webpack_require__(97);

	var _ExplosionEffect2 = _interopRequireDefault(_ExplosionEffect);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：CreatePointNode.js
	   * 作者：董波
	   * 部门：产品研发中心
	   * 邮箱：dongb@mail.ie.ac.cn
	   * 日期：2018-1-29
	   * 用途：类
	   */

	var CreatePointNode = function (_CreatNode) {
	    _inherits(CreatePointNode, _CreatNode);

	    function CreatePointNode(earth) {
	        _classCallCheck(this, CreatePointNode);

	        var _this = _possibleConstructorReturn(this, (CreatePointNode.__proto__ || Object.getPrototypeOf(CreatePointNode)).call(this, earth));

	        _this._initEvent();
	        return _this;
	    }

	    _createClass(CreatePointNode, [{
	        key: '_initEvent',
	        value: function _initEvent() {
	            var that = this;
	            this._mouseup = function () {
	                if (event.button === 0 && that.earth.location) {
	                    var jsonData = that.earth.getDefaultNode(that._className);
	                    if (!jsonData) jsonData = {};
	                    jsonData.position = that.earth.location;
	                    var node = new that._nodeType(jsonData);
	                    var scene = that.earth.getEditScene('GraphicScene');
	                    if (!scene) {
	                        scene = new _GraphicScene2.default();
	                        that.earth.addScene(scene);
	                        that.earth.setEditScene(scene);
	                    }
	                    scene.addNode(node);
	                } else if (event.button === 2) {
	                    //右键停止创建
	                    that._statusChange('creatEnd');
	                    that._endCreate();
	                }
	            };
	        }
	    }, {
	        key: 'startCreateNode',
	        value: function startCreateNode(nodeType) {
	            nodeType = nodeType.type;
	            if (!nodeType) return false;
	            var tempType = void 0;
	            switch (nodeType) {
	                case 'GV.Place':
	                    tempType = _Place2.default;
	                    break;
	                case 'GV.Label':
	                    tempType = _Label2.default;
	                    break;
	                case 'GV.Model':
	                    tempType = _Model2.default;
	                    break;
	                case 'GV.Circle':
	                    tempType = _Circle2.default;
	                    break;
	                case 'GV.Cone':
	                    tempType = _Cone2.default;
	                    break;
	                case 'GV.Cube':
	                    tempType = _Cube2.default;
	                    break;
	                case 'GV.Ellipse':
	                    tempType = _Ellipse2.default;
	                    break;
	                case 'GV.Ellipsoid':
	                    tempType = _Ellipsoid2.default;
	                    break;
	                case 'GV.Icon':
	                    tempType = _Icon2.default;
	                    break;
	                case 'GV.GeoMesh':
	                    tempType = _GeoMesh2.default;
	                    break;
	                case 'GV.PointCloud':
	                    tempType = _PointCloud2.default;
	                    break;
	                case 'GV.FireEffect':
	                    tempType = _FireEffect2.default;
	                    break;
	                case 'GV.RainEffect':
	                    tempType = _RainEffect2.default;
	                    break;
	                case 'GV.SmokeEffect':
	                    tempType = _SmokeEffect2.default;
	                    break;
	                case 'GV.ExplosionEffect':
	                    tempType = _ExplosionEffect2.default;
	                    break;
	                default:
	                    return false;
	            }

	            //this._createType = creatType;
	            this._nodeType = tempType;
	            this._className = nodeType;
	            this._startCreate();

	            return true;
	        }

	        // _mouseup(event) {


	        // }

	    }, {
	        key: '_startCreate',
	        value: function _startCreate() {
	            this.earth.earthdiv[0].addEventListener('mouseup', this._mouseup);
	        }
	    }, {
	        key: '_endCreate',
	        value: function _endCreate() {
	            this.earth.earthdiv[0].removeEventListener('mouseup', this._mouseup);
	            this._nodeType = undefined;
	            this._className = undefined;
	        }
	    }, {
	        key: '_statusChange',
	        value: function _statusChange(type) {
	            if (this._callback) this._callback(type);
	        }
	    }, {
	        key: 'reset',
	        value: function reset() {
	            this._endCreate();
	        }
	    }, {
	        key: 'onStatusChange',
	        value: function onStatusChange(listener) {
	            this._callback = listener;
	        }
	    }]);

	    return CreatePointNode;
	}(_CreateNode2.default);

	exports.default = CreatePointNode;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "CreatePointNode.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _CreateNode = __webpack_require__(124);

	var _CreateNode2 = _interopRequireDefault(_CreateNode);

	var _GraphicScene = __webpack_require__(59);

	var _GraphicScene2 = _interopRequireDefault(_GraphicScene);

	var _Polygon = __webpack_require__(80);

	var _Polygon2 = _interopRequireDefault(_Polygon);

	var _Polyline = __webpack_require__(81);

	var _Polyline2 = _interopRequireDefault(_Polyline);

	var _Spline = __webpack_require__(83);

	var _Spline2 = _interopRequireDefault(_Spline);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：CreateGeometryNode.js
	   * 作者：董波
	   * 部门：产品研发中心
	   * 邮箱：dongb@mail.ie.ac.cn
	   * 日期：2018-1-29
	   * 用途：类
	   */

	var CreateGeometryNode = function (_CreatNode) {
	    _inherits(CreateGeometryNode, _CreatNode);

	    function CreateGeometryNode(earth) {
	        _classCallCheck(this, CreateGeometryNode);

	        var _this = _possibleConstructorReturn(this, (CreateGeometryNode.__proto__ || Object.getPrototypeOf(CreateGeometryNode)).call(this, earth));

	        _this._initEvent();
	        return _this;
	    }

	    _createClass(CreateGeometryNode, [{
	        key: '_initEvent',
	        value: function _initEvent() {
	            var that = this;
	            this._mouseMove = function () {
	                if (!that.earth.location) return;
	                if (!that._eidtNode) return;
	                if (that.needAddPoint) {
	                    that._addLinePoint(that.earth.location);
	                    that.needAddPoint = false;
	                }
	                that._updateLine(that.earth.location);
	            };

	            this._mouseup = function (event) {

	                if (event.button === 0 && that.earth.location) {
	                    if (that._eidtNode) {
	                        that.needAddPoint = true;
	                    } else {
	                        that._addNode();
	                    }
	                } else if (event.button === 2) {
	                    //右键停止创建
	                    that._statusChange('creatEnd');
	                    that._endCreate();
	                }
	            };
	        }
	    }, {
	        key: 'startCreateNode',
	        value: function startCreateNode(nodeType) {
	            var tempType = nodeType.type;
	            switch (tempType) {
	                case 'GV.Polygon':
	                    this._nodeType = _Polygon2.default;
	                    break;
	                case 'GV.Polyline':
	                    this._nodeType = _Polyline2.default;
	                    break;
	                case 'GV.Spline':
	                    this._nodeType = _Spline2.default;
	                    break;
	                default:
	                    return false;
	            }

	            this._eidtNode = undefined;
	            this._className = tempType;

	            this._startCreate();

	            return true;
	        }
	    }, {
	        key: '_addLinePoint',
	        value: function _addLinePoint(location) {
	            if (!this._eidtNode) return;
	            this._eidtNode.addPoints([location.lon, location.lat, location.alt]);
	        }
	    }, {
	        key: '_updateLine',
	        value: function _updateLine(location) {
	            if (!this._eidtNode) return;
	            this._eidtNode.revisePoint(this._eidtNode.getPointCount() - 1, [location.lon, location.lat, location.alt]);
	        }
	    }, {
	        key: '_addNode',
	        value: function _addNode() {
	            var jsonData = this.earth.getDefaultNode(this._className);
	            if (!jsonData) jsonData = {};
	            jsonData.vertices = [this.earth.location.lon, this.earth.location.lat, this.earth.location.alt];
	            var node = new this._nodeType(jsonData);
	            var scene = this.earth.getEditScene('GraphicScene');
	            if (!scene) {
	                scene = new _GraphicScene2.default();
	                this.earth.addScene(scene);
	                this.earth.setEditScene(scene);
	            }
	            scene.addNode(node);

	            this._eidtNode = node;
	            this._addLinePoint(node.getPoint(0));
	        }
	    }, {
	        key: '_startCreate',
	        value: function _startCreate() {
	            this.earth.earthdiv[0].addEventListener('mouseup', this._mouseup);
	            this.earth.earthdiv[0].addEventListener('mousemove', this._mouseMove);
	        }
	    }, {
	        key: '_endCreate',
	        value: function _endCreate() {
	            this.earth.earthdiv[0].removeEventListener('mouseup', this._mouseup);
	            this.earth.earthdiv[0].removeEventListener('mousemove', this._mouseMove);
	            this._createType = undefined;
	            this._nodeType = undefined;
	            this._eidtNode = undefined;
	        }
	    }, {
	        key: '_statusChange',
	        value: function _statusChange(type) {
	            if (this._callback) this._callback(type);
	        }
	    }, {
	        key: 'reset',
	        value: function reset() {
	            this._endCreate();
	        }
	    }, {
	        key: 'onStatusChange',
	        value: function onStatusChange(listener) {
	            this._callback = listener;
	        }
	    }]);

	    return CreateGeometryNode;
	}(_CreateNode2.default);

	exports.default = CreateGeometryNode;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "CreateGeometryNode.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gvml
	 * 文件：BuiltInTool.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@mail.ie.ac.cn
	 * 日期：2018-1-29
	 * 用途：内置插件类
	 */
	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Event2 = __webpack_require__(51);

	var _Event3 = _interopRequireDefault(_Event2);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 内置插件类
	 * @module BuiltInTool
	 * @namespace GV
	 * @class BuiltInTool
	 */
	var BuiltInTool = function (_Event) {
	    _inherits(BuiltInTool, _Event);

	    function BuiltInTool(earth) {
	        _classCallCheck(this, BuiltInTool);

	        var _this = _possibleConstructorReturn(this, (BuiltInTool.__proto__ || Object.getPrototypeOf(BuiltInTool)).call(this));

	        _this.earth = earth;
	        _this._isSelect = false;
	        return _this;
	    }

	    _createClass(BuiltInTool, [{
	        key: '_init',
	        value: function _init() {
	            this._isSelect = true;
	        }
	    }, {
	        key: '_remove',
	        value: function _remove() {
	            this._isSelect = false;
	        }
	    }, {
	        key: 'clear',
	        value: function clear() {
	            this._events = undefined;
	        }
	    }, {
	        key: 'isSelect',
	        value: function isSelect() {
	            return this._isSelect;
	        }
	    }]);

	    return BuiltInTool;
	}(_Event3.default);

	exports.default = BuiltInTool;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "BuiltInTool.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _BuiltInTool = __webpack_require__(127);

	var _BuiltInTool2 = _interopRequireDefault(_BuiltInTool);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：EidtNode.js
	   * 作者：董波
	   * 部门：产品研发中心
	   * 邮箱：dongb@mail.ie.ac.cn
	   * 日期：2018-1-29
	   * 用途：类
	   */

	var EidtNode = function (_BuildInTool) {
	    _inherits(EidtNode, _BuildInTool);

	    function EidtNode(earth) {
	        _classCallCheck(this, EidtNode);

	        var _this = _possibleConstructorReturn(this, (EidtNode.__proto__ || Object.getPrototypeOf(EidtNode)).call(this, earth));

	        _this._editNode = undefined;
	        _this._selectTool = _this.earth.getMapTool('itemSelect');
	        var that = _this;
	        _this._selectTool.on('pick_obj', function (selectId) {
	            var node = that.earth.getNodeById(selectId);
	            that.earth.setEditNode(node);
	            that._editNodeChange(node);
	        });

	        _this.earth.messageListener.on('sceneUpdate', function (info) {
	            if (!that._isSelect) return;
	            var node = that.earth.getEditNode();
	            that._editNodeChange(node);
	        });
	        return _this;
	    }

	    _createClass(EidtNode, [{
	        key: '_editNodeChange',
	        value: function _editNodeChange(node) {
	            if (node === this._editNode) return;

	            this._editNode = node;
	            var tempData = void 0;
	            if (node) {
	                tempData = node.toJson()[node.tag];
	                tempData.className = 'GV.' + this._editNode.constructor.name;

	                //将默认参数输入到程序中
	                var tempDefault = this.earth.getDefaultData(tempData.className);
	                if (tempDefault) {
	                    for (var prop in tempDefault) {
	                        if (prop === 'style') {
	                            if (!tempData.style) tempData.style = {};
	                            for (var styleProp in tempDefault.style) {
	                                if (tempData.style[styleProp] === undefined) tempData.style[styleProp] = tempDefault.style[styleProp];
	                            }
	                        } else {
	                            if (tempData[prop] === undefined) tempData[prop] = tempDefault[prop];
	                        }
	                    }
	                }
	            }
	            this.fire('objChange', tempData);
	        }
	    }, {
	        key: 'styleToProp',
	        value: function styleToProp(str) {
	            return str.replace(/-([a-z]|[0-9])/g, function ($0) {
	                return $0.toUpperCase().charAt(1);
	            });
	        }

	        /**
	         * 改变当前编辑对象属性
	         * @method changeProp
	         * @param {type:, prop:, value} proInfo 
	         */

	    }, {
	        key: 'changeProp',
	        value: function changeProp(proInfo) {
	            if (!this._editNode || !proInfo) return;

	            if (proInfo.type === 'style') {
	                if (!this._editNode.style) this._editNode.style = {};
	                var tempProp = this._isSelect ? this.styleToProp(proInfo.prop) : proInfo.prop;
	                this._editNode.style[tempProp] = proInfo.value;
	            } else {
	                this._editNode[proInfo.prop] = proInfo.value;
	            }
	        }
	    }, {
	        key: '_init',
	        value: function _init() {
	            this.earth.setEditNode();
	            this._editNodeChange();
	            if (this._selectTool) this._selectTool.select();
	            this._isSelect = true;
	        }
	    }, {
	        key: '_remove',
	        value: function _remove() {
	            this._isSelect = false;
	            this.earth.setEditNode();
	            this._editNodeChange();
	            if (this._selectTool) this.earth.clearMapTool();
	        }

	        /**
	         * 设置编辑类
	         * @method setEditClassName
	         * @param className {String}
	         */

	    }, {
	        key: 'setEditClassName',
	        value: function setEditClassName(className) {
	            if (this._isSelect) return;

	            var tempData = void 0;
	            this.earth.resetDefaultNode();
	            this._editNode = this.earth.getDefaultNode(className);
	            if (this._editNode) tempData = this.earth.getDefaultData(className);
	            this.fire('objChange', tempData);
	        }

	        /**
	         * 监听编辑对象变化
	         * @method onEditObjChange
	         * @param {Function}callback
	         */

	    }, {
	        key: 'onEditObjChange',
	        value: function onEditObjChange(callback) {
	            this.on('objChange', callback, this);
	        }
	    }]);

	    return EidtNode;
	}(_BuiltInTool2.default);

	exports.default = EidtNode;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Edit.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _BuiltInTool2 = __webpack_require__(127);

	var _BuiltInTool3 = _interopRequireDefault(_BuiltInTool2);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：Select.js
	   * 作者：董波
	   * 部门：产品研发中心
	   * 邮箱：dongb@mail.ie.ac.cn
	   * 日期：2018-1-29
	   * 用途：类
	   */

	var Select = function (_BuiltInTool) {
	    _inherits(Select, _BuiltInTool);

	    function Select(earth) {
	        _classCallCheck(this, Select);

	        return _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, earth));
	    }

	    return Select;
	}(_BuiltInTool3.default);

	exports.default = Select;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Select.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _ENUM = __webpack_require__(14);

	var _ENUM2 = _interopRequireDefault(_ENUM);

	var _StyleData = __webpack_require__(63);

	var styleData = _interopRequireWildcard(_StyleData);

	var _STYLEENUM = __webpack_require__(64);

	var _STYLEENUM2 = _interopRequireDefault(_STYLEENUM);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	var defaultData = { properties: new Map() };

	defaultData.getDefaultProperties = function (className) {

	    var nodeObj;
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;

	    try {
	        for (var _iterator = defaultData.properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var value = _step.value;

	            if (value[1].className === className) {
	                nodeObj = value[1];
	            }
	        }
	    } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion && _iterator.return) {
	                _iterator.return();
	            }
	        } finally {
	            if (_didIteratorError) {
	                throw _iteratorError;
	            }
	        }
	    }

	    if (!nodeObj) return;
	    var tempObj = { className: nodeObj.className };
	    for (var key in nodeObj) {
	        if (key === 'style') {
	            for (var styleKey in nodeObj.style) {
	                if (nodeObj.style[styleKey]) {
	                    if (!tempObj.style) tempObj.style = {};
	                    if (styleData.cssProperties[styleKey]) {
	                        tempObj.style[styleKey] = styleData.cssProperties[styleKey].default;
	                    }
	                }
	            }
	        } else {
	            if (nodeObj[key].default !== undefined) tempObj[key] = nodeObj[key].default;
	        }
	    }

	    return tempObj;
	};

	defaultData.getDefaultNode = function (className) {
	    if (!defaultData._edits) defaultData._edits = new Map();
	    var data = void 0;
	    data = defaultData._edits.get(className);
	    if (data) return data;

	    var _iteratorNormalCompletion2 = true;
	    var _didIteratorError2 = false;
	    var _iteratorError2 = undefined;

	    try {
	        for (var _iterator2 = defaultData.properties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	            var value = _step2.value;

	            if (value[1].className === className) {
	                defaultData._edits.set(className, { classNmae: className });
	            }
	        }
	    } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                _iterator2.return();
	            }
	        } finally {
	            if (_didIteratorError2) {
	                throw _iteratorError2;
	            }
	        }
	    }

	    return defaultData._edits.get(className);
	};

	defaultData.resetDefaultNode = function () {
	    defaultData._edits = new Map();
	};

	//milItem
	defaultData.properties.set(_TagsEnum2.default.MilItem, {
	    className: 'GV.MilItem',
	    vertices: {
	        type: 'Vertices',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    libid: {
	        type: 'String',
	        default: 0
	    },
	    code: {
	        type: 'String',
	        default: 0
	    },
	    text: {
	        type: 'String',
	        default: ''
	    },
	    style: {
	        'mil-text-size': true, //文字大小
	        'mil-render-mode': true, //绘制形态，enum{raster,vector}
	        'mil-color': true, //军标颜色
	        'mil-supplement-color': true, //军标衬色(绘制形态为vector时支持)
	        'mil-size': true //军标大小
	    }
	});

	//label
	defaultData.properties.set(_TagsEnum2.default.Label, {
	    className: 'GV.Label',
	    position: {
	        type: 'Position',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    text: {
	        type: 'String',
	        default: ''
	    },
	    style: {
	        'altitude-clamping': true,
	        'max-visible-distance': true, //最大可是距离
	        'min-visible-distance': true,
	        'min-visible-range': true, //最小可视相机高度
	        'max-visible-range': true, //最大可视相机高度
	        'render-lighting': true, //是否开启渲染灯光
	        'render-backface-culling': true, //是否剔除背面
	        'text-color': true, //字体颜色
	        'text-size': true, //字体大小，单位是像素值或者实际大小，默认为10像素
	        'text-font': true, //字体样式
	        'text-halo-show': true, //是否显示边框
	        'text-halo-color': true, //字体边框颜色
	        'text-halo-fill': true, //是否对边框填充
	        'text-align': true, //文本对齐方式
	        'text-layout': true, //文本布局方式
	        'text-encoding': true, //文字编码方式
	        'text-declutter': true, //text重叠时是否自动切割
	        'text-axis-alignment': true, //轴对齐方式
	        'text-character-size-mode': true, //大小模式
	        'text-gradient': true, //渐变模式
	        'text-gradient-ltcolor': true, //左上角颜色
	        'text-gradient-rtcolor': true, //右下角颜色
	        'text-gradient-lbcolor': true, //左下角颜色
	        'text-gradient-rbcolor': true, //右下角颜色
	        'text-used-3d': true, //是否3D显示    目前不支持
	        'text-link-line': true //是否有连接线
	    }
	});

	// place
	defaultData.properties.set(_TagsEnum2.default.Place, {
	    className: 'GV.Place',
	    position: {
	        type: 'Position',
	        default: undefined
	    }, //设置位置
	    visible: {
	        type: 'Boolean',
	        default: true
	    }, //是否可见
	    text: {
	        type: 'String',
	        default: ''
	    }, //默认文本
	    url: {
	        type: 'String',
	        default: ''
	    }, //默认标注图片
	    style: {
	        'max-visible-distance': true, //最大可视距离
	        'min-visible-distance': true, //最小可视距离
	        'min-visible-range': true, //最小可视相机高度
	        'max-visible-range': true, //最大可视相机高度
	        'text-color': true, //字体颜色
	        'text-size': true, //字体大小，单位是像素值或者实际大小，默认为10像素
	        'text-font': true, //字体样式
	        'text-offset-x': true, //字体x轴偏移距离
	        'text-offset-y': true, //字体y轴偏移距离
	        'text-align': true, //文本对齐方式
	        'text-layout': true, //文本布局方式
	        'text-halo-show': true, //是否显示边框
	        'text-halo-color': true, //文字边框颜色
	        'icon-scale': true, //ICON缩放
	        'icon-align': true, //ICON的对齐方式
	        'icon-heading': true //ICON的偏航角
	    }
	});

	//模型
	defaultData.properties.set(_TagsEnum2.default.Model, {
	    className: 'GV.Model',
	    position: {
	        type: 'Position',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    url: {
	        type: 'String',
	        default: ''
	    },
	    style: {
	        'max-visible-distance': true, //最大可视距离
	        'min-visible-distance': true, //最小可视距离
	        'min-visible-range': true, //最小可视相机高度
	        'max-visible-range': true, //最大可视相机高度
	        'model-scale': true, //缩放
	        'model-heading': true, //偏转
	        'model-pitch': true, //俯仰
	        'model-roll': true, //翻滚
	        'model-pixel': true, //模型像素，当model-scale为auto时生效
	        'model-max-auto-scale': true, //模型最大缩放比例，当model-scale为auto时生效
	        'model-min-auto-scale': true //模型最小缩放比例，当model-scale为auto时生效
	    }
	});

	// 圆锥体
	defaultData.properties.set(_TagsEnum2.default.Cone, {
	    className: 'GV.Cone',
	    position: {
	        type: 'Position',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    }, //是否可见
	    height: {
	        type: 'Number',
	        default: 0
	    },
	    radius: {
	        type: 'Number',
	        default: 0
	    },
	    style: {
	        'max-visible-distance': true, //最大可视距离
	        'min-visible-distance': true, //最小可视距离
	        'min-visible-range': true, //最小可视相机高度
	        'max-visible-range': true, //最大可视相机高度
	        'render-lighting': true, //是否开启渲染灯光
	        'render-transparent': true, //是否开启透明
	        'render-backface-culling': true, //是否剔除背面
	        'mesh-color': true, //实体颜色
	        'mesh-mode': true //填充方式
	    }
	});

	// 球体
	defaultData.properties.set(_TagsEnum2.default.Sphere, {
	    className: 'GV.Sphere',
	    position: {
	        type: 'Position',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    radius: {
	        type: 'Number',
	        default: 0
	    },
	    style: {
	        'max-visible-distance': true, //最大可视距离
	        'min-visible-distance': true, //最小可视距离
	        'min-visible-range': true, //最小可视相机高度
	        'max-visible-range': true, //最大可视相机高度
	        'render-lighting': true, //是否开启渲染灯光
	        'render-transparent': true, //是否开启透明
	        'render-backface-culling': true, //是否剔除背面
	        'mesh-mode': true, //填充方式
	        'mesh-color': true //颜色

	    }
	});

	//椭圆
	defaultData.properties.set(_TagsEnum2.default.Ellipse, {
	    className: 'GV.Ellipse',
	    position: {
	        type: 'Position',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    height: {
	        type: 'Number',
	        default: 0
	    }, //拉伸高度
	    arcStart: {
	        type: 'Number',
	        default: 0
	    }, //开始角度
	    arcEnd: {
	        type: 'Number',
	        default: 0
	    }, //结束角度
	    radiusMajor: {
	        type: 'Number',
	        default: 0
	    }, //长轴长度
	    radiusMinor: {
	        type: 'Number',
	        default: 0
	    }, //短轴长度
	    rotationAngle: {
	        type: 'Number',
	        default: 0
	    }, //旋转角度
	    style: {
	        'altitude-clamping': 'none', //贴地方式
	        'altitude-technique': undefined, //贴地方法(当altitude-clamping设置为terrain时生效)
	        'max-visible-distance': 1000000000000, //最大可是距离
	        'min-visible-distance': 0, //最小可是距离
	        'render-depth-test': true, //是否开启深度测试
	        'render-lighting': true, //是否开启渲染灯光
	        'render-transparent': true, //是否开启透明
	        // 'render-bin': true,
	        'render-backface-culling': true, //是否剔除背面
	        'mesh-uniform': true, //是否使用同一颜色
	        'mesh-color': '#FFFFFFFF', //实体颜色
	        'mesh-color-top': '#FFFFFFFF', //顶部颜色
	        'mesh-color-bottom': '#000000FF', //底面颜色
	        'mesh-color-flank': '#FFFFFFFF', //侧面颜色
	        'mesh-mode': 'fill', //填充方式
	        'mesh-frame': false, //是否显示边框线
	        'mesh-frame-color': '#FFFFFFFF', //边框线颜色
	        'mesh-line-width': 1.0, //边框线宽度
	        'mesh-roll': 0, //翻滚角
	        'mesh-scale': 1, //等比例缩放
	        'mesh-pitch': 0, //俯仰角
	        'meah-heading': 0 //偏航角
	    }
	});

	//长方体
	defaultData.properties.set(_TagsEnum2.default.Cube, {
	    className: 'GV.Cube',
	    position: {
	        type: 'Position',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    x: {
	        type: 'Number',
	        default: undefined
	    },
	    y: {
	        type: 'Number',
	        default: undefined
	    },
	    z: {
	        type: 'Number',
	        default: undefined
	    },
	    style: {
	        'altitude-clamping': 'none', //贴地方式
	        'altitude-technique': undefined, //贴地方法(当altitude-clamping设置为terrain时生效)
	        'max-visible-distance': 1000000000000, //最大可是距离
	        'min-visible-distance': 0, //最小可是距离
	        'render-depth-test': true, //是否开启深度测试
	        'render-lighting': true, //是否开启渲染灯光
	        'render-transparent': true, //是否开启透明
	        // 'render-bin': true,
	        'render-backface-culling': true, //是否剔除背面
	        'mesh-uniform': true, //是否使用同一颜色
	        'mesh-color': '#FFFFFFFF', //实体颜色
	        'mesh-color-top': '#FFFFFFFF', //顶部颜色
	        'mesh-color-bottom': '#000000FF', //底面颜色
	        'mesh-color-flank': '#FFFFFFFF', //侧面颜色
	        'mesh-mode': 'fill', //填充方式
	        'mesh-frame': false, //是否显示边框线
	        'mesh-frame-color': '#FFFFFFFF', //边框线颜色
	        'mesh-line-width': 1.0, //边框线宽度
	        'mesh-roll': 0, //翻滚角
	        'mesh-scale': 1, //等比例缩放
	        'mesh-pitch': 0, //俯仰角
	        'meah-heading': 0 //偏航角
	    }
	});

	//圆
	defaultData.properties.set(_TagsEnum2.default.Circle, {
	    className: 'GV.Circle',
	    position: {
	        type: 'Position',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    height: {
	        type: 'Number',
	        default: 0
	    },
	    radius: {
	        type: 'Number',
	        default: 0
	    },
	    arcStart: {
	        type: 'Number',
	        default: 0
	    },
	    arcEnd: {
	        type: 'Number',
	        default: 0
	    },
	    style: {
	        'altitude-clamping': 'none', //贴地方式
	        'altitude-technique': undefined, //贴地方法(当altitude-clamping设置为terrain时生效)
	        'max-visible-distance': 1000000000000, //最大可是距离
	        'min-visible-distance': 0, //最小可是距离
	        'render-depth-test': true, //是否开启深度测试
	        'render-lighting': true, //是否开启渲染灯光
	        'render-transparent': true, //是否开启透明
	        // 'render-bin': true,
	        'render-backface-culling': true, //是否剔除背面
	        'mesh-uniform': true, //是否使用同一颜色
	        'mesh-color': '#FFFFFFFF', //实体颜色
	        'mesh-color-top': '#FFFFFFFF', //顶部颜色
	        'mesh-color-bottom': '#000000FF', //底面颜色
	        'mesh-color-flank': '#FFFFFFFF', //侧面颜色
	        'mesh-mode': 'fill', //填充方式
	        'mesh-frame': false, //是否显示边框线
	        'mesh-frame-color': '#FFFFFFFF', //边框线颜色
	        'mesh-line-width': 1.0, //边框线宽度
	        'mesh-roll': 0, //翻滚角
	        'mesh-scale': 1, //等比例缩放
	        'mesh-pitch': 0, //俯仰角
	        'meah-heading': 0 //偏航角
	    }
	});

	//图片
	defaultData.properties.set(_TagsEnum2.default.ImageOverLay, {
	    className: 'GV.ImageOverLay',
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    maxLat: {
	        type: 'Number',
	        default: 0
	    },
	    minLat: {
	        type: 'Number',
	        default: 0
	    },
	    maxLon: {
	        type: 'Number',
	        default: 0
	    },
	    minLon: {
	        type: 'Number',
	        default: 0
	    },
	    url: {
	        type: 'String',
	        default: undefined
	    },
	    alpha: {
	        type: 'Number',
	        default: 0
	    },
	    style: {
	        'max-visible-distance': 100000000000000, //最大可是距离
	        'min-visible-distance': 0, //最小可是距离
	        'render-depth-test': true, //是否开启深度测试
	        'render-lighting': true, //是否开启渲染灯光
	        'render-transparent': true, //是否开启透明
	        // 'render-bin': true,
	        'render-backface-culling': true //是否剔除背面
	    }
	});

	//geomesh
	defaultData.properties.set(_TagsEnum2.default.GeoMesh, {
	    className: 'GV.GeoMesh',
	    vertices: {
	        type: 'Vertices',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    drawable: {
	        type: 'Object',
	        default: undefined
	    },
	    geoJsonUrl: {
	        type: 'String',
	        default: undefined
	    },
	    geoJsonStr: {
	        type: 'String',
	        default: undefined
	    },
	    texture: {
	        type: 'String',
	        default: undefined
	    },
	    url: {
	        type: 'String',
	        default: undefined
	    },
	    alpha: {
	        type: 'Number',
	        default: 0
	    },
	    style: {
	        'max-visible-distance': 100000000000000, //最大可是距离
	        'min-visible-distance': 0, //最小可是距离
	        'render-depth-test': true, //是否开启深度测试
	        'render-lighting': true, //是否开启渲染灯光
	        'render-transparent': true, //是否开启透明
	        // 'render-bin': true,
	        'render-backface-culling': true //是否剔除背面
	    }
	});

	//localMesh
	defaultData.properties.set(_TagsEnum2.default.LocalMesh, {
	    className: 'GV.GeoMesh',
	    vertices: {
	        type: 'Vertices',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    drawable: {
	        type: 'Object',
	        default: undefined
	    },
	    texture: {
	        type: 'String',
	        default: undefined
	    },
	    style: {
	        'altitude-clamping': 'none', //贴地方式
	        'altitude-technique': undefined, //贴地方法(当altitude-clamping设置为terrain时生效)
	        'max-visible-distance': 1000000000000, //最大可是距离
	        'min-visible-distance': 0, //最小可是距离
	        'render-depth-test': true, //是否开启深度测试
	        'render-lighting': true, //是否开启渲染灯光
	        'render-transparent': true, //是否开启透明
	        // 'render-bin': true,
	        'render-backface-culling': true, //是否剔除背面
	        'mesh-mode': 'fill', //填充方式
	        'mesh-roll': 0, //翻滚角
	        'mesh-scale': 1, //等比例缩放
	        'mesh-pitch': 0, //俯仰角
	        'meah-heading': 0 //偏航角

	    }
	});

	//pointCloud
	defaultData.properties.set(_TagsEnum2.default.PointCloud, {
	    className: 'GV.PointCloud',
	    position: {
	        type: 'Position',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    url: {
	        type: 'String',
	        default: undefined
	    },
	    style: {
	        'altitude-clamping': 'none', //贴地方式
	        'altitude-technique': undefined, //贴地方法(当altitude-clamping设置为terrain时生效)
	        // 'max-visible-distance': 1000000000000,  //最大可是距离
	        // 'min-visible-distance': 0,              //最小可是距离
	        'render-depth-test': true, //是否开启深度测试
	        'render-lighting': true, //是否开启渲染灯光
	        'render-transparent': true, //是否开启透明
	        // 'render-bin': true,
	        'render-backface-culling': true, //是否剔除背面
	        // 'point-size': 10,             //点的大小
	        // 'point-fill': '#000000',    //点的颜色
	        'mesh-roll': 0, //翻滚角
	        'mesh-scale': 1, //等比例缩放
	        'mesh-pitch': 0, //俯仰角
	        'meah-heading': 0 //偏航角
	    }
	});

	//Ellipsoid
	defaultData.properties.set(_TagsEnum2.default.Ellipsoid, {
	    className: 'GV.Ellipsoid',
	    position: {
	        type: 'Position',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    radiusX: {
	        type: 'Number',
	        default: undefined
	    },
	    radiusY: {
	        type: 'Number',
	        default: undefined
	    },
	    radiusZ: {
	        type: 'Number',
	        default: undefined
	    },
	    style: {
	        'altitude-clamping': 'none', //贴地方式
	        'altitude-technique': undefined, //贴地方法(当altitude-clamping设置为terrain时生效)
	        // 'max-visible-distance': 1000000000000,  //最大可是距离
	        // 'min-visible-distance': 0,              //最小可是距离
	        'render-depth-test': true, //是否开启深度测试
	        'render-lighting': true, //是否开启渲染灯光
	        'render-transparent': true, //是否开启透明
	        // 'render-bin': true,
	        'render-backface-culling': true, //是否剔除背面
	        'mesh-uniform': true, //是否使用同一颜色
	        'mesh-color': '#FFFFFFFF', //实体颜色
	        'mesh-color-top': '#FFFFFFFF', //顶部颜色
	        'mesh-color-bottom': '#000000FF', //底面颜色
	        'mesh-color-flank': '#FFFFFFFF', //侧面颜色
	        'mesh-mode': 'fill', //填充方式
	        'mesh-frame': false, //是否显示边框线
	        'mesh-frame-color': '#FFFFFFFF', //边框线颜色
	        'mesh-line-width': 1.0 //边框线宽度
	    }
	});

	//Icon
	defaultData.properties.set(_TagsEnum2.default.Icon, {
	    className: 'GV.Icon',
	    position: {
	        type: 'Position',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    url: {
	        type: 'String',
	        default: undefined
	    },
	    style: {
	        'altitude-clamping': 'absolute', //贴地方式
	        'max-visible-distance': 10000000000, //最大可是距离
	        'min-visible-distance': 0, //最小可是距离

	        'icon-scale': 1, //缩放
	        'icon-heading': 0, //偏转角
	        'icon-roll': 0, //翻滚角
	        'icon-pitch': 0, //俯仰角
	        'icon-size': 30, //大小

	        'icon-declutter': false, //是否碰撞检测
	        'icon-align': 'left-top', //对其方式
	        'icon-mode': 'spirit', //图标显示模式
	        'icon-link-line': false, //是否有连接线
	        'icon-alpha': 1 //透明度
	    }
	});

	//Polygon
	defaultData.properties.set(_TagsEnum2.default.Polygon, {
	    className: 'GV.Polygon',
	    vertices: {
	        type: 'Vertices',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    style: {
	        fill: '#FFFFFFFF', //填充色
	        'altitude-clamping': 'none', //贴地方式
	        'altitude-technique': undefined, //贴地方法(当altitude-clamping设置为terrain时生效)
	        'max-visible-distance': 1000000000000, //最大可是距离
	        'min-visible-distance': 0, //最小可是距离
	        'render-depth-test': true, //是否开启深度测试
	        'render-lighting': true, //是否开启渲染灯光
	        'render-transparent': true, //是否开启透明
	        // 'render-bin': true,
	        'render-backface-culling': true, //是否剔除背面
	        'stroke': '#FFFFFFFF', //线的颜色
	        'stroke-width': '10px', //线宽（例20px 或 10m）
	        'stroke-min-pixels': undefined, //最小渲染宽度（线宽不为位像素时有效）
	        'stroke-tessellation': undefined, //线段的细分段数
	        'stroke-stipple-pattern': undefined, //点划线模式
	        'stroke-stipple-factor': undefined, //重绘点的数目
	        'stroke-linejoin': undefined, //线连接处处理（线宽不为位像素时有效）
	        'stroke-linecap': undefined, //线端点处理（线宽不为位像素时有效）
	        'stroke-rounding-ratio': undefined, //接口为round线宽与拐角片段的比例
	        'line-extrusion': false, //是否拉伸
	        'extrusion-height': 100000 //拉伸高度
	    }
	});

	//Polyline
	defaultData.properties.set(_TagsEnum2.default.Polyline, {
	    className: 'GV.Polyline',
	    vertices: {
	        type: 'Vertices',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    style: {
	        'altitude-clamping': 'none', //贴地方式
	        'altitude-technique': undefined, //贴地方法(当altitude-clamping设置为terrain时生效)
	        'max-visible-distance': 1000000000000, //最大可是距离
	        'min-visible-distance': 0, //最小可是距离
	        'render-depth-test': true, //是否开启深度测试
	        'render-lighting': true, //是否开启渲染灯光
	        'render-transparent': true, //是否开启透明
	        // 'render-bin': true,
	        'render-backface-culling': true, //是否剔除背面
	        'stroke': '#FFFFFFFF', //线的颜色
	        'stroke-width': '3px', //线宽（例20px 或 10m）
	        'stroke-min-pixels': undefined, //最小渲染宽度（线宽不为位像素时有效）
	        'stroke-tessellation': undefined, //线段的细分段数

	        'stroke-stipple-pattern': undefined, //点划线模式
	        'stroke-stipple-factor': undefined, //重绘点的数目
	        'stroke-linejoin': undefined, //线连接处处理（线宽不为位像素时有效）
	        'stroke-linecap': undefined, //线端点处理（线宽不为位像素时有效）
	        'stroke-rounding-ratio': undefined, //接口为round线宽与拐角片段的比例
	        'line-extrusion': false, //是否拉伸
	        'extrusion-height': 100000 //拉伸高度

	    }
	});

	//Spline
	defaultData.properties.set(_TagsEnum2.default.Spline, {
	    className: 'GV.Spline',
	    vertices: {
	        type: 'Vertices',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    style: {
	        'altitude-clamping': 'none', //贴地方式
	        'altitude-technique': undefined, //贴地方法(当altitude-clamping设置为terrain时生效)
	        'max-visible-distance': 1000000000000, //最大可是距离
	        'min-visible-distance': 0, //最小可是距离
	        'render-depth-test': true, //是否开启深度测试
	        'render-lighting': true, //是否开启渲染灯光
	        'render-transparent': true, //是否开启透明
	        // 'render-bin': true,
	        'render-backface-culling': true, //是否剔除背面
	        'stroke': '#FFFFFFFF', //线的颜色
	        'stroke-width': '3px', //线宽（例20px 或 10m）
	        'stroke-stipple-pattern': undefined, //点划线模式
	        'stroke-stipple-factor': undefined, //重绘点的数目
	        'line-extrusion': false, //是否连接地面
	        'extrusion-color': '#FFFFFFFF' //连接地面的线的颜色（extrusion-uniform为true是有效）
	    }
	});

	//FireEffect
	defaultData.properties.set(_TagsEnum2.default.FireEffect, {
	    className: 'GV.FireEffect',
	    position: {
	        type: 'Position',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    bindingObject: {
	        type: 'String',
	        default: undefined
	    },
	    style: {
	        'effect-size': 1 //设置大小
	    }
	});

	//ExplosionEffect
	defaultData.properties.set(_TagsEnum2.default.ExplosionEffect, {
	    className: 'GV.ExplosionEffect',
	    position: {
	        type: 'Position',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    bindingObject: {
	        type: 'String',
	        default: undefined
	    },
	    style: {
	        'effect-size': 1 //设置大小
	    }
	});

	//RainEffect
	defaultData.properties.set(_TagsEnum2.default.RainEffect, {
	    className: 'GV.RainEffect',
	    position: {
	        type: 'Position',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    bindingObject: {
	        type: 'String',
	        default: undefined
	    },
	    style: {
	        'effect-size': 1 //设置大小
	    }
	});

	//SmokeEffect
	defaultData.properties.set(_TagsEnum2.default.SmokeEffect, {
	    className: 'GV.SmokeEffect',
	    position: {
	        type: 'Position',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    bindingObject: {
	        type: 'String',
	        default: undefined
	    },
	    style: {
	        'effect-size': 1 //设置大小
	    }
	});

	//PointEffect
	defaultData.properties.set(_TagsEnum2.default.PointEffect, {
	    className: 'GV.PointEffect',
	    position: {
	        type: 'Position',
	        default: undefined
	    },
	    visible: {
	        type: 'Boolean',
	        default: true
	    },
	    bindingObject: {
	        type: 'String',
	        default: undefined
	    },
	    url: {
	        type: 'String',
	        default: undefined
	    },
	    style: {
	        'effect-size': 1, //设置大小
	        'effect-frequency': 1, //点特效频率，如旋转一轴需要的时间
	        'effect-duration': 100, //点特效次数
	        'effect-mode': _STYLEENUM2.default.POINT_EFFECT_MODE.FLICKER, //点特效模式
	        'effect-offset-x': 0,
	        'effect-offset-y': 0
	    }
	});

	exports.default = defaultData;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "DefaultProperties.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Plugin2 = __webpack_require__(132);

	var _Plugin3 = _interopRequireDefault(_Plugin2);

	var _ENUM = __webpack_require__(120);

	var _ENUM2 = _interopRequireDefault(_ENUM);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：Tool.js
	   * 作者：巩志远
	   * 部门：产品研发中心
	   * 邮箱：gongzy@geovis.com
	   * 日期：2017-03-03 21:41:38.
	   * 用途：工具类
	   */

	var Tool = function (_Plugin) {
	    _inherits(Tool, _Plugin);

	    function Tool(options) {
	        _classCallCheck(this, Tool);

	        var _this = _possibleConstructorReturn(this, (Tool.__proto__ || Object.getPrototypeOf(Tool)).call(this, options));

	        _this._type = _ENUM2.default.PLUGINTYPE.TOOL;
	        _this._isCurrentTool = false;
	        return _this;
	    }

	    _createClass(Tool, [{
	        key: 'type',
	        set: function set(type) {
	            this._type = _ENUM2.default.PLUGINTYPE.TOOL;
	        },
	        get: function get() {
	            return this._type;
	        }
	    }, {
	        key: 'isCurrentTool',
	        set: function set(isCurrentTool) {
	            this._isCurrentTool = isCurrentTool;
	        }

	        /**
	         * 该工具是否被选中
	         * @method isCurrentTool
	         */

	        , get: function get() {
	            return this._isCurrentTool;
	        }

	        /**
	         * 激活工具
	         * @param status {boolean} 状态
	         */

	    }, {
	        key: 'active',
	        set: function set() {
	            var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	            this._active = status;
	            if (typeof status === 'boolean' && status) {
	                if (this._manager) {
	                    this._manager._activeTool(this);
	                }
	            }
	        },
	        get: function get() {
	            return this._active;
	        }
	    }]);

	    return Tool;
	}(_Plugin3.default);

	exports.default = Tool;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Tool.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Event2 = __webpack_require__(51);

	var _Event3 = _interopRequireDefault(_Event2);

	var _Config = __webpack_require__(52);

	var _Config2 = _interopRequireDefault(_Config);

	var _Util = __webpack_require__(6);

	var _i18n = __webpack_require__(133);

	var _i18n2 = _interopRequireDefault(_i18n);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：Plugin.js
	   * 作者：巩志远
	   * 部门：产品研发中心
	   * 邮箱：gongzy@geovis.com
	   * 日期：2017-03-03 21:39:39.
	   * 用途：插件类
	   */

	var varRegExp = /\\?\{\{([^{}]+)\}\}/g;

	var Plugin = function (_Event) {
	    _inherits(Plugin, _Event);

	    function Plugin(params) {
	        _classCallCheck(this, Plugin);

	        var _this = _possibleConstructorReturn(this, (Plugin.__proto__ || Object.getPrototypeOf(Plugin)).call(this, params));

	        for (var key in params) {
	            if (params[key] && key !== 'uuid') {
	                _this[key] = params[key];
	            }
	        }
	        _this._loadLanguage();
	        return _this;
	    }

	    _createClass(Plugin, [{
	        key: '_loadLanguage',
	        value: function _loadLanguage() {
	            if (this.language) {
	                var lanProp = {
	                    path: this.url,
	                    name: this.language,
	                    mode: 'map',
	                    language: 'zh'
	                };
	                _i18n2.default.properties(lanProp);
	            }
	        }
	    }, {
	        key: '_loadLanguageCallback',
	        value: function _loadLanguageCallback() {
	            this._isLoadLanguageOk = true;
	        }
	    }, {
	        key: 'getValue',
	        value: function getValue(key) {
	            return _i18n2.default.prop(key);
	        }
	    }, {
	        key: '_init',
	        value: function _init() {
	            if (this.reference) {
	                this.reference();
	                var isLoad = false;
	                if (this.html) {
	                    this.loadHtml(this.html);
	                    isLoad = true;
	                }
	                if (this.css) {
	                    this.loadCss(this.css);
	                    isLoad = true;
	                }
	                if (this.script) {
	                    this.loadScript(this.script);
	                } else if (isLoad === true) {
	                    this.init();
	                }
	            } else {
	                this.init();
	            }
	        }
	    }, {
	        key: 'init',
	        value: function init() {}
	    }, {
	        key: '_remove',
	        value: function _remove() {
	            this.remove();
	            this._removeUI();
	        }
	    }, {
	        key: 'remove',
	        value: function remove() {}
	    }, {
	        key: 'loadCss',
	        value: function loadCss(urls) {
	            var _this2 = this;

	            if (typeof urls === 'string') urls = [urls];
	            var head = document.getElementsByTagName('head')[0];
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                var _loop = function _loop() {
	                    var url = _step.value;

	                    var link = document.createElement('link');
	                    link.type = 'text/css';
	                    link.rel = 'stylesheet';
	                    link.href = _this2.formatURL(url);
	                    var response = _Util.$.ajax({
	                        async: false,
	                        url: link.href
	                    });
	                    response.done(function () {
	                        head.appendChild(link);
	                        if (!_this2.link) {
	                            _this2.link = [];
	                        }
	                        _this2.link.push(link);
	                    });
	                    response.fail(function (msg) {
	                        console.error(msg);
	                    });
	                };

	                for (var _iterator = urls[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    _loop();
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'loadScript',
	        value: function loadScript(urls) {
	            var _this3 = this;

	            if (typeof urls === 'string') urls = [urls];
	            var head = document.getElementsByTagName('head')[0];
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                var _loop2 = function _loop2() {
	                    var url = _step2.value;

	                    var jsScript = document.createElement('script');
	                    jsScript.src = _this3.formatURL(url);
	                    head.appendChild(jsScript);
	                    jsScript.onload = function () {
	                        if (!_this3.scripts) _this3.scripts = [];
	                        _this3.scripts.push(jsScript);
	                        if (urls.length === _this3.scripts.length) _this3.init();
	                    };
	                };

	                for (var _iterator2 = urls[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    _loop2();
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'loadHtml',
	        value: function loadHtml(url) {
	            var _this4 = this;

	            if (url instanceof Array) {
	                url = url[0];
	                console.warn('暂不支持一个插件包含多个界面');
	            }
	            var htmlObj = _Util.$.ajax({
	                url: this.formatURL(url),
	                dataType: 'html',
	                async: false
	            });
	            var start = htmlObj.responseText.indexOf('<body>') + 6;
	            var end = htmlObj.responseText.indexOf('</body>');
	            if (start < 6 || start > end) return;
	            var htmlStr = htmlObj.responseText.substring(start, end);
	            htmlStr = htmlStr.replace(/src=".\/\S*"/g, function ($0) {
	                var fullUrl = _this4.formatURL($0.substring(5, $0.length - 1));
	                return 'src="' + fullUrl + '"';
	            });
	            htmlStr = htmlStr.replace(/url\(('|"){0,1}.\/\S*('|"){0,1}\)/g, function ($0) {
	                if (/^url\(('|")/.test($0)) return 'url(' + _this4.formatURL($0.substring(5, $0.length - 2)) + ')';
	                return 'url(' + _this4.formatURL($0.substring(4, $0.length - 1)) + ')';
	            });
	            if (htmlStr) {
	                htmlStr = this._formatMessage(htmlStr);
	                var parseHTML = _Util.$.parseHTML(htmlStr, true);
	                var _iteratorNormalCompletion3 = true;
	                var _didIteratorError3 = false;
	                var _iteratorError3 = undefined;

	                try {
	                    for (var _iterator3 = parseHTML[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                        var preHTML = _step3.value;

	                        if ((0, _Util.$)(preHTML).attr('src')) {
	                            (0, _Util.$)(preHTML).attr('src', this.formatURL((0, _Util.$)(preHTML).attr('src')));
	                        } else if ((0, _Util.$)(preHTML).attr('href')) {
	                            (0, _Util.$)(preHTML).attr('href', this.formatURL((0, _Util.$)(preHTML).attr('href')));
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError3 = true;
	                    _iteratorError3 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                            _iterator3.return();
	                        }
	                    } finally {
	                        if (_didIteratorError3) {
	                            throw _iteratorError3;
	                        }
	                    }
	                }

	                (0, _Util.$)(this.container).append(parseHTML);
	            }
	        }
	    }, {
	        key: '_formatMessage',
	        value: function _formatMessage(bodyStr) {
	            var _this5 = this;

	            return bodyStr.replace(varRegExp, function (match, name) {
	                return _this5.getValue(name.replace(/(^\s*)|(\s*$)/g, ''));
	            });
	        }
	    }, {
	        key: '_removeUI',
	        value: function _removeUI() {
	            // alert(this.container.id);
	            if (this.container) {
	                var childs = this.container.childNodes;
	                while (childs.length > 0) {
	                    this.container.removeChild(childs[childs.length - 1]);
	                }
	            }
	            var head = document.getElementsByTagName('head')[0];
	            for (var i in this.link) {
	                if (this.link[i]) head.removeChild(this.link[i]);
	            }
	            this.link = [];
	            for (var j in this.scripts) {
	                if (this.scripts[j]) head.removeChild(this.scripts[j]);
	            }
	            this.scripts = [];
	        }
	    }, {
	        key: 'formatURL',
	        value: function formatURL(file) {
	            // 没有比较就没有相对路径, 自己定义的路径认为绝对路径
	            if (!this.url || this.url === null) return file;
	            var tempUrl = file.split('/');
	            var base = this.url.split('/');
	            // 去掉末尾的‘/’
	            if (base[base.length - 1] === '') base.pop();
	            var res = '';
	            for (var i = 0; i < tempUrl.length; i += 1) {
	                if (i === 0 && tempUrl[i] === '.') i += 1;
	                if (tempUrl[i] === '..') {
	                    base.pop();
	                } else {
	                    base.push(tempUrl[i]);
	                }
	            }
	            for (var _i = 0; _i < base.length; _i += 1) {
	                var sp = _i === base.length - 1 ? '' : '/';
	                res += base[_i] + sp;
	            }
	            return res;
	        }
	    }, {
	        key: 'formatHostURL',
	        value: function formatHostURL(file) {
	            return window.location.origin ? window.location.origin + this.formatURL(file) : this.formatURL(file);
	        }
	    }, {
	        key: 'display',
	        value: function display(isshow) {
	            if (isshow === false) {
	                this.container.style.display = 'none';
	            } else {
	                var id = this.container.id;
	                (0, _Util.$)('#' + id).attr('style', '');
	            }
	        }
	    }, {
	        key: 'type',
	        get: function get() {
	            return this.type;
	        }
	    }, {
	        key: 'key',
	        get: function get() {
	            return this.name;
	        }
	    }, {
	        key: 'transition',
	        set: function set(isTrans) {
	            if (isTrans === true) {
	                this.container.className = 'transition_left';
	            }
	            this._transition = isTrans;
	        },
	        get: function get() {
	            if (this._transition) return this._transition;
	            return false;
	        }
	    }, {
	        key: 'setting',
	        get: function get() {
	            // let param = '';
	            // let setURL = '';
	            // if (this.earth && this.earth.plugincenter) {
	            //     param += this.earth.plugincenter.split('?')[1];
	            //     param += `&plugin=${this.name}`;
	            //     setURL = `${Config.Center.PluginCenter.getPluginSetting}${param === '' ? '' : `?${param}`}`;
	            // } else {
	            //     setURL = `${this.url}setting.json`;
	            // }
	            var setURL = this.url + 'setting.json';
	            var response = _Util.$.ajax({
	                async: false,
	                url: setURL
	            });
	            if (/^Cannot/.test(response.responseText) === true) return undefined;else if (response.responseText === '') return undefined;
	            try {
	                JSON.parse(response.responseText);
	            } catch (e) {
	                return undefined;
	            }
	            return JSON.parse(response.responseText)[this.name] ? JSON.parse(response.responseText)[this.name] : JSON.parse(response.responseText);
	        }
	    }]);

	    return Plugin;
	}(_Event3.default);

	exports.default = Plugin;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Plugin.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gv5_gvml
	 * 文件：i18n.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2017-05-22 16:12:40.
	 * 用途：类
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var i18n = {};

	/** Map holding bundle keys (if mode: 'map') */
	i18n.map = {};

	var debug = function debug(message) {
	    console.log('i18n::' + message);
	};

	/**
	 * Load and parse message bundle files (.properties),
	 * making bundles keys available as javascript variables.
	 *
	 * i18n files are named <name>.js, or <name>_<language>.js or <name>_<language>_<country>.js
	 * Where:
	 *      The <language> argument is a valid ISO Language Code. These codes are the lower-case,
	 *      two-letter codes as defined by ISO-639. You can find a full list of these codes at a
	 *      number of sites, such as: http://www.loc.gov/standards/iso639-2/englangn.html
	 *      The <country> argument is a valid ISO Country Code. These codes are the upper-case,
	 *      two-letter codes as defined by ISO-3166. You can find a full list of these codes at a
	 *      number of sites, such as: http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html
	 *
	 * Sample usage for a bundles/Messages.properties bundle:
	 * i18n.properties({
	     *      name:      'Messages',
	     *      language:  'en_US',
	     *      path:      'bundles'
	     * });
	 * @param  name      (string/string[], optional) names of file to load (eg, 'Messages' or ['Msg1','Msg2']). Defaults to "Messages"
	 * @param  language    (string, optional) language/country code (eg, 'en', 'en_US', 'pt_BR'). if not specified, language reported by the browser will be used instead.
	 * @param  path      (string, optional) path of directory that contains file to load
	 * @param  mode      (string, optional) whether bundles keys are available as JavaScript variables/functions or as a map (eg, 'vars' or 'map')
	 * @param  debug     (boolean, optional) whether debug statements are logged at the console
	 * @param  cache        (boolean, optional) whether bundles should be cached by the browser, or forcibly reloaded on each page load. Defaults to false (i.e. forcibly reloaded)
	 * @param  encoding  (string, optional) the encoding to request for bundles. Property file resource bundles are specified to be in ISO-8859-1 format. Defaults to UTF-8 for backward compatibility.
	 * @param  callback     (function, optional) callback function to be called after script is terminated
	 */
	i18n.properties = function (settings) {

	    var defaults = {
	        name: 'Messages',
	        language: '',
	        path: '',
	        mode: 'vars',
	        cache: false,
	        debug: false,
	        encoding: 'UTF-8',
	        async: false,
	        callback: null
	    };
	    settings = $.extend(defaults, settings);

	    // Ensure a trailing slash
	    if (!settings.path.match(/\/$/)) settings.path += '/';

	    // Try to ensure that we have at a least a two letter language code
	    settings.language = this.normaliseLanguageCode(settings.language);

	    // Ensure an array
	    var files = settings.name && settings.name.constructor === Array ? settings.name : [settings.name];

	    // A locale is at least a language code which means at least two files per name. If
	    // we also have a country code, thats an extra file per name.
	    settings.totalFiles = files.length * 2 + (settings.language.length >= 5 ? files.length : 0);
	    if (settings.debug) {
	        debug('totalFiles: ' + settings.totalFiles);
	    }

	    settings.filesLoaded = 0;

	    files.forEach(function (file) {

	        var defaultFileName, shortFileName, longFileName;
	        // 1. load base (eg, Messages.properties)
	        defaultFileName = settings.path + file + '.properties';
	        // 2. with language code (eg, Messages_pt.properties)
	        var shortCode = settings.language.substring(0, 2);
	        shortFileName = settings.path + file + '_' + shortCode + '.properties';
	        // 3. with language code and country code (eg, Messages_pt_BR.properties)
	        if (settings.language.length >= 5) {
	            var longCode = settings.language.substring(0, 5);
	            longFileName = settings.path + file + '_' + longCode + '.properties';
	        }
	        loadAndParseFiles([defaultFileName, shortFileName, longFileName], settings);
	    });

	    // call callback
	    if (settings.callback && !settings.async) {
	        settings.callback();
	    }
	}; // properties

	/**
	 * When configured with mode: 'map', allows access to bundle values by specifying its key.
	 * Eg, jQuery.i18n.prop('com.company.bundles.menu_add')
	 */
	i18n.prop = function (key /* Add parameters as function arguments as necessary  */) {

	    var value = i18n.map[key];
	    if (value === null) {
	        return '[' + key + ']';
	    }
	    if (typeof value === 'undefined') {
	        return key;
	    }

	    var phvList;
	    if (arguments.length == 2 && $.isArray(arguments[1])) {
	        // An array was passed as the only parameter, so assume it is the list of place holder values.
	        phvList = arguments[1];
	    }

	    // Place holder replacement
	    /**
	     * Tested with:
	     *   test.t1=asdf ''{0}''
	     *   test.t2=asdf '{0}' '{1}'{1}'zxcv
	     *   test.t3=This is \"a quote" 'a''{0}''s'd{fgh{ij'
	        *   test.t4="'''{'0}''" {0}{a}
	        *   test.t5="'''{0}'''" {1}
	        *   test.t6=a {1} b {0} c
	        *   test.t7=a 'quoted \\ s\ttringy' \t\t x
	        *
	        * Produces:
	        *   test.t1, p1 ==> asdf 'p1'
	        *   test.t2, p1 ==> asdf {0} {1}{1}zxcv
	        *   test.t3, p1 ==> This is "a quote" a'{0}'sd{fgh{ij
	        *   test.t4, p1 ==> "'{0}'" p1{a}
	        *   test.t5, p1 ==> "'{0}'" {1}
	        *   test.t6, p1 ==> a {1} b p1 c
	        *   test.t6, p1, p2 ==> a p2 b p1 c
	        *   test.t6, p1, p2, p3 ==> a p2 b p1 c
	        *   test.t7 ==> a quoted \ s	tringy 		 x
	        */

	    var i;
	    if (typeof value == 'string') {
	        // Handle escape characters. Done separately from the tokenizing loop below because escape characters are
	        // active in quoted strings.
	        i = 0;
	        while ((i = value.indexOf('\\', i)) != -1) {
	            if (value.charAt(i + 1) == 't') {
	                value = value.substring(0, i) + '\t' + value.substring(i++ + 2); // tab
	            } else if (value.charAt(i + 1) == 'r') {
	                value = value.substring(0, i) + '\r' + value.substring(i++ + 2); // return
	            } else if (value.charAt(i + 1) == 'n') {
	                value = value.substring(0, i) + '\n' + value.substring(i++ + 2); // line feed
	            } else if (value.charAt(i + 1) == 'f') {
	                value = value.substring(0, i) + '\f' + value.substring(i++ + 2); // form feed
	            } else if (value.charAt(i + 1) == '\\') {
	                value = value.substring(0, i) + '\\' + value.substring(i++ + 2); // \
	            } else {
	                value = value.substring(0, i) + value.substring(i + 1); // Quietly drop the character
	            }
	        }

	        // Lazily convert the string to a list of tokens.
	        var arr = [],
	            j,
	            index;
	        i = 0;
	        while (i < value.length) {
	            if (value.charAt(i) == '\'') {
	                // Handle quotes
	                if (i == value.length - 1) {
	                    value = value.substring(0, i); // Silently drop the trailing quote
	                } else if (value.charAt(i + 1) == '\'') {
	                    value = value.substring(0, i) + value.substring(++i); // Escaped quote
	                } else {
	                    // Quoted string
	                    j = i + 2;
	                    while ((j = value.indexOf('\'', j)) != -1) {
	                        if (j == value.length - 1 || value.charAt(j + 1) != '\'') {
	                            // Found start and end quotes. Remove them
	                            value = value.substring(0, i) + value.substring(i + 1, j) + value.substring(j + 1);
	                            i = j - 1;
	                            break;
	                        } else {
	                            // Found a double quote, reduce to a single quote.
	                            value = value.substring(0, j) + value.substring(++j);
	                        }
	                    }

	                    if (j == -1) {
	                        // There is no end quote. Drop the start quote
	                        value = value.substring(0, i) + value.substring(i + 1);
	                    }
	                }
	            } else if (value.charAt(i) == '{') {
	                // Beginning of an unquoted place holder.
	                j = value.indexOf('}', i + 1);
	                if (j == -1) {
	                    i++; // No end. Process the rest of the line. Java would throw an exception
	                } else {
	                    // Add 1 to the index so that it aligns with the function arguments.
	                    index = parseInt(value.substring(i + 1, j));
	                    if (!isNaN(index) && index >= 0) {
	                        // Put the line thus far (if it isn't empty) into the array
	                        var s = value.substring(0, i);
	                        if (s !== "") {
	                            arr.push(s);
	                        }
	                        // Put the parameter reference into the array
	                        arr.push(index);
	                        // Start the processing over again starting from the rest of the line.
	                        i = 0;
	                        value = value.substring(j + 1);
	                    } else {
	                        i = j + 1; // Invalid parameter. Leave as is.
	                    }
	                }
	            } else {
	                i++;
	            }
	        } // while

	        // Put the remainder of the no-empty line into the array.
	        if (value !== "") {
	            arr.push(value);
	        }
	        value = arr;

	        // Make the array the value for the entry.
	        i18n.map[key] = arr;
	    }

	    if (value.length === 0) {
	        return "";
	    }
	    if (value.length == 1 && typeof value[0] == "string") {
	        return value[0];
	    }

	    var str = "";
	    for (i = 0, j = value.length; i < j; i++) {
	        if (typeof value[i] == "string") {
	            str += value[i];
	        } else if (phvList && value[i] < phvList.length) {
	            // Must be a number
	            str += phvList[value[i]];
	        } else if (!phvList && value[i] + 1 < arguments.length) {
	            str += arguments[value[i] + 1];
	        } else {
	            str += "{" + value[i] + "}";
	        }
	    }

	    return str;
	};

	function callbackIfComplete(settings) {

	    if (settings.debug) {
	        debug('callbackIfComplete()');
	        debug('totalFiles: ' + settings.totalFiles);
	        debug('filesLoaded: ' + settings.filesLoaded);
	    }

	    if (settings.async) {
	        if (settings.filesLoaded === settings.totalFiles) {
	            if (settings.callback) {
	                settings.callback();
	            }
	        }
	    }
	}

	function loadAndParseFiles(filenames, settings) {

	    if (settings.debug) debug('loadAndParseFiles');

	    if (filenames !== null && filenames.length > 0) {
	        loadAndParseFile(filenames[0], settings, function () {
	            filenames.shift();
	            loadAndParseFiles(filenames, settings);
	        });
	    } else {
	        callbackIfComplete(settings);
	    }
	}

	/** Load and parse .properties files */
	function loadAndParseFile(filename, settings, nextFile) {

	    if (settings.debug) {
	        debug('loadAndParseFile(\'' + filename + '\')');
	        debug('totalFiles: ' + settings.totalFiles);
	        debug('filesLoaded: ' + settings.filesLoaded);
	    }

	    if (filename !== null && typeof filename !== 'undefined') {
	        $.ajax({
	            url: filename,
	            async: settings.async,
	            cache: settings.cache,
	            dataType: 'text',
	            success: function success(data, status) {

	                if (settings.debug) {
	                    debug('Succeeded in downloading ' + filename + '.');
	                    debug(data);
	                }

	                parseData(data, settings);
	                nextFile();
	            },
	            error: function error(jqXHR, textStatus, errorThrown) {

	                if (settings.debug) {
	                    debug('Failed to download or parse ' + filename + '. errorThrown: ' + errorThrown);
	                }
	                if (jqXHR.status === 404) {
	                    settings.totalFiles -= 1;
	                }
	                nextFile();
	            }
	        });
	    }
	}

	/** Parse .properties files */
	function parseData(data, settings) {

	    var parsed = '';
	    var lines = data.split(/\n/);
	    var regPlaceHolder = /(\{\d+})/g;
	    var regRepPlaceHolder = /\{(\d+)}/g;
	    var unicodeRE = /(\\u.{4})/ig;
	    lines.forEach(function (line, i) {

	        line = line.trim();
	        if (line.length > 0 && line.match("^#") != "#") {
	            // skip comments
	            var pair = line.split('=');
	            if (pair.length > 0) {
	                /** Process key & value */
	                var name = decodeURI(pair[0]).trim();
	                var value = pair.length == 1 ? "" : pair[1];
	                // process multi-line values
	                while (value.match(/\\$/) === "\\") {
	                    value = value.substring(0, value.length - 1);
	                    value += lines[++i].trimRight();
	                }
	                // Put values with embedded '='s back together
	                for (var s = 2; s < pair.length; s++) {
	                    value += '=' + pair[s];
	                }
	                value = value.trim();

	                /** Mode: bundle keys in a map */
	                if (settings.mode == 'map' || settings.mode == 'both') {
	                    // handle unicode chars possibly left out
	                    var unicodeMatches = value.match(unicodeRE);
	                    if (unicodeMatches) {
	                        unicodeMatches.forEach(function (match) {
	                            value = value.replace(match, unescapeUnicode(match));
	                        });
	                    }
	                    // add to map
	                    i18n.map[name] = value;
	                }

	                /** Mode: bundle keys as vars/functions */
	                if (settings.mode == 'vars' || settings.mode == 'both') {
	                    value = value.replace(/"/g, '\\"'); // escape quotation mark (")

	                    // make sure namespaced key exists (eg, 'some.key')
	                    checkKeyNamespace(name);

	                    // value with variable substitutions
	                    if (regPlaceHolder.test(value)) {
	                        var parts = value.split(regPlaceHolder);
	                        // process function args
	                        var first = true;
	                        var fnArgs = '';
	                        var usedArgs = [];
	                        parts.forEach(function (part) {

	                            if (regPlaceHolder.test(part) && (usedArgs.length === 0 || usedArgs.indexOf(part) == -1)) {
	                                if (!first) {
	                                    fnArgs += ',';
	                                }
	                                fnArgs += part.replace(regRepPlaceHolder, 'v$1');
	                                usedArgs.push(part);
	                                first = false;
	                            }
	                        });
	                        parsed += name + '=function(' + fnArgs + '){';
	                        // process function body
	                        var fnExpr = '"' + value.replace(regRepPlaceHolder, '"+v$1+"') + '"';
	                        parsed += 'return ' + fnExpr + ';' + '};';
	                        // simple value
	                    } else {
	                        parsed += name + '="' + value + '";';
	                    }
	                } // END: Mode: bundle keys as vars/functions
	            } // END: if(pair.length > 0)
	        } // END: skip comments
	    });
	    eval(parsed);
	    settings.filesLoaded += 1;
	}

	/** Make sure namespace exists (for keys with dots in name) */
	// TODO key parts that start with numbers quietly fail. i.e. month.short.1=Jan
	function checkKeyNamespace(key) {

	    var regDot = /\./;
	    if (regDot.test(key)) {
	        var fullname = '';
	        var names = key.split(/\./);
	        names.forEach(function (name, i) {

	            if (i > 0) {
	                fullname += '.';
	            }
	            fullname += name;
	            if (eval('typeof ' + fullname + ' == "undefined"')) {
	                eval(fullname + '={};');
	            }
	        });
	    }
	}

	/** Ensure language code is in the format aa_AA. */
	i18n.normaliseLanguageCode = function (lang) {

	    if (!lang || lang.length < 2) {
	        lang = navigator.languages ? navigator.languages[0] : navigator.language || navigator.userLanguage /* IE */ || 'en';
	    }

	    lang = lang.toLowerCase();
	    lang = lang.replace(/-/, "_"); // some browsers report language as en-US instead of en_US
	    if (lang.length > 3) {
	        lang = lang.substring(0, 3) + lang.substring(3).toUpperCase();
	    }
	    return lang;
	};

	/** Unescape unicode chars ('\u00e3') */
	function unescapeUnicode(str) {

	    // unescape unicode codes
	    var codes = [];
	    var code = parseInt(str.substr(2), 16);
	    if (code >= 0 && code < Math.pow(2, 16)) {
	        codes.push(code);
	    }
	    // convert codes to text
	    return codes.reduce(function (acc, val) {
	        return acc + String.fromCharCode(val);
	    }, '');
	}
	exports.default = i18n;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "i18n.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Plugin2 = __webpack_require__(132);

	var _Plugin3 = _interopRequireDefault(_Plugin2);

	var _ENUM = __webpack_require__(120);

	var _ENUM2 = _interopRequireDefault(_ENUM);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：Widget.js
	   * 作者：巩志远
	   * 部门：产品研发中心
	   * 邮箱：gongzy@geovis.com
	   * 日期：2017-03-03 21:40:53.
	   * 用途：挂件类
	   */

	var Widget = function (_Plugin) {
	    _inherits(Widget, _Plugin);

	    function Widget(options) {
	        _classCallCheck(this, Widget);

	        var _this = _possibleConstructorReturn(this, (Widget.__proto__ || Object.getPrototypeOf(Widget)).call(this, options));

	        _this._type = _ENUM2.default.PLUGINTYPE.WIDGET;
	        _this._isUsing = false;
	        return _this;
	    }

	    _createClass(Widget, [{
	        key: 'type',
	        set: function set(type) {
	            this._type = _ENUM2.default.PLUGINTYPE.WIDGET;
	        },
	        get: function get() {
	            return this._type;
	        }
	    }, {
	        key: 'isUsing',
	        set: function set(isusing) {
	            this._isUsing = isusing;
	        },
	        get: function get() {
	            return this._isUsing;
	        }

	        // 与c++插件关联

	    }, {
	        key: 'registerName',
	        set: function set(registerName) {
	            this._registerName = registerName;
	            if (this.earth && this._registerName) {
	                // this.earth._usingWidget(this._registerName, this);
	            }
	        }
	    }]);

	    return Widget;
	}(_Plugin3.default);

	exports.default = Widget;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Widget.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：SatelliteScene.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2018-01-29 15:41:05
	 * 用途：卫星场景类
	 */

	'use strict';

	/**
	 * @module scene
	 */

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Scene2 = __webpack_require__(60);

	var _Scene3 = _interopRequireDefault(_Scene2);

	var _Satellite = __webpack_require__(136);

	var _Satellite2 = _interopRequireDefault(_Satellite);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _Styles = __webpack_require__(40);

	var _Styles2 = _interopRequireDefault(_Styles);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	var _WarnException = __webpack_require__(12);

	var warn = _interopRequireWildcard(_WarnException);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 卫星场景类
	 * @namespace GV
	 * @class SatelliteScene
	 * @extends GV.Scene
	 */
	var SatelliteScene = function (_Scene) {
	    _inherits(SatelliteScene, _Scene);

	    function SatelliteScene(paramJson) {
	        _classCallCheck(this, SatelliteScene);

	        var _this = _possibleConstructorReturn(this, (SatelliteScene.__proto__ || Object.getPrototypeOf(SatelliteScene)).call(this, paramJson));

	        if (!_this.library) _this._library = [];
	        _this.library = 'GVSatellite';
	        return _this;
	    }

	    _createClass(SatelliteScene, [{
	        key: 'addSatellite',
	        value: function addSatellite(satellite) {
	            if (satellite instanceof _Satellite2.default) {
	                this.postMessage(_MessageSet2.default.SatelliteScene.addSatellite, satellite.toXml());
	                satellite.setMap(this.map, this);
	                return satellite;
	            }
	            return undefined;
	        }
	    }, {
	        key: 'removeSatellite',
	        value: function removeSatellite(satellite) {
	            var isSend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	            if (!satellite) return;

	            if (isSend) {
	                this.postMessage(_MessageSet2.default.SatelliteScene.removeSatellite, satellite.id);
	            }
	        }
	    }, {
	        key: 'updatePropertyOfSatellite',
	        value: function updatePropertyOfSatellite(property) {
	            this.postMessage(_MessageSet2.default.SatelliteScene.updateProperty, property);
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var strLibraries = '';
	            var libraries = this.library;
	            if (libraries) {
	                for (var i = 0; i < libraries.length; i++) {
	                    strLibraries = strLibraries + libraries[i];
	                    if (i !== libraries.length - 1) strLibraries = strLibraries + ',';
	                }
	            }
	            return _get(SatelliteScene.prototype.__proto__ || Object.getPrototypeOf(SatelliteScene.prototype), '_toXml', this).call(this, '<library>' + strLibraries + '</library><visible>' + this.visible + '</visible><optimized>false</optimized>'); //<optimized>false</optimized>
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.SatelliteScene;
	        }

	        /**
	         * 样式
	         * @property styles
	         * @type {object}
	         */

	    }, {
	        key: 'styles',
	        set: function set(styles) {
	            if (this._styles !== undefined) return;
	            if ((typeof styles === 'undefined' ? 'undefined' : _typeof(styles)) !== 'object') return;
	            if (styles instanceof _Styles2.default) {
	                this._styles = styles;
	            } else {
	                this._styles = new _Styles2.default(styles);
	            }
	        },
	        get: function get() {
	            return this._styles === undefined ? '' : this._styles;
	        }
	    }]);

	    return SatelliteScene;
	}(_Scene3.default);

	exports.default = SatelliteScene;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "SatelliteScene.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Satellite.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2018-01-30 10:32:05.
	 * 用途：卫星类
	 */

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Style = __webpack_require__(62);

	var _Style2 = _interopRequireDefault(_Style);

	var _SatellitePoint = __webpack_require__(137);

	var _SatellitePoint2 = _interopRequireDefault(_SatellitePoint);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _SatelliteTrack = __webpack_require__(139);

	var _SatelliteTrack2 = _interopRequireDefault(_SatelliteTrack);

	var _SatelliteSensor = __webpack_require__(140);

	var _SatelliteSensor2 = _interopRequireDefault(_SatelliteSensor);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _Node2 = __webpack_require__(61);

	var _Node3 = _interopRequireDefault(_Node2);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 卫星类
	 * @module Node
	 * @namespace GV
	 * @extends GV.Node
	 * @class Satellite
	 * @abstract
	 */
	var Satellite = function (_Node) {
	    _inherits(Satellite, _Node);

	    function Satellite(param) {
	        _classCallCheck(this, Satellite);

	        // this.setMap(map);
	        var _this = _possibleConstructorReturn(this, (Satellite.__proto__ || Object.getPrototypeOf(Satellite)).call(this, param));

	        _this._uuid = _this._uuid || Util.createGuid();
	        return _this;
	    }

	    _createClass(Satellite, [{
	        key: 'getLayersName',

	        /**
	         * 获取卫星位置
	         * @method getSatelliteLocation
	         * @param {Function} fun  
	         */
	        value: function getLayersName(fun) {}
	        //TODO


	        /**
	         * TODO
	         * @method getAtoAllVertices
	         * @param {Function} fun  
	         */

	    }, {
	        key: 'getAtoAllVertices',
	        value: function getAtoAllVertices(fun) {
	            //TODO
	        }
	    }, {
	        key: '_toXml',
	        value: function _toXml() {
	            var innerXML = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

	            if (!this._getproperties) {
	                this._getproperties = Util.__getGetterProperties(this);
	            }
	            for (var i = 0; i < this._getproperties.length; i++) {
	                var prikey = this._getproperties[i];
	                if (this['_' + prikey] !== undefined) {
	                    var xml = '';
	                    //sensorList(array)
	                    if (this['_' + prikey] instanceof Array) {
	                        var xmlSensor = '';
	                        for (var key in this['_' + prikey]) {
	                            if (this['_' + prikey][key] instanceof _SatelliteSensor2.default) {
	                                xmlSensor += this['_' + prikey][key].toXml();
	                            }
	                        }
	                        innerXML += '<sensor_list>' + xmlSensor + '</sensor_list>';
	                    } else if (this['_' + prikey] instanceof _SatelliteTrack2.default) {
	                        xml += this['_' + prikey].toXml();
	                        innerXML += xml;
	                    } else if (this['_' + prikey] instanceof _SatellitePoint2.default) {
	                        xml += this['_' + prikey].toXml();
	                        innerXML += xml;
	                    } else {
	                        innerXML += Util._propertyToXml(prikey, this[prikey]);
	                    }
	                }
	            }
	            return Util.replaceXmlSpace('<' + this.tag + '><uuid>' + this.id + '</uuid>' + innerXML + '</' + this.tag + '>');
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var innerXML = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

	            return this._toXml(innerXML);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.satellite;
	        }
	    }, {
	        key: 'id',
	        get: function get() {
	            return this._uuid = this._uuid || Util.createGuid();
	        }

	        /**
	         * satellitePoint
	         * @property satellitePoint
	         * @param {string} icon 
	         * @param {string} visible
	         * @param {object} style
	         */

	    }, {
	        key: 'satellitePoint',
	        set: function set(value) {
	            if (this._satellitePoint !== undefined) return;
	            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') return;
	            if (value instanceof _SatellitePoint2.default) {
	                this._satellitePoint = value;
	            } else {
	                this._satellitePoint = new _SatellitePoint2.default(this, value);
	            }
	        },
	        get: function get() {
	            return this._satellitePoint === undefined ? '' : this._satellitePoint;
	        }

	        /**
	         * trackLine
	         * @property trackLine
	         * @param {object} pse 
	         * @param {object} style
	         * @param {boolean} visible
	         */

	    }, {
	        key: 'trackLine',
	        set: function set(value) {
	            if (this._trackLine !== undefined) return;
	            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') return;
	            if (value instanceof _SatelliteTrack2.default) {
	                this._trackLine = value;
	            } else {
	                this._trackLine = new _SatelliteTrack2.default(this, value);
	            }
	        },
	        get: function get() {
	            return this._trackLine === undefined ? '' : this._trackLine;
	        }

	        /**
	         * trackLine
	         * @property trackLine
	         * @param {object} pse 
	         * @param {object} style
	         * @param {boolean} visible
	         */

	    }, {
	        key: 'sensorList',
	        set: function set(sensors) {
	            this._sensorList = [];
	            if (!(sensors instanceof Array)) {
	                var temp = sensors;
	                sensors = [];
	                sensors.push(temp);
	            }
	            for (var key in sensors) {
	                if (sensors[key] instanceof _SatelliteSensor2.default) {
	                    this._sensorList.push(sensors[key]);
	                } else {
	                    var sensor = new _SatelliteSensor2.default(this, sensors[key]);
	                    this._sensorList.push(sensor);
	                }
	            }
	        },
	        get: function get() {
	            return this._sensorList === undefined ? '' : this._sensorList;
	        }
	    }]);

	    return Satellite;
	}(_Node3.default);

	exports.default = Satellite;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Satellite.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：SatelliteBase.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2017-03-22 15:14:16
	 * 用途：卫星点属性类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _SatelliteBase2 = __webpack_require__(138);

	var _SatelliteBase3 = _interopRequireDefault(_SatelliteBase2);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _Node = __webpack_require__(61);

	var _Node2 = _interopRequireDefault(_Node);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 卫星类基类
	 * @module SatelliteBase
	 * @namespace GV
	 * @class SatelliteBase
	 */
	var SatellitePoint = function (_SatelliteBase) {
	    _inherits(SatellitePoint, _SatelliteBase);

	    function SatellitePoint(parent, param) {
	        _classCallCheck(this, SatellitePoint);

	        var _this = _possibleConstructorReturn(this, (SatellitePoint.__proto__ || Object.getPrototypeOf(SatellitePoint)).call(this, parent, param));

	        _this._uuid = _this._uuid || Util.createGuid();
	        return _this;
	    }

	    _createClass(SatellitePoint, [{
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '';

	            if (!this._properties) this._properties = Util.__getSetterProperties(this);
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this._properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var key = _step.value;

	                    if (this['_' + key] === undefined) continue;
	                    xml = xml + Util._propertyToXml(key, this[key]);
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            if (xml === '') return '';
	            return '<' + this.tag + '>' + xml + '</' + this.tag + '>';
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return 'satellite_point';
	        }

	        /**
	         * 卫星图标
	         * @property icon
	         * @type string
	         * @default 
	         */

	    }, {
	        key: 'icon',
	        set: function set(value) {
	            this._icon = value;
	        },
	        get: function get() {
	            return this._icon;
	        }
	    }]);

	    return SatellitePoint;
	}(_SatelliteBase3.default);

	exports.default = SatellitePoint;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "SatellitePoint.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：SatelliteBase.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2017-03-22 15:14:16
	 * 用途：卫星属性基类
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Style = __webpack_require__(62);

	var _Style2 = _interopRequireDefault(_Style);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	/**
	 * 卫星属性基类
	 * @module SatelliteBase
	 * @namespace GV
	 * @class SatelliteBase
	 */
	var SatelliteBase = function () {
	    function SatelliteBase(parent, param) {
	        _classCallCheck(this, SatelliteBase);

	        this._parent = parent;
	        this._parseJson(param);
	    }

	    _createClass(SatelliteBase, [{
	        key: '_updateProperty',
	        value: function _updateProperty(type) {
	            var props = {};
	            props[type] = this[type];
	            if (this._post === true || this._post === undefined) {
	                if (this.tag === 'sensor') props['uuid'] = this.id;
	                var xml = Util._propertyToXml(this.tag, props);
	                this._parent.postMessage(_MessageSet2.default.Node.updateProperty, xml);
	            }
	        }
	    }, {
	        key: '_parseJson',
	        value: function _parseJson(options) {
	            var post = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	            if (post === false) {
	                this._post = false;
	            }

	            if (!this._setproperties) {
	                this._setproperties = Util.__getSetterProperties(this);
	            }
	            for (var key in options) {
	                var tempKey = Util.a_aToaA(key);
	                if (this._setproperties.indexOf(tempKey) < 0) continue;
	                this[tempKey] = options[key]; // 私有化
	            }
	            this._post = true;
	        }
	    }, {
	        key: 'visible',
	        set: function set() {
	            var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	            this._visible = visible;
	            this._updateProperty('visible');
	        },
	        get: function get() {
	            return this._visible;
	        }
	    }, {
	        key: 'name',
	        set: function set(value) {
	            this._name = value;
	        },
	        get: function get() {
	            return this._name;
	        }

	        /**
	         * 实体样式
	         * @property style
	         * @type GV.Style
	         */

	    }, {
	        key: 'style',
	        set: function set(style) {
	            this._style = new _Style2.default(style, this);
	        },
	        get: function get() {
	            return this._style;
	        }
	    }]);

	    return SatelliteBase;
	}();

	exports.default = SatelliteBase;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "SatelliteBase.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：SatelliteTrack.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-06-09 10:32:05.
	 * 用途：卫星轨迹类
	 */

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _SatelliteBase2 = __webpack_require__(138);

	var _SatelliteBase3 = _interopRequireDefault(_SatelliteBase2);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 卫星轨道类
	 * @module SatelliteTrack
	 * @namespace GV
	 * @extends GV.Node
	 * @class SatelliteTrack
	 * @abstract
	 */
	var SatelliteTrack = function (_SatelliteBase) {
	    _inherits(SatelliteTrack, _SatelliteBase);

	    function SatelliteTrack(parent, param) {
	        _classCallCheck(this, SatelliteTrack);

	        var _this = _possibleConstructorReturn(this, (SatelliteTrack.__proto__ || Object.getPrototypeOf(SatelliteTrack)).call(this, parent, param));

	        _this._uuid = _this._uuid || Util.createGuid();
	        return _this;
	    }

	    _createClass(SatelliteTrack, [{
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '';

	            if (!this._properties) this._properties = Util.__getSetterProperties(this);
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this._properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var key = _step.value;

	                    if (this['_' + key] === undefined) continue;
	                    xml = xml + Util._propertyToXml(key, this[key]);
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            if (xml === '') return '';
	            return '<' + this.tag + '>' + xml + '</' + this.tag + '>';
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return 'track_line';
	        }

	        /**
	         * pse
	         * @property pse
	         * @param {string} psetime 
	         * @param {double} a 
	         * @param {double} e 
	         * @param {double} i 
	         * @param {double} omg 
	         * @param {double} w 
	         */

	    }, {
	        key: 'pse',
	        set: function set(value) {
	            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') return;
	            this._pse = value;
	        },
	        get: function get() {
	            return this._pse === undefined ? '' : this._pse;
	        }
	    }]);

	    return SatelliteTrack;
	}(_SatelliteBase3.default);

	exports.default = SatelliteTrack;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "SatelliteTrack.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：SatelliteSensor.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-06-09 10:32:05.
	 * 用途：卫星传感器类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _SatelliteBase2 = __webpack_require__(138);

	var _SatelliteBase3 = _interopRequireDefault(_SatelliteBase2);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 卫星传感器类
	 * @module SatelliteSensor
	 * @namespace GV
	 * @extends GV.SatelliteBase
	 * @class SatelliteSensor
	 * @abstract
	 */
	var SatelliteSensor = function (_SatelliteBase) {
	    _inherits(SatelliteSensor, _SatelliteBase);

	    function SatelliteSensor(parent, param) {
	        _classCallCheck(this, SatelliteSensor);

	        var _this = _possibleConstructorReturn(this, (SatelliteSensor.__proto__ || Object.getPrototypeOf(SatelliteSensor)).call(this, parent, param));

	        _this._uuid = _this._uuid || Util.createGuid();
	        return _this;
	    }

	    _createClass(SatelliteSensor, [{
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '';

	            if (!this._properties) this._properties = Util.__getSetterProperties(this);
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this._properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var key = _step.value;

	                    if (this['_' + key] === undefined) continue;
	                    xml = xml + Util._propertyToXml(key, this[key]);
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            if (xml === '') return '';
	            return '<' + this.tag + '><uuid>' + this.id + '</uuid>' + xml + '</' + this.tag + '>';
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return 'sensor';
	        }

	        /**
	         * @property type
	         * @type {}
	         */

	    }, {
	        key: 'type',
	        set: function set(value) {
	            this._type = value;
	        },
	        get: function get() {
	            return this._type;
	        }
	    }, {
	        key: 'name',
	        set: function set(value) {
	            this._name = value;
	        },
	        get: function get() {
	            return this._name;
	        }
	    }, {
	        key: 'id',
	        get: function get() {
	            return this._uuid = this._uuid || Util.createGuid();
	        }

	        /**
	         * @property coverageVisible
	         * @type {Boolean}
	         */

	    }, {
	        key: 'coverageVisible',
	        set: function set(value) {
	            this._coverageVisible = value;
	        },
	        get: function get() {
	            return this._coverageVisible;
	        }

	        /**
	         * @property sensorAngle
	         * @type {double}
	         */

	    }, {
	        key: 'sensorAngle',
	        set: function set(value) {
	            this._sensorAngle = value;
	        },
	        get: function get() {
	            return this._sensorAngle;
	        }

	        /**
	         * @property horizonHalfAngle
	         * @type {double}
	         */

	    }, {
	        key: 'horizonHalfAngle',
	        set: function set(value) {
	            this._horizonHalfAngle = value;
	        },
	        get: function get() {
	            return this._horizonHalfAngle;
	        }

	        /**
	         * @property verticalHalfAngle
	         * @type {double}
	         */

	    }, {
	        key: 'verticalHalfAngle',
	        set: function set(value) {
	            this._verticalHalfAngle = value;
	        },
	        get: function get() {
	            return this._verticalHalfAngle;
	        }

	        /**
	         * @property sensorAngle
	         * @type {}
	         */

	    }, {
	        key: 'coverageStyle',
	        set: function set(value) {
	            this._coverageStyle = new Style(value, this);
	        },
	        get: function get() {
	            return this._coverageStyle;
	        }
	    }]);

	    return SatelliteSensor;
	}(_SatelliteBase3.default);

	exports.default = SatelliteSensor;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "SatelliteSensor.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * WeatherScene.js
	 * 作者：李强
	 * 部门：产品研发中心
	 * 邮箱：liq@geovis.com.cn
	 * 日期：2018-03-03 13:56:05
	 * 用途：类
	 */

	'use strict';

	/**
	 * @module scene
	 */

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Scene2 = __webpack_require__(60);

	var _Scene3 = _interopRequireDefault(_Scene2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * 场景类,天气场景(Base版无该标绘场景)
	 * @namespace GV
	 * @class WeatherScene
	 * @extends GV.WeatherScene
	 */
	var WeatherScene = function (_Scene) {
	    _inherits(WeatherScene, _Scene);

	    function WeatherScene() {
	        _classCallCheck(this, WeatherScene);

	        return _possibleConstructorReturn(this, (WeatherScene.__proto__ || Object.getPrototypeOf(WeatherScene)).apply(this, arguments));
	    }

	    _createClass(WeatherScene, [{
	        key: 'testScene',
	        value: function testScene(object) {
	            this.postMessage('testScene', object);
	        }
	    }, {
	        key: '_parseNode',
	        value: function _parseNode(paramJson) {}

	        /**
	         * 加载cap数据
	         */

	    }, {
	        key: 'setCurCap',
	        value: function setCurCap(cap) {
	            if (!cap) return;
	            this.postMessage(_MessageSet2.default.WeatherScene.setCurCap, cap);
	        }

	        /**
	         * 加载cref数据
	         */

	    }, {
	        key: 'setCurCref',
	        value: function setCurCref(cref) {
	            if (!cref) return;
	            this.postMessage(_MessageSet2.default.WeatherScene.setCurCref, cref);
	        }

	        /**
	         * 加载surface数据
	         */

	    }, {
	        key: 'setCurSurface',
	        value: function setCurSurface(surface) {
	            if ((typeof surface === 'undefined' ? 'undefined' : _typeof(surface)) === 'object') {
	                this.postMessage(_MessageSet2.default.WeatherScene.setCurSurface, surface);
	            }
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '<library>WeatherScene</library><optimized>false</optimized>';
	            return _get(WeatherScene.prototype.__proto__ || Object.getPrototypeOf(WeatherScene.prototype), '_toXml', this).call(this, xml);
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var obj = _get(WeatherScene.prototype.__proto__ || Object.getPrototypeOf(WeatherScene.prototype), '_toJson', this).call(this);
	            if (this._library) obj[this.tag].library = 'WeatherScene';
	            obj[this.tag].visible = this.visible;
	            obj[this.tag].optimized = false;
	            return obj;
	        }
	    }, {
	        key: 'tag',

	        // constructor(param) {
	        //     super(param)
	        //     if (param.url) {
	        //         this._url = param.url;
	        //     }
	        // }

	        get: function get() {
	            return _TagsEnum2.default.WeatherScene;
	        }
	    }]);

	    return WeatherScene;
	}(_Scene3.default);

	exports.default = WeatherScene;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "WeatherScene.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：work_dir
	 * 文件：CenterServer.js
	 * 作者：巩志远
	 * 部门：产品研发中心
	 * 邮箱：gongzy@geovis.com.cn
	 * 日期：2016-03-24 16:59:35
	 * 用途：数据中心类
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _Exception = __webpack_require__(35);

	var _Exception2 = _interopRequireDefault(_Exception);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }newObj.default = obj;return newObj;
	  }
	}

	var centerUrls = {
	  // 获取所有服务列表
	  managerService: 'http://192.168.4.5:9009/api/v1/serviceManager/GetService'
	};

	var CenterServer = {};

	// Util.$.ajax({
	//     url: centerUrls.managerService, type: 'get', dataType: 'json', async: false, timeout: 3000
	// }).done((res) => {
	//     console.debug('执行center');
	//     for (const item of res) {
	//         // 类型是否为服务,并且必须有描述值
	//         if ((item.Type === 'Service') && (('SwaggerString' in item))) {
	//             // 获取描述值,转化为json格式
	//             let swagger = item['SwaggerString'];
	//             // 判断是否为字符串
	//             if (Util.isString(swagger)) {
	//                 // 解析字符串到json
	//                 swagger = JSON.parse(swagger);
	//             }
	//             if (Util.isJson(swagger)) {
	//                 // 获取schemes
	//                 const schemes = swagger['schemes'];
	//                 if (Util.$.isArray(schemes) && schemes.length > 0) {

	//                     // 获取请求的基础路径
	//                     const baseUrl = `${schemes[0]}://${swagger.host}${swagger.basePath}`;
	//                     // 获取描述信息
	//                     const tags = swagger.tags;
	//                     if (Util.$.isArray(tags) && tags.length > 0) {
	//                         // 获取服务名称
	//                         const serviceName = tags[0].name;
	//                         const info = swagger['info'];
	//                         const des = {};
	//                         if (info) {
	//                             const infoArray = ['title', 'description', 'version'];
	//                             for (const infoI of infoArray) {
	//                                 des[infoI] = info[infoI];
	//                             }
	//                         }
	//                         CenterServer[serviceName] = CenterServer[serviceName] || {des: des};
	//                         // 获取素有的操作描述
	//                         const paths = swagger.paths;
	//                         // 循环遍历可进行的操作
	//                         for (let url in paths) {
	//                             // 获取操作描述
	//                             const pathObject = paths[url];
	//                             url = baseUrl + url;
	//                             if (!Util.$.isEmptyObject(pathObject)) {
	//                                 for (const method in pathObject) {
	//                                     // 获取方法描述
	//                                     const methodObject = pathObject[method];
	//                                     CenterServer[serviceName][methodObject['operationId']] = CenterServer[serviceName][methodObject['operationId']] || {};

	//                                     CenterServer[serviceName][methodObject['operationId']][method] = (params = {}) => {
	//                                         // 获取参数
	//                                         const parameters = methodObject['parameters'];
	//                                         // 遍历参数列表
	//                                         for (const parameter of parameters) {
	//                                             if (parameter.in === 'path') {
	//                                                 url = url.replace(`{${parameter.name}}`, params[parameter.name]);
	//                                                 delete params[parameter.name];
	//                                             }
	//                                         }
	//                                         params.url = url;
	//                                         params['type'] = method;
	//                                         return Util.$.ajax(params).fail(() => {
	//                                             throw new Exception(`${serviceName}-${methodObject['operationId']}-${method}服务失败!`);
	//                                         })
	//                                     };
	//                                     CenterServer[serviceName][methodObject['operationId']][method]['desc'] = methodObject;
	//                                 }
	//                             }
	//                         }
	//                     }
	//                 }
	//             }
	//         }
	//     }
	// }).fail(() => {
	//     // throw new Exception(ExceptionMessage.centerMessage.managerService.error);
	// });
	// console.debug('center导出');
	exports.default = CenterServer;
	/*
	 CenterServer.getCenterManagerService();
	 export const getCenterLayers = function () {
	 // return Util.$.getJSON('http://baidu.com');
	 return new Promise((resolve) => {
	 resolve({
	 data: [{aa: '12321'}]
	 })
	 })
	 };
	 export const getCenterPugins = function () {
	 return Util.$.getJSON('http://baidu.com');
	 };
	 */

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "CenterServer.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _Config = __webpack_require__(52);

	var _Config2 = _interopRequireDefault(_Config);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	var Commands = {}; /**
	                    * 项目：gvml
	                    * 文件：Commands.js
	                    * 作者：钱晶
	                    * 部门：产品研发中心
	                    * 邮箱：jqian@mail.ie.ac.cn
	                    * 日期：2017-03-29 13:35:23.
	                    * 用途：命令枚举类
	                    */

	for (var key in _Config2.default.Register) {
	    Commands[_Config2.default.Register[key].name] = {};
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;

	    try {
	        for (var _iterator = _Config2.default.Register[key].commands.post[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var posts = _step.value;

	            console.debug(posts);
	            Commands[_Config2.default.Register[key].name][posts.name.toUpperCase()] = posts.name;
	        }
	    } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion && _iterator.return) {
	                _iterator.return();
	            }
	        } finally {
	            if (_didIteratorError) {
	                throw _iteratorError;
	            }
	        }
	    }

	    var _iteratorNormalCompletion2 = true;
	    var _didIteratorError2 = false;
	    var _iteratorError2 = undefined;

	    try {
	        for (var _iterator2 = _Config2.default.Register[key].commands.listen[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	            var listens = _step2.value;

	            Commands[_Config2.default.Register[key].name][listens.name.toUpperCase()] = listens.name;
	        }
	    } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                _iterator2.return();
	            }
	        } finally {
	            if (_didIteratorError2) {
	                throw _iteratorError2;
	            }
	        }
	    }
	}
	exports.default = Commands;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Commands.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	/**
	 * 项目：GVML
	 * 文件：Socket.js
	 * 作者：qianjing
	 * 部门：产品研发部
	 * 邮箱：jqian@mail.ie.ac.cn
	 * 日期：2017-05-05 20:41:54
	 * 用途：
	 */

	/**
	 * @module map
	 * @main map
	 */
	var Socket = function () {

	    /**
	     * WebSocket封装
	     *  <pre>其作用主要对WebSocket进行封装，方便使用</pre>
	     * @namespace GV
	     * @class Socket
	     * @constructor
	     * @param  {string} url 服务地址
	     * @example
	     *      <script>
	     *          var ws = new GV.Socket('ws://192.168.16.42:9090/');
	     *          var ws = new GV.Socket('192.168.16.42:9090');
	     *      </script>
	     */
	    function Socket(url) {
	        _classCallCheck(this, Socket);

	        var wsURL = void 0;
	        if (/^ws:\/\//g.test(url) === true) {
	            // 说明url以ws://开头
	            wsURL = url;
	        } else {
	            // url 符合路径 
	            wsURL = "ws://" + url;
	        }
	        var reg = /^ws:\/\/(([0-9]{1,3}.){3}[0-9]{1,3}|(\w+.)*([0-9a-z][0-9a-z-]{0,61})?[0-9a-z].[a-z]{2,6})(:[0-9]{1,4})?(\/?|(\/\w+)+\/?)$/;
	        if (wsURL && reg.test(wsURL.toLowerCase())) this.conn = new WebSocket(wsURL);
	    }

	    /**
	     * WebSocket状态码，具体如下：<br>
	     *      <pre>
	     *          0： [GV.WebSocket.CONNECTING] 尚未建立连接
	     *          1： [GV.WebSocket.OPEN] 连接已经建立
	     *          2： [GV.WebSocket.CLOSING] 连接正在关闭
	     *          3： [GV.WebSocket.CLOSED] 连接已关闭或不可用
	     * @property readyState
	     * @type {GV.WebSocket}
	     * @readonly
	     */

	    _createClass(Socket, [{
	        key: "onmessage",

	        /**
	         * 接收到消息回调方法
	         * @method onmessage
	         * @param {Function} callback 回调事件
	         */
	        value: function onmessage(callback) {
	            if (this.conn) {
	                this.conn.onmessage = function (event) {
	                    callback(event);
	                };
	            }
	        }

	        /**
	         * 连接建立成功回调方法
	         * @method onopen
	         * @param {Function} callback 回调事件
	         */

	    }, {
	        key: "onopen",
	        value: function onopen(callback) {
	            if (this.conn) {
	                this.conn.onopen = function (event) {
	                    callback(event);
	                };
	            }
	        }

	        /**
	         * 连接建立失败或者中断回调方法
	         * @method onerror
	         * @param {Function} callback 回调事件
	         */

	    }, {
	        key: "onerror",
	        value: function onerror(callback) {
	            if (this.conn) {
	                this.conn.onerror = function (event) {
	                    callback(event);
	                };
	            }
	        }

	        /**
	         * 连接断开时回调方法
	         * @method onclose
	         * @param {Function} callback 回调事件
	         */

	    }, {
	        key: "onclose",
	        value: function onclose(callback) {
	            if (this.conn) {
	                this.conn.onclose = function (event) {
	                    callback(event);
	                };
	            }
	        }

	        /**
	         * 分发消息
	         * @method send
	         * @param {String} msg 发送的消息
	         */

	    }, {
	        key: "send",
	        value: function send(msg) {
	            if (this.conn) {
	                this.conn.send(msg);
	            }
	        }

	        /**
	         * 断开连接
	         * @method close
	         */

	    }, {
	        key: "close",
	        value: function close() {
	            if (this.conn) {
	                this.conn.close();
	                this.conn = undefined;
	            }
	        }
	    }, {
	        key: "readyState",
	        get: function get() {
	            return this.conn.readyState;
	        }
	    }]);

	    return Socket;
	}();

	exports.default = Socket;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Socket.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _Class2 = __webpack_require__(5);

	var _Class3 = _interopRequireDefault(_Class2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：GVML
	   * 文件：Vector3.js
	   * 作者：董波
	   * 部门：产品研发中心
	   * 邮箱：dongb@geovis.com
	   * 日期：2017-03-21 17:44:51.
	   * 用途：三维坐标
	   */

	/**
	 * @module geometry
	 */
	/**
	 * 三维坐标点
	 * @namespace GV
	 * @class Vector3
	 */
	var Vector3 = function (_Class) {
	  _inherits(Vector3, _Class);

	  function Vector3(lon, lat, height) {
	    _classCallCheck(this, Vector3);

	    //经纬度坐标
	    var _this = _possibleConstructorReturn(this, (Vector3.__proto__ || Object.getPrototypeOf(Vector3)).call(this));

	    _this.lon = lon || 0;
	    _this.lat = lat || 0;
	    _this.height = height || 0;

	    //世界坐标
	    _this.worldX;
	    _this.worldY;
	    _this.worldZ;

	    //屏幕坐标
	    _this.x;
	    _this.y;
	    _this.z;

	    return _this;
	  }

	  _createClass(Vector3, [{
	    key: 'applyMatrix4',
	    value: function applyMatrix4(e) {

	      this.x = this.worldX, this.y = this.worldY, this.z = this.worldZ;
	      var x = this.x,
	          y = this.y,
	          z = this.z;

	      this.x = e[0] * x + e[4] * y + e[8] * z + e[12];
	      this.y = e[1] * x + e[5] * y + e[9] * z + e[13];
	      this.z = e[2] * x + e[6] * y + e[10] * z + e[14];
	      var w = e[3] * x + e[7] * y + e[11] * z + e[15];

	      return this.divideScalar(w);
	    }
	  }, {
	    key: 'divideScalar',
	    value: function divideScalar(scalar) {

	      return this.multiplyScalar(1 / scalar);
	    }
	  }, {
	    key: 'multiplyScalar',
	    value: function multiplyScalar(scalar) {

	      if (isFinite(scalar)) {

	        this.x *= scalar;
	        this.y *= scalar;
	        this.z *= scalar;
	      } else {

	        this.x = 0;
	        this.y = 0;
	        this.z = 0;
	      }

	      return this;
	    }
	  }]);

	  return Vector3;
	}(_Class3.default);

	exports.default = Vector3;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Vector3.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _DataSource2 = __webpack_require__(22);

	var _DataSource3 = _interopRequireDefault(_DataSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Styles = __webpack_require__(40);

	var _Styles2 = _interopRequireDefault(_Styles);

	var _Layout = __webpack_require__(41);

	var _Layout2 = _interopRequireDefault(_Layout);

	var _OgrModelSource = __webpack_require__(42);

	var _OgrModelSource2 = _interopRequireDefault(_OgrModelSource);

	var _TileFeatureServiceSource = __webpack_require__(43);

	var _TileFeatureServiceSource2 = _interopRequireDefault(_TileFeatureServiceSource);

	var _WebFeatureServiceSource = __webpack_require__(44);

	var _WebFeatureServiceSource2 = _interopRequireDefault(_WebFeatureServiceSource);

	var _TileMapServiceSource = __webpack_require__(26);

	var _TileMapServiceSource2 = _interopRequireDefault(_TileMapServiceSource);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：AggLiteLayerSource.js
	   * 作者：lvs
	   * 部门：产品研发中心
	   * 邮箱：lvs@geovis.com.cn
	   * 日期：2017-10-25 10:51:29.
	   * 用途：图层相关数据源类
	   */

	/**
	 * @module DataSource
	 * @main DataSource
	 */
	var AggLiteLayerSource = function (_DataSource) {
	    _inherits(AggLiteLayerSource, _DataSource);

	    function AggLiteLayerSource() {
	        _classCallCheck(this, AggLiteLayerSource);

	        return _possibleConstructorReturn(this, (AggLiteLayerSource.__proto__ || Object.getPrototypeOf(AggLiteLayerSource)).apply(this, arguments));
	    }

	    _createClass(AggLiteLayerSource, [{
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '';
	            if (!this._getproperties) {
	                this._getproperties = Util.__getGetterProperties(this);
	            }
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this._getproperties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var key = _step.value;

	                    if (this['_' + key] !== undefined || key === 'driver') {
	                        if (key === 'features') {
	                            xml += '<' + key + '>' + this[key].toXml() + '</' + key + '>';
	                        } else {
	                            xml += Util._propertyToXml(key, this[key]);
	                        }
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return xml;
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson(json) {
	            if (!json) json = {};
	            if (!this._getproperties) {
	                this._getproperties = Util.__getGetterProperties(this);
	            }

	            for (var i = 0; i < this._getproperties.length; i++) {
	                var key = this._getproperties[i];
	                if (this['_' + key] !== undefined || key === 'driver') {
	                    //直接从私有变量中回去数据 driver除外
	                    if (key === 'features') {
	                        json[key] = this[key].toJson();
	                    } else {
	                        Util._propertyToJson(this, key, json);
	                    }
	                }
	            }

	            return json;
	        }
	    }, {
	        key: 'driver',

	        /**
	         * AGGLite图层相关数据源类
	         *  <pre>其作用主要进行地球影像图层数据源的定义</pre>
	         * @namespace GV
	         * @extends DataSource
	         * @class AggLiteLayerSource
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.features {Object} 
	         * @param options.styles {Object} 样式
	         */
	        /*
	         * 数据驱动driver
	         * @property driver
	         * @type {string}
	         */
	        get: function get() {
	            return _TagsEnum2.default.AGGLite;
	        }

	        /**
	         *  
	         * @property features
	         * @type {object}
	         */

	    }, {
	        key: 'features',
	        set: function set(features) {
	            if (this._features !== undefined) return;
	            if (!(features instanceof _DataSource3.default)) {
	                switch (features.driver) {
	                    case 'ogr':
	                        this._features = new _OgrModelSource2.default(features);
	                        break;
	                    case 'tfs':
	                        this._features = new _TileFeatureServiceSource2.default(features);
	                        break;
	                    case 'wfs':
	                        this._features = new _WebFeatureServiceSource2.default(features);
	                        break;
	                    case 'tms':
	                        this._features = new _TileMapServiceSource2.default(features);
	                        break;
	                    default:
	                }
	            } else {
	                if (!features.constructor) return;
	                if (features instanceof _OgrModelSource2.default || features instanceof _TileFeatureServiceSource2.default || features instanceof _WebFeatureServiceSource2.default || features instanceof _TileMapServiceSource2.default) {
	                    this._features = features;
	                }
	            }
	        },
	        get: function get() {
	            return this._features === undefined ? '' : this._features;
	        }

	        /**
	         * 样式
	         * @property styles
	         * @type {object}
	         */

	    }, {
	        key: 'styles',
	        set: function set(styles) {
	            if (this._styles !== undefined) return;
	            if ((typeof styles === 'undefined' ? 'undefined' : _typeof(styles)) !== 'object') return;
	            if (styles instanceof _Styles2.default) {
	                this._styles = styles;
	            } else {
	                this._styles = new _Styles2.default(styles);
	            }
	        },
	        get: function get() {
	            return this._styles === undefined ? '' : this._styles;
	        }
	    }]);

	    return AggLiteLayerSource;
	}(_DataSource3.default);

	exports.default = AggLiteLayerSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "AggliteLayerSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _DataSource2 = __webpack_require__(22);

	var _DataSource3 = _interopRequireDefault(_DataSource2);

	var _Exception = __webpack_require__(35);

	var _Exception2 = _interopRequireDefault(_Exception);

	var _ExceptionMessage = __webpack_require__(13);

	var _ExceptionMessage2 = _interopRequireDefault(_ExceptionMessage);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：GeneralModelSource.js
	   * 作者：钱晶
	   * 部门：产品研发中心
	   * 邮箱：jqian@mail.ie.ac.cn
	   * 日期：2017-04-08 16:39:41.
	   * 用途：通用矢量图层数据源类
	   */

	var GeneralModelSource = function (_DataSource) {
	    _inherits(GeneralModelSource, _DataSource);

	    function GeneralModelSource(options) {
	        _classCallCheck(this, GeneralModelSource);

	        if (!options.driver) {
	            var _this = _possibleConstructorReturn(this, (GeneralModelSource.__proto__ || Object.getPrototypeOf(GeneralModelSource)).call(this));

	            throw new _Exception2.default(_ExceptionMessage2.default.ERROR_IMAGE_SOURCE);
	        } else {
	            var _this = _possibleConstructorReturn(this, (GeneralModelSource.__proto__ || Object.getPrototypeOf(GeneralModelSource)).call(this, options));
	        }
	        return _possibleConstructorReturn(_this);
	    }

	    _createClass(GeneralModelSource, [{
	        key: 'getDriver',
	        value: function getDriver() {
	            return this._driver;
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var xml = '';
	            xml += '<features';
	            xml += this._name ? ' name=\'' + this._name + '\'' : '';
	            xml += this._driver ? ' driver=\'' + this._driver + '\'' : '';
	            xml += '>';
	            for (var key in this) {
	                if (key !== '_driver' && key !== '_name') {
	                    var pubKey = key.substr(1);
	                    xml += '<' + pubKey + '>' + this[key] + '</' + pubKey + '>';
	                }
	            }
	            xml += '</features>';
	            return xml;
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson(json) {
	            if (!json) json = {};
	            for (var key in this) {
	                var pubKey = key.substr(1);
	                json[pubKey] = this[key];
	            }
	            return json;
	        }
	    }]);

	    return GeneralModelSource;
	}(_DataSource3.default);

	exports.default = GeneralModelSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "GeneralModelSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _TileSource2 = __webpack_require__(25);

	var _TileSource3 = _interopRequireDefault(_TileSource2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * 项目：gvml
	   * 文件：TileWebMapServiceSource.js
	   * 作者：lvs
	   * 部门：产品研发中心
	   * 邮箱：lvs@geovis.com.cn
	   * 日期：2017-10-24 15:33:49.
	   * 用途：基础图层数据源类
	   */

	/**
	 * @module DataSource
	 * @main DataSource
	 */
	var TileWebMapServiceSource = function (_TileSource) {
	    _inherits(TileWebMapServiceSource, _TileSource);

	    function TileWebMapServiceSource() {
	        _classCallCheck(this, TileWebMapServiceSource);

	        return _possibleConstructorReturn(this, (TileWebMapServiceSource.__proto__ || Object.getPrototypeOf(TileWebMapServiceSource)).apply(this, arguments));
	    }

	    _createClass(TileWebMapServiceSource, [{
	        key: 'driver',

	        /**
	         * OGC标准twms服务数据源
	         *  <pre>其作用主要进行地球影像和地形图层数据源的定义</pre>
	         * @namespace GV
	         * @extends TileSource
	         * @class TileWebMapServiceSource
	         * @constructor
	         * @param  {object} options 参数详情如下：<br>
	         * @param options.url {string} 服务地址
	         * @param options.layers {string} 选择wms所融合图层列表
	         * @param options.format {string} 瓦片格式
	         * @param options.version {string} 版本
	         * @param options.srs {string} tiles瓦片使用的坐标系统
	         * @param options.transparent {boolean} 设置图层无数据地区是否透明
	         */
	        /* 
	         * options.capablitiesUrl {string}
	         * options.tileServiceUrl {string} 
	         * options.styles {string} 图层渲染的样式
	         * options.wmsFormat {string} 瓦片格式
	         * options.elevationUnit {string}
	         * options.crs {string} 
	         * options.secondsPerFrame {double} 
	         * 
	         * 
	         */

	        /*
	        * 数据驱动driver
	        * @property driver
	        * @type {string}
	        */
	        get: function get() {
	            return _TagsEnum2.default.TWMS;
	        }

	        /**
	         * 服务地址
	         * @property url
	         * @type {string}
	         */

	    }, {
	        key: 'url',
	        set: function set(url) {
	            if (this._url !== undefined) return;
	            //TODO条件判断
	            this._url = url;
	        },
	        get: function get() {
	            return this._url === undefined ? '' : this._url;
	        }

	        /**
	         * 选择wms所融合图层列表
	         * @property layers
	         * @type {string}
	         */

	    }, {
	        key: 'layers',
	        set: function set(layers) {
	            if (this._layers !== undefined) return;
	            //TODO条件判断
	            this._layers = layers;
	        },
	        get: function get() {
	            return this._layers === undefined ? '' : this._layers;
	        }

	        /**
	         * 瓦片格式
	         * @property format
	         * @type {string}
	         */

	    }, {
	        key: 'format',
	        set: function set(format) {
	            if (this._format !== undefined) return;
	            //TODO条件判断
	            this._format = format;
	        },
	        get: function get() {
	            return this._format === undefined ? '' : this._format;
	        }

	        /**
	         * 版本
	         * @property version
	         * @type {string}
	         */

	    }, {
	        key: 'version',
	        set: function set(version) {
	            if (this._version !== undefined) return;
	            //TODO条件判断
	            this._version = version;
	        },
	        get: function get() {
	            return this._version === undefined ? '' : this._version;
	        }

	        /**
	         * Tiles瓦片使用的坐标系统
	         * @property srs
	         * @type {string}
	         */

	    }, {
	        key: 'srs',
	        set: function set(srs) {
	            if (this._srs !== undefined) return;
	            //TODO条件判断
	            this._srs = srs;
	        },
	        get: function get() {
	            return this._srs === undefined ? '' : this._srs;
	        }

	        /**
	         * 设置图层无数据地区是否透明
	         * @property transparent
	         * @type {boolean}
	         */

	    }, {
	        key: 'transparent',
	        set: function set(transparent) {
	            if (this._transparent !== undefined) return;
	            //TODO条件判断
	            this._transparent = transparent;
	        },
	        get: function get() {
	            return this._transparent === undefined ? '' : this._transparent;
	        }

	        /*
	         * 
	         * @property capablitiesUrl
	         * @type {string}
	         */

	    }, {
	        key: 'capablitiesUrl',
	        set: function set(capablitiesUrl) {
	            if (this._capablitiesUrl !== undefined) return;
	            //TODO条件判断
	            this._capablitiesUrl = capablitiesUrl;
	        },
	        get: function get() {
	            return this._capablitiesUrl === undefined ? '' : this._capablitiesUrl;
	        }

	        /*
	         * 
	         * @property tileServiceUrl
	         * @type {string}
	         */

	    }, {
	        key: 'tileServiceUrl',
	        set: function set(tileServiceUrl) {
	            if (this._tileServiceUrl !== undefined) return;
	            //TODO条件判断
	            this._tileServiceUrl = tileServiceUrl;
	        },
	        get: function get() {
	            return this._tileServiceUrl === undefined ? '' : this._tileServiceUrl;
	        }

	        /*
	         * 图层渲染的样式
	         * @property style
	         * @type {string}
	         */

	    }, {
	        key: 'style',
	        set: function set(style) {
	            if (this._style !== undefined) return;
	            //TODO条件判断
	            this._style = style;
	        },
	        get: function get() {
	            return this._style === undefined ? '' : this._style;
	        }

	        /*
	         * 
	         * @property wmsFormat
	         * @type {string}
	         */

	    }, {
	        key: 'wmsFormat',
	        set: function set(wmsFormat) {
	            if (this._wmsFormat !== undefined) return;
	            //TODO条件判断
	            this._wmsFormat = wmsFormat;
	        },
	        get: function get() {
	            return this._wmsFormat === undefined ? '' : this._wmsFormat;
	        }

	        /*
	         * 
	         * @property elevationUnit
	         * @type {string}
	         */

	    }, {
	        key: 'elevationUnit',
	        set: function set(elevationUnit) {
	            if (this._elevationUnit !== undefined) return;
	            //TODO条件判断
	            this._elevationUnit = elevationUnit;
	        },
	        get: function get() {
	            return this._elevationUnit === undefined ? '' : this._elevationUnit;
	        }

	        /*
	         * 
	         * @property crs
	         * @type {string}
	         */

	    }, {
	        key: 'crs',
	        set: function set(crs) {
	            if (this._crs !== undefined) return;
	            //TODO条件判断
	            this._crs = crs;
	        },
	        get: function get() {
	            return this._crs === undefined ? '' : this._crs;
	        }

	        /*
	         * 
	         * @property secondsPerFrame
	         * @type {string}
	         */

	    }, {
	        key: 'secondsPerFrame',
	        set: function set(secondsPerFrame) {
	            if (this._secondsPerFrame !== undefined) return;
	            //TODO条件判断
	            this._secondsPerFrame = secondsPerFrame;
	        },
	        get: function get() {
	            return this._secondsPerFrame === undefined ? '' : this._secondsPerFrame;
	        }
	    }]);

	    return TileWebMapServiceSource;
	}(_TileSource3.default);

	exports.default = TileWebMapServiceSource;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "TileWebMapServiceSource.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}(); /**
	      * 项目：GVML
	      * 文件：ProxyOption.js
	      * 作者：qianjing
	      * 部门：产品研发部
	      * 邮箱：jqian@mail.ie.ac.cn
	      * 日期：2017-05-08 16:44:02
	      * 用途：代理配置类
	      */

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	/**
	 * @module layer
	 * @main layer
	 */
	var ProxyOption = function () {

	    /**
	     * 代理配置类
	     *  <pre>其作用主要进行图层数据源所需访问代理的参数配置</pre>
	     * @namespace GV
	     * @class ProxyOption
	     * @constructor
	     * @param {string} host 服务器的主机名称
	     * @param {string} port 代理服务器的服务端口
	     * @param {string} username 服务器上的用户名
	     * @param {string} password 登录服务器所需的密码
	     */
	    function ProxyOption(host, port, username, password) {
	        _classCallCheck(this, ProxyOption);

	        this._host = host;
	        this._port = port;
	        this._username = username;
	        this._password = password;
	    }

	    _createClass(ProxyOption, [{
	        key: 'toXml',
	        value: function toXml() {
	            var props = '';
	            props += this.host ? ' host=\'' + this.host + '\'' : '';
	            props += this.port ? ' port=\'' + this.port + '\'' : '';
	            props += this.username ? ' username=\'' + this.username + '\'' : '';
	            props += this.password ? ' password=\'' + this.password + '\'' : '';
	            return '<' + this.tag + props + '/>';
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var json = {};
	            if (this.host) json.host = this.host;
	            if (this.port) json.port = this.port;
	            if (this.username) json.username = this.username;
	            if (this.password) json.password = this.password;
	            if (json.host || json.port || json.username || json.password) {
	                return json;
	            }
	            return undefined;
	        }
	    }, {
	        key: 'host',
	        get: function get() {
	            return this._host;
	        }
	    }, {
	        key: 'port',
	        get: function get() {
	            return this._port;
	        }
	    }, {
	        key: 'username',
	        get: function get() {
	            return this._username;
	        }
	    }, {
	        key: 'password',
	        get: function get() {
	            return this._password;
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Proxy;
	        }
	    }]);

	    return ProxyOption;
	}();

	exports.default = ProxyOption;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ProxyOption.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Bubble.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：广告牌类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _PositionBaseNode2 = __webpack_require__(67);

	var _PositionBaseNode3 = _interopRequireDefault(_PositionBaseNode2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _Util = __webpack_require__(6);

	var Util = _interopRequireWildcard(_Util);

	var _Position = __webpack_require__(68);

	var _Position2 = _interopRequireDefault(_Position);

	var _Vector = __webpack_require__(145);

	var _Vector2 = _interopRequireDefault(_Vector);

	var _ENUM = __webpack_require__(120);

	var _ENUM2 = _interopRequireDefault(_ENUM);

	var _MessageSet = __webpack_require__(21);

	var _MessageSet2 = _interopRequireDefault(_MessageSet);

	function _interopRequireWildcard(obj) {
	    if (obj && obj.__esModule) {
	        return obj;
	    } else {
	        var newObj = {};if (obj != null) {
	            for (var key in obj) {
	                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	            }
	        }newObj.default = obj;return newObj;
	    }
	}

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 广告牌
	 * @namespace GV
	 * @extends GV.PositionBaseNode
	 * @class Bubble
	 * @show true
	 * @constructor
	 * @param {Json} [params] 参数
	 */
	var Bubble = function (_PositionBaseNode) {
	    _inherits(Bubble, _PositionBaseNode);

	    function Bubble() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, Bubble);

	        var _this = _possibleConstructorReturn(this, (Bubble.__proto__ || Object.getPrototypeOf(Bubble)).call(this, params));

	        _this._moveDiv = Util.$('<div class="moveDiv">');
	        _this._moveDiv.css({
	            position: 'absolute',
	            top: '0',
	            left: '0'
	        });
	        _this._line = Util.$('<div class="moveLine">');
	        _this._line.css({
	            position: 'absolute',
	            'border-width': '1px',
	            'border-style': 'dotted',
	            'border-color': '#ff00ff'
	        });

	        _this.isMouseDown = false;
	        _this.downX = 0;
	        _this.downY = 0;
	        _this.bottomX = 0;
	        _this.bottomY = 0;

	        if (_this._anchorType === undefined) _this._anchorType = _ENUM2.default.BUBBLETYPE.GEO_BUBBLE;

	        if (_this._offset === undefined) _this._offset = { x: 0, y: 0 };

	        //整体显示
	        _this._visible = false;
	        return _this;
	    }

	    _createClass(Bubble, [{
	        key: 'setMap',
	        value: function setMap(map, parent) {
	            _get(Bubble.prototype.__proto__ || Object.getPrototypeOf(Bubble.prototype), 'setMap', this).call(this, map, parent);
	            if (map && this.parent) {
	                this._container = map.parent.container;
	                this._render();
	            } else {
	                this._unrender();
	            }
	        }
	    }, {
	        key: '_show',

	        /**
	         * 控制显示（通过三个参数控制显示）
	         */
	        value: function _show() {
	            if (!this._container) return;
	            if (this._userVisible === undefined) this._userVisible = true;
	            if (this._rangeVisible === undefined) this._rangeVisible = true;

	            var visible = false;
	            if (this._userVisible && this._rangeVisible && this._renderVisible) visible = true;

	            if (visible === this._visible) return;

	            this._visible = visible;
	            this._display(visible);
	        }

	        /**
	         * 绑定对象的的屏幕坐标
	         * @property position
	         * @type {x:, y:} 
	         * @description <br>
	         * <pre>
	         * x为相对earth.container左侧的像素值 
	         * y为相对于earth.container底部的像素值
	         * </pre>
	         */

	    }, {
	        key: '_updatePosition',

	        // 标牌位置更新函数
	        value: function _updatePosition() {
	            if (!this._visible) return;
	            if (this._anchorType === _ENUM2.default.BUBBLETYPE.GEO_BUBBLE) {
	                this._setMoveDivPosition(this.position.x + this.offset.x, this._container[0].clientHeight - this.position.y + this.offset.y);
	            } else {
	                this._updateLine();
	            }
	        }
	    }, {
	        key: '_moseDown',
	        value: function _moseDown(e) {
	            if (!this._visible) return;
	            e.stopPropagation();
	            if (e.which === 1) {
	                this.isMouseDown = true;
	                this.downX = e.clientX - this._moveDiv[0].offsetLeft;
	                this.downY = e.clientY - this._moveDiv[0].offsetTop;
	                this.bottomX = this._moveDiv[0].offsetWidth - this.downX;
	                this.bottomY = this._moveDiv[0].offsetHeight - this.downY;
	            }
	        }
	    }, {
	        key: '_moseMove',
	        value: function _moseMove(e) {
	            if (!this._visible) return;
	            e.stopPropagation();
	            if (this.isMouseDown === true) {
	                if (e.clientX >= 0 && e.clientY >= 0 && e.clientX + this.bottomX <= this._container[0].clientWidth && e.clientY + this.bottomY <= this._container[0].clientHeight) {

	                    this.offset.x = e.clientX - this.position.x - this.downX;
	                    this.offset.y = e.clientY - this._container[0].clientHeight + this.position.y - this.downY;

	                    this._setMoveDivPosition(e.clientX - this.downX, e.clientY - this.downY);
	                }
	            }
	        }
	    }, {
	        key: '_moseUp',
	        value: function _moseUp(e) {
	            if (!this._visible) return;
	            e.stopPropagation();
	            this.isMouseDown = false;
	            this.downX = 0;
	            this.downY = 0;
	            this.bottomX = 0;
	            this.bottomY = 0;
	        }

	        //touch事件

	    }, {
	        key: '_touchStart',
	        value: function _touchStart(e) {
	            if (!this._visible) return;
	            e.stopPropagation();

	            this.isMouseDown = true;
	            this.downX = e.touches[0].clientX - this._moveDiv[0].offsetLeft;
	            this.downY = e.touches[0].clientY - this._moveDiv[0].offsetTop;
	            this.bottomX = this._moveDiv[0].offsetWidth - this.downX;
	            this.bottomY = this._moveDiv[0].offsetHeight - this.downY;
	        }
	    }, {
	        key: '_touchMove',
	        value: function _touchMove(e) {
	            if (!this._visible) return;
	            e.stopPropagation();
	            if (this.isMouseDown === true) {
	                if (e.touches[0].clientX >= 0 && e.touches[0].clientY >= 0 && e.touches[0].clientX + this.bottomX <= this._container[0].clientWidth && e.touches[0].clientY + this.bottomY <= this._container[0].clientHeight) {

	                    this.offset.x = e.touches[0].clientX - this.position.x - this.downX;
	                    this.offset.y = e.touches[0].clientY - this._container[0].clientHeight + this.position.y - this.downY;

	                    this._setMoveDivPosition(e.touches[0].clientX - this.downX, e.touches[0].clientY - this.downY);
	                }
	            }
	        }
	    }, {
	        key: '_touchEnd',
	        value: function _touchEnd(e) {
	            if (!this._visible) return;
	            e.stopPropagation();
	            this.isMouseDown = false;
	            this.downX = 0;
	            this.downY = 0;
	            this.bottomX = 0;
	            this.bottomY = 0;
	        }

	        /**
	         * 设置moveDiv的位置 防止位置超出范围
	        */

	    }, {
	        key: '_setMoveDivPosition',
	        value: function _setMoveDivPosition(x, y) {
	            if (!this._container) return;
	            // let moveDivW = $('.moveDiv').width();
	            // let moveDivH = $('.moveDiv').height();
	            var moveDivW = this._moveDiv[0].clientWidth;
	            var moveDivH = this._moveDiv[0].clientHeight;
	            var width = this._container[0].clientWidth;
	            var height = this._container[0].clientHeight;
	            x = Math.round(x > width - moveDivW ? width - moveDivW : x < 0 ? 0 : x);
	            y = Math.round(y > height - moveDivH ? height - moveDivH : y < 0 ? 0 : y);
	            this._moveDiv.css({ left: x + 'px', top: y + 'px' });
	            this._updateLine();
	        }

	        /**
	         * 更新线
	         */

	    }, {
	        key: '_updateLine',
	        value: function _updateLine() {
	            this._rotateLine({
	                x: this.position.x,
	                y: this._container[0].clientHeight - this.position.y
	            }, this._moveDiv[0]);
	        }

	        /**
	         * 显示数据
	         */

	    }, {
	        key: '_render',
	        value: function _render() {
	            if (this._container === undefined) return;

	            this._moveDiv.appendTo(this._container);
	            this._line.appendTo(this._container);
	            this._display(this._visible);

	            // 定义拖拽事件部分
	            this._moveDiv.mousedown(this._moseDown.bind(this));
	            this._container.mouseup(this._moseUp.bind(this));
	            this._container.mousemove(this._moseMove.bind(this));

	            this._moveDiv[0].addEventListener('touchstart', this._touchStart.bind(this));
	            this._container[0].addEventListener('touchend', this._touchEnd.bind(this));
	            this._container[0].addEventListener('touchmove', this._touchMove.bind(this));
	        }
	    }, {
	        key: '_display',
	        value: function _display(isShow) {
	            if (isShow) {
	                var x = this.position.x;
	                var y = this._container[0].clientHeight - this.position.y;
	                if (this._anchorType === _ENUM2.default.BUBBLETYPE.GEO_BUBBLE) {
	                    x = x + this.offset.x;
	                    y = y + this.offset.y;
	                }
	                this._setMoveDivPosition(x, y);
	                this._moveDiv.show();
	                this._line.show();
	                this._updateLine();
	            } else {
	                this._moveDiv.hide();
	                this._line.hide();
	            }
	        }

	        /**
	         * 清空数据
	         */

	    }, {
	        key: '_unrender',
	        value: function _unrender() {
	            if (!this._container) return;
	            if (this._moveDiv) {
	                Util.$(this._moveDiv).remove();
	                if (this._anchorType === _ENUM2.default.BUBBLETYPE.SCREEN_BUBBLE) {
	                    this._container.unbind('moseup', this._moseMove);
	                    this._moveDiv.unbind('mosedown', this._moseDown);
	                    this._container.unbind('mosemove', this._moseMove);

	                    this._container[0].removeEventListener('touchend', this._touchEnd);
	                    this._moveDiv[0].removeEventListener('touchstart', this._touchStart);
	                    this._container[0].removeEventListener('touchmove', this._touchMove);
	                }
	            }

	            if (this._line) {
	                Util.$(this._line).remove();
	                this._line[0].style.width = 0 + 'px';
	            }
	        }
	    }, {
	        key: '_rotateLine',
	        value: function _rotateLine(object, bindNode) {
	            if (bindNode.offsetLeft === 0 && bindNode.offsetTop === 0) return;
	            var start = object;
	            var offsetWidth = bindNode.offsetWidth;
	            var offsetHeight = bindNode.offsetHeight;
	            var node = {
	                x: bindNode.offsetLeft + offsetWidth / 2,
	                y: bindNode.offsetTop + offsetHeight / 2
	            };
	            var end = { x: 0, y: 0 };
	            var deltaX = node.x - start.x;
	            var deltaY = node.y - start.y;
	            var tan_alpha = 0;
	            /**
	             *    t = tan(a) = deltaY / deltaX;  
	             *     \  t > 1   |  t < -1  /
	             *      \         |         /
	             *  0<t<1\   二   |  一    / 0>t>-1
	             *        \       |       /
	             * ----------------------------------
	             *         /      |       \
	             *  -1<t<0/  三   |    四  \ 0<t<1
	             *       /        |         \
	             *      /  t < -1 |   t > 1  \    
	             */
	            // 正上方 // JS 支持 无穷 +/- Infinity
	            // console.log(deltaX, deltaY);
	            if (deltaX > 0 && deltaY > 0) {
	                // 四
	                end.x = bindNode.offsetLeft;
	                end.y = bindNode.offsetTop;
	            } else if (deltaX > 0 && deltaY < 0) {
	                // 一
	                end.x = bindNode.offsetLeft;
	                end.y = bindNode.offsetTop + offsetHeight;
	            } else if (deltaX < 0 && deltaY < 0) {
	                // 二
	                end.x = bindNode.offsetLeft + offsetWidth;
	                end.y = bindNode.offsetTop + offsetHeight;
	            } else if (deltaX < 0 && deltaY > 0) {
	                // 三
	                end.x = bindNode.offsetLeft + offsetWidth;
	                end.y = bindNode.offsetTop;
	            }
	            deltaX = end.x - start.x;
	            deltaY = end.y - start.y;
	            // console.log(bindNode.offsetLeft, offsetWidth, end.x);
	            // console.log(bindNode.offsetTop, offsetHeight, end.y);
	            // console.log('---------------------------------------');
	            // 计算start 和 end 的 长度以及偏角
	            var lineLength = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
	            var radius = lineLength / 2;
	            // 算出来角度
	            var du = Math.acos(deltaX / lineLength) * (deltaY < 0 ? -1 : 1);
	            var deg = du / Math.PI * 180;

	            var dy_ = radius * Math.sin(du);
	            var dx_ = radius * Math.cos(du) - radius;
	            // DOM
	            var line = this._line[0];
	            line.style.width = lineLength + 'px';
	            line.style.transform = 'translate(' + dx_ + 'px,' + dy_ + 'px) rotate(' + deg + 'deg)';
	            line.style.left = start.x + 'px';
	            line.style.top = start.y + 'px';
	        }

	        //当绑定对象为bubble时使用

	    }, {
	        key: '_updateBubble',
	        value: function _updateBubble() {
	            var _this2 = this;

	            if (this._bindBubble) {
	                if (this._bindBubble.moveDiv && this._container) {
	                    this.position = { x: this._bindBubble.moveDiv[0].offsetLeft, y: this._container[0].clientHeight - this._bindBubble.moveDiv[0].offsetTop };
	                    this.renderVisible = this._bindBubble.renderVisible;
	                }
	            } else {
	                this._unrender();
	                return;
	            }

	            requestAnimationFrame(function () {
	                _this2._updateBubble();
	            });
	        }
	    }, {
	        key: '_callBack',
	        value: function _callBack(msg) {
	            switch (msg.para1) {
	                case 'geo_to_screen':
	                    if (msg.para2.remove) {
	                        this._moveDiv.show = false;
	                        this._line.show = false;
	                    } else {
	                        var x = Number(msg.para2.GeoToScreen.x);
	                        var y = Number(msg.para2.GeoToScreen.y);
	                        var visible = msg.para2.GeoToScreen.visible === 'true';

	                        this.position = { x: x, y: y };
	                        this.renderVisible = visible;

	                        if (this._userCallBack) {
	                            this._userCallBack({ x: x, y: y, visible: visible });
	                        }
	                    }
	                    break;
	                // case 'remove'

	                //     break;
	                default:
	                    break;
	            }
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            if (!this.bindingObject) {
	                return '<' + this.tag + '><uuid>' + this.id + '</uuid></' + this.tag + '>';
	            } else {
	                return '<' + this.tag + '><uuid>' + this.id + '</uuid><binding_object>' + this.bindingObject + '</binding_object></' + this.tag + '>';
	            }
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            return undefined;
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Bubble;
	        }

	        /**
	         * 提供给相机距离的显隐参数(默认无效)
	         * @property rangeVisible
	         * @type {Boolean} 
	         * @default undefined;
	         */

	    }, {
	        key: 'rangeVisible',
	        set: function set(rangeVisible) {
	            if (this._rangeVisible === rangeVisible) return;
	            this._rangeVisible = rangeVisible;
	            this._show();
	        },
	        get: function get() {
	            return this._rangeVisible;
	        }

	        /**
	         * 提供自定义显隐（默认无效）
	         * @property userVisible
	         * @type {Boolean}
	         * @default undefined
	         */

	    }, {
	        key: 'userVisible',
	        set: function set(userVisible) {
	            if (this._userVisible === userVisible) return;
	            this._userVisible = userVisible;
	            this._show();
	        },
	        get: function get() {
	            return this._userVisible;
	        }

	        /**
	         * 绑定对象是否渲染(由c++发起)
	         * @property renderVisible
	         * @type {Boolean}
	         */

	    }, {
	        key: 'renderVisible',
	        set: function set(renderVisible) {
	            if (this._renderVisible === renderVisible) return;
	            this._renderVisible = renderVisible;
	            this._show();
	        },
	        get: function get() {
	            return this._renderVisible;
	        }

	        /**
	         * @property offset
	         * @type {Object}
	         * @default {x:0, y:0}
	         * @description 
	         * moveDiv相对与绑定对象屏幕坐标的偏移的偏移
	         * 当锚定类型为GEO_BUBBLE时有效
	         */

	    }, {
	        key: 'offset',
	        set: function set(offset) {
	            this._offset = offset;
	        },
	        get: function get() {
	            return this._offset;
	        }

	        /**
	         * 移动div [只读]
	         * @property moveDiv
	         * @type jqury对象标签
	         * @description <br>
	         * <pre>
	         * 默认css属性 position: 'absolute',
	         * 
	         *(!!!!!注意)不能修改的css属性
	         *              position,
	         *              bottom,
	         *              top,
	         *              left,
	         * </pre>
	         */

	    }, {
	        key: 'moveDiv',
	        get: function get() {
	            return this._moveDiv;
	        }

	        /**
	         * 连接线div[只读]
	         * @property lineDiv
	         * @type jqury对象标签
	         * @description <br>
	         * <pre>
	         * 默认css属性 position: 'absolute',
	         *              'border-width': '1px',
	         *              'border-style': 'dotted',
	         *              'border-color': '#ff00ff'
	         * 
	         *(!!!!!注意)不能修改的css属性
	         *              position,
	         *              bottom,
	         *              top,
	         *              left,
	         *              width,
	         * <pre>
	         */

	    }, {
	        key: 'lineDiv',
	        get: function get() {
	            return this._line;
	        }

	        /**
	         * 坐标改变接口
	         * @property positionChange
	         * @type {Function}
	         * @description 用户自定义回调函数监听绑定对象屏幕坐标变化和显隐{x: ,y: ,visible:}
	         */

	    }, {
	        key: 'userCallBack',
	        set: function set(fun) {
	            this._userCallBack = fun;
	        },
	        get: function get() {
	            return this._userCallBack;
	        }

	        /**
	         * 绑定标会对象的id
	         * 如果绑定bubble请绑定对象
	         * @property bindingObject
	         * @type {String}
	         */

	    }, {
	        key: 'bindingObject',
	        set: function set(obj) {
	            if (obj === this._bindingObject) return;
	            if (obj === '' || obj === undefined || obj === null) {
	                this._bindingObject = '';
	                this._bindBubble = undefined;
	                this._updateProperty('bindingObject');
	            }

	            if (obj instanceof Object) {
	                if (this._bindingObject === obj.id) return;

	                if (obj.tag === _TagsEnum2.default.Bubble) {
	                    this._bindBubble = obj;
	                    this._bindingObject = obj.id;
	                    this._updateBubble();
	                    return;
	                }
	                obj = obj.id;
	            }

	            this._bindingObject = obj;
	            this._updateProperty('bindingObject');
	            this._bindBubble = undefined;
	        },
	        get: function get() {
	            return this._bindingObject;
	        }

	        /**
	         * 锚定类型
	         * @property anchorType
	         * @type {GV.BUBBLETYPE}
	         * @default GV.BUBBLETYPE.GEO_BUBBLE
	         */

	    }, {
	        key: 'anchorType',
	        set: function set(anchorType) {
	            this._anchorType = anchorType;
	        },
	        get: function get() {
	            return this._anchorType;
	        }
	    }, {
	        key: 'position',
	        set: function set(position) {
	            if (!this._container) return;
	            if (!position || !this.map) return;

	            this._position = position;
	            this._updatePosition();
	        },
	        get: function get() {
	            return this._position;
	        }
	    }]);

	    return Bubble;
	}(_PositionBaseNode3.default);

	exports.default = Bubble;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "Bubble.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：Video.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：视频类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Node = __webpack_require__(61);

	var _Node2 = _interopRequireDefault(_Node);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 视频类(免费版无该标绘实体)
	 * @namespace GV
	 * @extends GV.BaseNode
	 * @class Video
	 * @constructor
	 * @param {Json} [params] 参数
	 */
	var Video = function (_BaseNode) {
	    _inherits(Video, _BaseNode);

	    function Video() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, Video);

	        return _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).call(this, params));
	    }

	    _createClass(Video, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            _get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), '_callBack', this).call(this, msg);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.Video;
	        }
	    }]);

	    return Video;
	}(_Node2.default);

	exports.default = Video;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "video.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：FieldData.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途:
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Node2 = __webpack_require__(61);

	var _Node3 = _interopRequireDefault(_Node2);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	var _ElecData = __webpack_require__(153);

	var _ElecData2 = _interopRequireDefault(_ElecData);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @module node
	 */
	/**
	 * 
	 * @namespace GV
	 * @extends GV.Node
	 * @class FieldData
	 * @constructor
	 * @param {Json} [params] 参数
	 */
	var FieldData = function (_Node) {
	    _inherits(FieldData, _Node);

	    function FieldData() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, FieldData);

	        return _possibleConstructorReturn(this, (FieldData.__proto__ || Object.getPrototypeOf(FieldData)).call(this, params));
	    }

	    _createClass(FieldData, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            _get(FieldData.prototype.__proto__ || Object.getPrototypeOf(FieldData.prototype), '_callBack', this).call(this, msg);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.FieldData;
	        }

	        /**
	         * 电磁罩
	         * @property elecData
	         * @type {Object}
	         */

	    }, {
	        key: 'elecData',
	        set: function set(elecData) {
	            if (elecData === undefined) return;
	            this._elecData = new _ElecData2.default(elecData);
	        },
	        get: function get() {
	            return this._elecData;
	        }
	    }]);

	    return FieldData;
	}(_Node3.default);

	exports.default = FieldData;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "FieldData.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：ElecData.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-06-21 16:14:16
	 * 用途：储存电磁数据
	 */

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	/**
	 * 储存fieldData基础数据的类
	 * @module node
	 * @class ElecData
	 */
	var ElecData = function () {
	    function ElecData() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, ElecData);

	        this.lon_min = params.lon_min !== undefined ? params.lon_min : 0;
	        this.lat_min = params.lat_min !== undefined ? params.lat_min : 0;
	        this.lon_max = params.lon_max !== undefined ? params.lon_max : 0;
	        this.lat_max = params.lat_max !== undefined ? params.lat_max : 0;

	        this.field_data = params.field_data !== undefined ? this._parseField(params.field_data) : 0;
	        this.rows = params.rows !== undefined ? params.rows : 0;
	        this.cols = params.cols !== undefined ? params.cols : 0;
	        this.minCut = params.minCut !== undefined ? params.minCut : 0;
	        this.maxCut = params.maxCut !== undefined ? params.maxCut : 0;

	        this.colors = params.colors !== undefined ? this._parseColor(params.colors) : 0;
	        this.levels = params.levels !== undefined ? params.levels : 0;
	        this.density = params.density !== undefined ? params.density : 0;
	        this.fd_type = params.fd_type !== undefined ? params.fd_type : 0;
	        this.base_height = params.base_height !== undefined ? params.base_height : 0;
	    }

	    _createClass(ElecData, [{
	        key: '_parseField',
	        value: function _parseField(data) {
	            return this._strToArry(data, 'float');
	        }
	    }, {
	        key: '_parseColor',
	        value: function _parseColor(data) {
	            return this._strToArry(data, 'int');
	        }
	    }, {
	        key: '_strToArry',
	        value: function _strToArry(data, type) {

	            if (data instanceof Array) return data;
	            if (!(data instanceof String)) return 0;

	            var array = data.split(' ');
	            for (var i = 0; i < array.length; i++) {
	                if (type === 'int') {
	                    array[i] = parseInt(array[i], 10);
	                } else {
	                    array[i] = parseFloat(array[i]);
	                }
	            }
	            return array;
	        }

	        /**
	         * 数据数组转字符串[[x,y,z][x,y,z]] >>> 'x y z,x y z'
	         */

	    }, {
	        key: '_arayToStr',
	        value: function _arayToStr(datas) {
	            var str = '';
	            if (!datas || !(datas instanceof Array) || datas.length === 0) return '';

	            for (var i = 0; i < datas.length; i++) {
	                str += datas[i];
	                if (i !== datas.length - 1) {
	                    str += ' ';
	                } else {
	                    str += '';
	                }
	            }
	            return str;
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var str = '';
	            for (var key in this) {
	                if (this[key] !== undefined) {
	                    if (this[key] instanceof Array) {
	                        str += '<' + key + '>' + this._arayToStr(this[key]) + '</' + key + '>';
	                    } else {
	                        str += '<' + key + '>' + this[key] + '</' + key + '>';
	                    }
	                }
	            }

	            str = '<elec_data>' + str + '</elec_data>';
	            return str;
	        }
	    }, {
	        key: 'toJson',
	        value: function toJson() {
	            var obj = {};
	            for (var key in this) {
	                if (this[key] !== undefined) {
	                    if (this[key] instanceof Array) {
	                        obj[key] = this._arayToStr(this[key]);
	                    } else {
	                        obj[key] = this[key];
	                    }
	                }
	            }
	            return { elec_data: obj };
	        }
	    }]);

	    return ElecData;
	}();

	exports.default = ElecData;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ElecData.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：ParticaleEffect.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：点特效类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Node = __webpack_require__(61);

	var _Node2 = _interopRequireDefault(_Node);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var ParticaleEffect = function (_BaseNode) {
	    _inherits(ParticaleEffect, _BaseNode);

	    function ParticaleEffect() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, ParticaleEffect);

	        return _possibleConstructorReturn(this, (ParticaleEffect.__proto__ || Object.getPrototypeOf(ParticaleEffect)).call(this, params));
	    }

	    _createClass(ParticaleEffect, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            _get(ParticaleEffect.prototype.__proto__ || Object.getPrototypeOf(ParticaleEffect.prototype), '_callBack', this).call(this, msg);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.ParticaleEffect;
	        }

	        /**
	         * 获取图标路径
	         * @returns {string}
	         */

	    }, {
	        key: 'icon',
	        get: function get() {
	            return this.style.icon;
	        }

	        /**
	         * 更新图标样式;
	         * @param url
	         */

	        , set: function set(url) {
	            this.style.icon = url;
	        }
	    }]);

	    return ParticaleEffect;
	}(_Node2.default);

	exports.default = ParticaleEffect;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "ParticaleEffect.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：GVML
	 * 文件：PathFlowEffect.js
	 * 作者：董波
	 * 部门：产品研发中心
	 * 邮箱：dongb@geovis.com.cn
	 * 日期：2017-04-25 15:14:16
	 * 用途：流动路径类
	 */

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	var _get = function get(object, property, receiver) {
	    if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	        var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	        } else {
	            return get(parent, property, receiver);
	        }
	    } else if ("value" in desc) {
	        return desc.value;
	    } else {
	        var getter = desc.get;if (getter === undefined) {
	            return undefined;
	        }return getter.call(receiver);
	    }
	};

	var _Node = __webpack_require__(61);

	var _Node2 = _interopRequireDefault(_Node);

	var _TagsEnum = __webpack_require__(23);

	var _TagsEnum2 = _interopRequireDefault(_TagsEnum);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var PathFlowEffect = function (_BaseNode) {
	    _inherits(PathFlowEffect, _BaseNode);

	    function PathFlowEffect() {
	        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, PathFlowEffect);

	        return _possibleConstructorReturn(this, (PathFlowEffect.__proto__ || Object.getPrototypeOf(PathFlowEffect)).call(this, params));
	    }

	    /**
	     * @extends GV.Class
	     */

	    _createClass(PathFlowEffect, [{
	        key: '_callBack',
	        value: function _callBack(msg) {
	            _get(PathFlowEffect.prototype.__proto__ || Object.getPrototypeOf(PathFlowEffect.prototype), '_callBack', this).call(this, msg);
	        }
	    }, {
	        key: 'toXml',
	        value: function toXml() {
	            var positionXml = this.position.toXml();
	            var innerXML = '' + positionXml;
	            return this._toXml(innerXML);
	        }
	    }, {
	        key: 'tag',
	        get: function get() {
	            return _TagsEnum2.default.PlaceNode;
	        }

	        /**
	         * 获取图标路径
	         * @returns {string}
	         */

	    }, {
	        key: 'icon',
	        get: function get() {
	            return this.style.icon;
	        }

	        /**
	         * 更新图标样式;
	         * @param url
	         */

	        , set: function set(url) {
	            this.style.icon = url;
	        }
	    }]);

	    return PathFlowEffect;
	}(_Node2.default);

	exports.default = PathFlowEffect;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "PathFlowEffect.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gv5_gvml
	 * 文件：Interpolation.js
	 * 作者：钱晶
	 * 部门：产品研发中心
	 * 邮箱：jqian@mail.ie.ac.cn
	 * 日期：2017‎-‎6‎-‎27 0‏‎9:40:04
	 * 用途：插值策略的几种类型
	 */

	'use strict';

	/**
	 * 插值策略的几种类型
	 * @module global
	 * @submodule global-enum
	 * @namespace GV
	 * @class INTERPOLATION
	 */

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  /**
	   * 最邻近的算法
	   * @property {GV.INTERPOLATION} NEAREST
	   * @final
	   * @static
	   */
	  NEAREST: 'nearst',
	  /**
	   * 平均相邻值的算法
	   * @property {GV.INTERPOLATION} AVERAGE
	   * @final
	   * @static
	   */
	  AVERAGE: 'average',
	  /**
	   * 在两个轴上线性插值
	   * @property {GV.INTERPOLATION} BILINEAR
	   * @final
	   * @static
	   */
	  BILINEAR: 'bilinear'
	};

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "INTERPOLATION.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	/**
	 * 项目：gv5_gvml
	 * 文件：WEBSOCKET.js
	 * 作者：钱晶
	 * 部门：产品研发中心
	 * 邮箱：jqian@mail.ie.ac.cn
	 * 日期：2017‎-‎6‎-‎27 0‏‎9:45:53
	 * 用途：WebSocket状态码
	 */

	'use strict';

	/**
	 * WebSocket状态码
	 * @module global
	 * @submodule global-enum
	 * @namespace GV
	 * @class WEBSOCKET
	 */

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  /**
	   * 尚未建立连接
	   * @property {GV.WEBSOCKET} CONNECTING
	   * @final
	   * @static
	   */
	  CONNECTING: 0,
	  /**
	   * 连接已经建立
	   * @property {GV.WEBSOCKET} OPEN
	   * @final
	   * @static
	   */
	  OPEN: 1,
	  /**
	   * 连接正在关闭
	   * @property {GV.WEBSOCKET} CLOSING
	   * @final
	   * @static
	   */
	  CLOSING: 2,
	  /**
	   * 连接已关闭或不可用
	   * @property {GV.WEBSOCKET} CLOSED
	   * @final
	   * @static
	   */
	  CLOSED: 3
	};

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "WEBSOCKET.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-api\\modules\\index.js"), RootInstanceProvider = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\RootInstanceProvider.js"), ReactMount = require("react-dom/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var xg = {};

	xg.start = function () {
	    return new Promise(function (resolve, reject) {
	        if (!window.gvStartVoiceInPut) {
	            reject('该浏览器不支持智能语音，请使用地理空间浏览器');
	        }
	        if (!xg._isLoadFinish) {
	            reject('智能语音未初始化完成');
	        }
	        window.gvStartVoiceInPut();
	        xg._callback = resolve;
	    });
	};

	xg.stop = function () {
	    if (!window.gvStopVoiceInput) return;
	    window.gvStopVoiceInput();
	};

	//加载延迟确保语音模块加载完毕
	setTimeout(function () {
	    if (!window.gvStartVoiceInPut) {
	        console.log('loadVoiceFail');
	        return;
	    }
	    xg._isLoadFinish = true;
	    window.getVoiceText = function (info) {
	        if (!xg._callback) return;
	        xg._callback(info);
	    };
	    console.log('loadVoiceSuccess');
	}, 1);

	exports.default = xg;

	/* REACT HOT LOADER */ }).call(this); } finally { if (false) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = require("D:\\dongbNew\\DG\\iExplorer\\gvml\\node_modules\\react-hot-loader\\makeExportsHot.js"); if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "xg.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }

/***/ })
/******/ ])
});
;